{"version":3,"file":"js/vendor.aptos-c2d3f7f4.e2bb0067.js","mappings":"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","sources":["webpack://app/../src/utils/hd-key.ts","webpack://app/../src/utils/misc.ts","webpack://app/../src/utils/memoize-decorator.ts","webpack://app/../src/utils/hex_string.ts","webpack://app/../src/utils/pagination_helpers.ts","webpack://app/../src/utils/api-endpoints.ts","webpack://app/../src/aptos_types/index.ts","webpack://app/../src/bcs/index.ts","webpack://app/../src/bcs/consts.ts","webpack://app/../src/bcs/serializer.ts","webpack://app/../src/bcs/deserializer.ts","webpack://app/../src/bcs/helper.ts","webpack://app/../src/aptos_types/account_address.ts","webpack://app/../src/aptos_types/ed25519.ts","webpack://app/../src/aptos_types/multi_ed25519.ts","webpack://app/../src/aptos_types/authenticator.ts","webpack://app/../src/aptos_types/identifier.ts","webpack://app/../src/aptos_types/type_tag.ts","webpack://app/../src/aptos_types/transaction.ts","webpack://app/../src/aptos_types/abi.ts","webpack://app/../src/aptos_types/authentication_key.ts","webpack://app/../src/aptos_types/rotation_proof_challenge.ts","webpack://app/../src/account/aptos_account.ts","webpack://app/../src/indexer/generated/queries.ts","webpack://app/../src/providers/indexer.ts","webpack://app/../src/generated/index.ts","webpack://app/../src/generated/core/BaseHttpRequest.ts","webpack://app/../src/generated/core/ApiError.ts","webpack://app/../src/generated/core/CancelablePromise.ts","webpack://app/../src/generated/core/request.ts","webpack://app/../src/generated/core/AxiosHttpRequest.ts","webpack://app/../src/generated/services/AccountsService.ts","webpack://app/../src/generated/services/BlocksService.ts","webpack://app/../src/generated/services/EventsService.ts","webpack://app/../src/generated/services/GeneralService.ts","webpack://app/../src/generated/services/TablesService.ts","webpack://app/../src/generated/services/TransactionsService.ts","webpack://app/../src/generated/services/ViewService.ts","webpack://app/../src/generated/AptosGeneratedClient.ts","webpack://app/../src/generated/core/OpenAPI.ts","webpack://app/../src/generated/models/AptosErrorCode.ts","webpack://app/../src/generated/models/MoveFunctionVisibility.ts","webpack://app/../src/generated/models/RoleType.ts","webpack://app/../src/generated/schemas/$AccountData.ts","webpack://app/../src/generated/schemas/$AccountSignature.ts","webpack://app/../src/generated/schemas/$AccountSignature_Ed25519Signature.ts","webpack://app/../src/generated/schemas/$AccountSignature_MultiEd25519Signature.ts","webpack://app/../src/generated/schemas/$Address.ts","webpack://app/../src/generated/schemas/$AptosError.ts","webpack://app/../src/generated/schemas/$AptosErrorCode.ts","webpack://app/../src/generated/schemas/$Block.ts","webpack://app/../src/generated/schemas/$BlockMetadataTransaction.ts","webpack://app/../src/generated/schemas/$DecodedTableData.ts","webpack://app/../src/generated/schemas/$DeletedTableData.ts","webpack://app/../src/generated/schemas/$DeleteModule.ts","webpack://app/../src/generated/schemas/$DeleteResource.ts","webpack://app/../src/generated/schemas/$DeleteTableItem.ts","webpack://app/../src/generated/schemas/$DirectWriteSet.ts","webpack://app/../src/generated/schemas/$Ed25519Signature.ts","webpack://app/../src/generated/schemas/$EncodeSubmissionRequest.ts","webpack://app/../src/generated/schemas/$EntryFunctionId.ts","webpack://app/../src/generated/schemas/$EntryFunctionPayload.ts","webpack://app/../src/generated/schemas/$Event.ts","webpack://app/../src/generated/schemas/$EventGuid.ts","webpack://app/../src/generated/schemas/$GasEstimation.ts","webpack://app/../src/generated/schemas/$GenesisPayload.ts","webpack://app/../src/generated/schemas/$GenesisPayload_WriteSetPayload.ts","webpack://app/../src/generated/schemas/$GenesisTransaction.ts","webpack://app/../src/generated/schemas/$HashValue.ts","webpack://app/../src/generated/schemas/$HealthCheckSuccess.ts","webpack://app/../src/generated/schemas/$HexEncodedBytes.ts","webpack://app/../src/generated/schemas/$IdentifierWrapper.ts","webpack://app/../src/generated/schemas/$IndexResponse.ts","webpack://app/../src/generated/schemas/$ModuleBundlePayload.ts","webpack://app/../src/generated/schemas/$MoveAbility.ts","webpack://app/../src/generated/schemas/$MoveFunction.ts","webpack://app/../src/generated/schemas/$MoveFunctionGenericTypeParam.ts","webpack://app/../src/generated/schemas/$MoveFunctionVisibility.ts","webpack://app/../src/generated/schemas/$MoveModule.ts","webpack://app/../src/generated/schemas/$MoveModuleBytecode.ts","webpack://app/../src/generated/schemas/$MoveModuleId.ts","webpack://app/../src/generated/schemas/$MoveResource.ts","webpack://app/../src/generated/schemas/$MoveScriptBytecode.ts","webpack://app/../src/generated/schemas/$MoveStruct.ts","webpack://app/../src/generated/schemas/$MoveStructField.ts","webpack://app/../src/generated/schemas/$MoveStructGenericTypeParam.ts","webpack://app/../src/generated/schemas/$MoveStructTag.ts","webpack://app/../src/generated/schemas/$MoveStructValue.ts","webpack://app/../src/generated/schemas/$MoveType.ts","webpack://app/../src/generated/schemas/$MoveValue.ts","webpack://app/../src/generated/schemas/$MultiAgentSignature.ts","webpack://app/../src/generated/schemas/$MultiEd25519Signature.ts","webpack://app/../src/generated/schemas/$MultisigPayload.ts","webpack://app/../src/generated/schemas/$MultisigTransactionPayload.ts","webpack://app/../src/generated/schemas/$PendingTransaction.ts","webpack://app/../src/generated/schemas/$RawTableItemRequest.ts","webpack://app/../src/generated/schemas/$RoleType.ts","webpack://app/../src/generated/schemas/$ScriptPayload.ts","webpack://app/../src/generated/schemas/$ScriptWriteSet.ts","webpack://app/../src/generated/schemas/$StateCheckpointTransaction.ts","webpack://app/../src/generated/schemas/$StateKeyWrapper.ts","webpack://app/../src/generated/schemas/$SubmitTransactionRequest.ts","webpack://app/../src/generated/schemas/$TableItemRequest.ts","webpack://app/../src/generated/schemas/$Transaction.ts","webpack://app/../src/generated/schemas/$Transaction_BlockMetadataTransaction.ts","webpack://app/../src/generated/schemas/$Transaction_GenesisTransaction.ts","webpack://app/../src/generated/schemas/$Transaction_PendingTransaction.ts","webpack://app/../src/generated/schemas/$Transaction_StateCheckpointTransaction.ts","webpack://app/../src/generated/schemas/$Transaction_UserTransaction.ts","webpack://app/../src/generated/schemas/$TransactionPayload.ts","webpack://app/../src/generated/schemas/$TransactionPayload_EntryFunctionPayload.ts","webpack://app/../src/generated/schemas/$TransactionPayload_ModuleBundlePayload.ts","webpack://app/../src/generated/schemas/$TransactionPayload_MultisigPayload.ts","webpack://app/../src/generated/schemas/$TransactionPayload_ScriptPayload.ts","webpack://app/../src/generated/schemas/$TransactionsBatchSingleSubmissionFailure.ts","webpack://app/../src/generated/schemas/$TransactionsBatchSubmissionResult.ts","webpack://app/../src/generated/schemas/$TransactionSignature.ts","webpack://app/../src/generated/schemas/$TransactionSignature_Ed25519Signature.ts","webpack://app/../src/generated/schemas/$TransactionSignature_MultiAgentSignature.ts","webpack://app/../src/generated/schemas/$TransactionSignature_MultiEd25519Signature.ts","webpack://app/../src/generated/schemas/$U128.ts","webpack://app/../src/generated/schemas/$U256.ts","webpack://app/../src/generated/schemas/$U64.ts","webpack://app/../src/generated/schemas/$UserTransaction.ts","webpack://app/../src/generated/schemas/$VersionedEvent.ts","webpack://app/../src/generated/schemas/$ViewRequest.ts","webpack://app/../src/generated/schemas/$WriteModule.ts","webpack://app/../src/generated/schemas/$WriteResource.ts","webpack://app/../src/generated/schemas/$WriteSet.ts","webpack://app/../src/generated/schemas/$WriteSet_DirectWriteSet.ts","webpack://app/../src/generated/schemas/$WriteSet_ScriptWriteSet.ts","webpack://app/../src/generated/schemas/$WriteSetChange.ts","webpack://app/../src/generated/schemas/$WriteSetChange_DeleteModule.ts","webpack://app/../src/generated/schemas/$WriteSetChange_DeleteResource.ts","webpack://app/../src/generated/schemas/$WriteSetChange_DeleteTableItem.ts","webpack://app/../src/generated/schemas/$WriteSetChange_WriteModule.ts","webpack://app/../src/generated/schemas/$WriteSetChange_WriteResource.ts","webpack://app/../src/generated/schemas/$WriteSetChange_WriteTableItem.ts","webpack://app/../src/generated/schemas/$WriteSetPayload.ts","webpack://app/../src/generated/schemas/$WriteTableItem.ts","webpack://app/../src/transaction_builder/builder_utils.ts","webpack://app/../src/transaction_builder/builder.ts","webpack://app/../src/providers/aptos_client.ts","webpack://app/../src/providers/provider.ts","webpack://app/../src/utils/property_map_serde.ts","webpack://app/../src/aptos_types/token_types.ts"],"sourcesContent":["import nacl from \"tweetnacl\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { hexToBytes } from \"@noble/hashes/utils\";\n\ntype Hex = string;\ntype Path = string;\n\ntype Keys = {\n  key: Uint8Array;\n  chainCode: Uint8Array;\n};\n\nconst pathRegex = /^m(\\/[0-9]+')+$/;\n\nconst replaceDerive = (val: string): string => val.replace(\"'\", \"\");\n\nconst HMAC_KEY = \"ed25519 seed\";\nconst HARDENED_OFFSET = 0x80000000;\n\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\n  const h = hmac.create(sha512, HMAC_KEY);\n  const I = h.update(hexToBytes(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nexport const CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nexport const getPublicKey = (privateKey: Uint8Array, withZeroByte = true): Uint8Array => {\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  const signPk = keyPair.secretKey.subarray(32);\n  const zero = new Uint8Array([0]);\n  return withZeroByte ? new Uint8Array([...zero, ...signPk]) : signPk;\n};\n\nexport const isValidPath = (path: string): boolean => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n  return !path\n    .split(\"/\")\n    .slice(1)\n    .map(replaceDerive)\n    .some(Number.isNaN as any);\n};\n\nexport const derivePath = (path: Path, seed: Hex, offset = HARDENED_OFFSET): Keys => {\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n\n  const { key, chainCode } = getMasterKeyFromSeed(seed);\n  const segments = path\n    .split(\"/\")\n    .slice(1)\n    .map(replaceDerive)\n    .map((el) => parseInt(el, 10));\n\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), { key, chainCode });\n};\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\nexport type AnyObject = { [key: string]: any };\n\nexport async function sleep(timeMs: number): Promise<null> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeMs);\n  });\n}\n\nexport const DEFAULT_VERSION_PATH_BASE = \"/v1\";\n\nexport function fixNodeUrl(nodeUrl: string): string {\n  let out = `${nodeUrl}`;\n  if (out.endsWith(\"/\")) {\n    out = out.substring(0, out.length - 1);\n  }\n  if (!out.endsWith(DEFAULT_VERSION_PATH_BASE)) {\n    out = `${out}${DEFAULT_VERSION_PATH_BASE}`;\n  }\n  return out;\n}\n\nexport const DEFAULT_MAX_GAS_AMOUNT = 200000;\n// Transaction expire timestamp\nexport const DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\n// How long does SDK wait for txhn to finish\nexport const DEFAULT_TXN_TIMEOUT_SEC = 20;\nexport const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n","/**\n * Credits to https://github.com/darrylhodgins/typescript-memoize\n */\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n\ninterface MemoizeArgs {\n  // ttl in milliseconds for cached items. After `ttlMs`, cached items are evicted automatically. If no `ttlMs`\n  // is provided, cached items won't get auto-evicted.\n  ttlMs?: number;\n  // produces the cache key based on `args`.\n  hashFunction?: boolean | ((...args: any[]) => any);\n  // cached items can be taged with `tags`. `tags` can be used to evict cached items\n  tags?: string[];\n}\n\nexport function Memoize(args?: MemoizeArgs | MemoizeArgs[\"hashFunction\"]) {\n  let hashFunction: MemoizeArgs[\"hashFunction\"];\n  let ttlMs: MemoizeArgs[\"ttlMs\"];\n  let tags: MemoizeArgs[\"tags\"];\n\n  if (typeof args === \"object\") {\n    hashFunction = args.hashFunction;\n    ttlMs = args.ttlMs;\n    tags = args.tags;\n  } else {\n    hashFunction = args;\n  }\n\n  return (target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) => {\n    if (descriptor.value != null) {\n      descriptor.value = getNewFunction(descriptor.value, hashFunction, ttlMs, tags);\n    } else if (descriptor.get != null) {\n      descriptor.get = getNewFunction(descriptor.get, hashFunction, ttlMs, tags);\n    } else {\n      throw new Error(\"Only put a Memoize() decorator on a method or get accessor.\");\n    }\n  };\n}\n\nexport function MemoizeExpiring(ttlMs: number, hashFunction?: MemoizeArgs[\"hashFunction\"]) {\n  return Memoize({\n    ttlMs,\n    hashFunction,\n  });\n}\n\nconst clearCacheTagsMap: Map<string, Map<any, any>[]> = new Map();\n\nexport function clear(tags: string[]): number {\n  const cleared: Set<Map<any, any>> = new Set();\n  for (const tag of tags) {\n    const maps = clearCacheTagsMap.get(tag);\n    if (maps) {\n      for (const mp of maps) {\n        if (!cleared.has(mp)) {\n          mp.clear();\n          cleared.add(mp);\n        }\n      }\n    }\n  }\n  return cleared.size;\n}\n\nfunction getNewFunction(\n  originalMethod: () => void,\n  hashFunction?: MemoizeArgs[\"hashFunction\"],\n  ttlMs: number = 0,\n  tags?: MemoizeArgs[\"tags\"],\n) {\n  const propMapName = Symbol(\"__memoized_map__\");\n\n  // The function returned here gets called instead of originalMethod.\n  // eslint-disable-next-line func-names\n  return function (...args: any[]) {\n    let returnedValue: any;\n\n    // @ts-ignore\n    const that: any = this;\n\n    // Get or create map\n    // eslint-disable-next-line no-prototype-builtins\n    if (!that.hasOwnProperty(propMapName)) {\n      Object.defineProperty(that, propMapName, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: new Map<any, any>(),\n      });\n    }\n    const myMap: Map<any, any> = that[propMapName];\n\n    if (Array.isArray(tags)) {\n      for (const tag of tags) {\n        if (clearCacheTagsMap.has(tag)) {\n          clearCacheTagsMap.get(tag)!.push(myMap);\n        } else {\n          clearCacheTagsMap.set(tag, [myMap]);\n        }\n      }\n    }\n\n    if (hashFunction || args.length > 0 || ttlMs > 0) {\n      let hashKey: any;\n\n      // If true is passed as first parameter, will automatically use every argument, passed to string\n      if (hashFunction === true) {\n        hashKey = args.map((a) => a.toString()).join(\"!\");\n      } else if (hashFunction) {\n        hashKey = hashFunction.apply(that, args);\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        hashKey = args[0];\n      }\n\n      const timestampKey = `${hashKey}__timestamp`;\n      let isExpired: boolean = false;\n      if (ttlMs > 0) {\n        if (!myMap.has(timestampKey)) {\n          // \"Expired\" since it was never called before\n          isExpired = true;\n        } else {\n          const timestamp = myMap.get(timestampKey);\n          isExpired = Date.now() - timestamp > ttlMs;\n        }\n      }\n\n      if (myMap.has(hashKey) && !isExpired) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args as any);\n        myMap.set(hashKey, returnedValue);\n        if (ttlMs > 0) {\n          myMap.set(timestampKey, Date.now());\n        }\n      }\n    } else {\n      const hashKey = that;\n      if (myMap.has(hashKey)) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args as any);\n        myMap.set(hashKey, returnedValue);\n      }\n    }\n\n    return returnedValue;\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { HexEncodedBytes } from \"../generated\";\n\n// eslint-disable-next-line no-use-before-define\nexport type MaybeHexString = HexString | string | HexEncodedBytes;\n\n/**\n * A util class for working with hex strings.\n * Hex strings are strings that are prefixed with `0x`\n */\nexport class HexString {\n  /// We want to make sure this hexString has the `0x` hex prefix\n  private readonly hexString: string;\n\n  /**\n   * Creates new hex string from Buffer\n   * @param buffer A buffer to convert\n   * @returns New HexString\n   */\n  static fromBuffer(buffer: Uint8Array): HexString {\n    return HexString.fromUint8Array(buffer);\n  }\n\n  /**\n   * Creates new hex string from Uint8Array\n   * @param arr Uint8Array to convert\n   * @returns New HexString\n   */\n  static fromUint8Array(arr: Uint8Array): HexString {\n    return new HexString(bytesToHex(arr));\n  }\n\n  /**\n   * Ensures `hexString` is instance of `HexString` class\n   * @param hexString String to check\n   * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance\n   * @example\n   * ```\n   *  const regularString = \"string\";\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  HexString.ensure(regularString); // \"0xstring\"\n   *  HexString.ensure(hexString); // \"0xstring\"\n   * ```\n   */\n  static ensure(hexString: MaybeHexString): HexString {\n    if (typeof hexString === \"string\") {\n      return new HexString(hexString);\n    }\n    return hexString;\n  }\n\n  /**\n   * Creates new HexString instance from regular string. If specified string already starts with \"0x\" prefix,\n   * it will not add another one\n   * @param hexString String to convert\n   * @example\n   * ```\n   *  const string = \"string\";\n   *  new HexString(string); // \"0xstring\"\n   * ```\n   */\n  constructor(hexString: string | HexEncodedBytes) {\n    if (hexString.startsWith(\"0x\")) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = `0x${hexString}`;\n    }\n  }\n\n  /**\n   * Getter for inner hexString\n   * @returns Inner hex string\n   */\n  hex(): string {\n    return this.hexString;\n  }\n\n  /**\n   * Getter for inner hexString without prefix\n   * @returns Inner hex string without prefix\n   * @example\n   * ```\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  hexString.noPrefix(); // \"string\"\n   * ```\n   */\n  noPrefix(): string {\n    return this.hexString.slice(2);\n  }\n\n  /**\n   * Overrides default `toString` method\n   * @returns Inner hex string\n   */\n  toString(): string {\n    return this.hex();\n  }\n\n  /**\n   * Trimmes extra zeroes in the begining of a string\n   * @returns Inner hexString without leading zeroes\n   * @example\n   * ```\n   *  new HexString(\"0x000000string\").toShortString(); // result = \"0xstring\"\n   * ```\n   */\n  toShortString(): string {\n    const trimmed = this.hexString.replace(/^0x0*/, \"\");\n    return `0x${trimmed}`;\n  }\n\n  /**\n   * Converts hex string to a Uint8Array\n   * @returns Uint8Array from inner hexString without prefix\n   */\n  toUint8Array(): Uint8Array {\n    return Uint8Array.from(hexToBytes(this.noPrefix()));\n  }\n}\n","import { AnyNumber } from \"../bcs\";\nimport { HexString, MaybeHexString } from \"./hex_string\";\n\n/// This function is a helper for paginating using a function wrapping an API\nexport async function paginateWithCursor<T>(\n  apiFunction: (\n    address: string,\n    ledgerVersion?: string | undefined,\n    start?: string | undefined,\n    limit?: number | undefined,\n  ) => Promise<T[]>,\n  accountAddress: MaybeHexString,\n  limitPerRequest: number,\n  query?: { ledgerVersion?: AnyNumber },\n): Promise<T[]> {\n  const out = [];\n  let cursor: string | undefined;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await apiFunction(\n      HexString.ensure(accountAddress).hex(),\n      query?.ledgerVersion?.toString(),\n      cursor,\n      limitPerRequest,\n    );\n    // Response is the main response, i.e. the T[]. Attached to that are the headers as `__headers`.\n    // eslint-disable-next-line no-underscore-dangle\n    cursor = (response as any).__headers[\"x-aptos-cursor\"];\n    // Now that we have the cursor (if any), we remove the headers before\n    // adding these to the output of this function.\n    // eslint-disable-next-line no-underscore-dangle\n    delete (response as any).__headers;\n    out.push(...response);\n    if (cursor === null || cursor === undefined) {\n      break;\n    }\n  }\n  return out;\n}\n","export const NetworkToIndexerAPI: Record<string, string> = {\n  mainnet: \"https://indexer.mainnet.aptoslabs.com/v1/graphql\",\n  testnet: \"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\",\n  devnet: \"https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\",\n};\n\nexport const NetworkToNodeAPI: Record<string, string> = {\n  mainnet: \"https://fullnode.mainnet.aptoslabs.com/v1\",\n  testnet: \"https://fullnode.testnet.aptoslabs.com/v1\",\n  devnet: \"https://fullnode.devnet.aptoslabs.com/v1\",\n};\n\nexport enum Network {\n  MAINNET = \"mainnet\",\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n}\n\nexport interface CustomEndpoints {\n  fullnodeUrl: string;\n  indexerUrl: string;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from \"./abi\";\nexport * from \"./account_address\";\nexport * from \"./authenticator\";\nexport * from \"./transaction\";\nexport * from \"./type_tag\";\nexport * from \"./identifier\";\nexport * from \"./ed25519\";\nexport * from \"./multi_ed25519\";\nexport * from \"./authentication_key\";\nexport * from \"./rotation_proof_challenge\";\n\nexport type SigningMessage = Uint8Array;\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from \"./types\";\nexport * from \"./serializer\";\nexport * from \"./deserializer\";\nexport * from \"./helper\";\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Uint128, Uint16, Uint32, Uint64, Uint8, Uint256 } from \"./types\";\n\n// Upper bound values for uint8, uint16, uint64 and uint128\nexport const MAX_U8_NUMBER: Uint8 = 2 ** 8 - 1;\nexport const MAX_U16_NUMBER: Uint16 = 2 ** 16 - 1;\nexport const MAX_U32_NUMBER: Uint32 = 2 ** 32 - 1;\nexport const MAX_U64_BIG_INT: Uint64 = BigInt(2 ** 64) - BigInt(1);\nexport const MAX_U128_BIG_INT: Uint128 = BigInt(2 ** 128) - BigInt(1);\nexport const MAX_U256_BIG_INT: Uint256 = BigInt(2 ** 256) - BigInt(1);\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"./consts\";\nimport { AnyNumber, Bytes, Uint16, Uint32, Uint8 } from \"./types\";\n\nexport class Serializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor() {\n    this.buffer = new ArrayBuffer(64);\n    this.offset = 0;\n  }\n\n  private ensureBufferWillHandleSize(bytes: number) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n\n  protected serialize(values: Bytes) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n\n  private serializeWithFunction(\n    fn: (byteOffset: number, value: number, littleEndian?: boolean) => void,\n    bytesLength: number,\n    value: number,\n  ) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n\n  /**\n   * Serializes a string. UTF8 string is supported. Serializes the string's bytes length \"l\" first,\n   * and then serializes \"l\" bytes of the string content.\n   *\n   * BCS layout for \"string\": string_length | string_content. string_length is the bytes length of\n   * the string that is uleb128 encoded. string_length is a u32 integer.\n   *\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"çå∞≠¢õß∂ƒ∫\");\n   * assert(serializer.getBytes() === new Uint8Array([24, 0xc3, 0xa7, 0xc3, 0xa5, 0xe2, 0x88, 0x9e,\n   * 0xe2, 0x89, 0xa0, 0xc2, 0xa2, 0xc3, 0xb5, 0xc3, 0x9f, 0xe2, 0x88, 0x82, 0xc6, 0x92, 0xe2, 0x88, 0xab]));\n   * ```\n   */\n  serializeStr(value: string): void {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n\n  /**\n   * Serializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes. bytes_length is the length of the bytes array that is\n   * uleb128 encoded. bytes_length is a u32 integer.\n   */\n  serializeBytes(value: Bytes): void {\n    this.serializeU32AsUleb128(value.length);\n    this.serialize(value);\n  }\n\n  /**\n   * Serializes an array of bytes with known length. Therefore length doesn't need to be\n   * serialized to help deserialization.  When deserializing, the number of\n   * bytes to deserialize needs to be passed in.\n   */\n  serializeFixedBytes(value: Bytes): void {\n    this.serialize(value);\n  }\n\n  /**\n   * Serializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for True and \"0x00\" for False.\n   */\n  serializeBool(value: boolean): void {\n    if (typeof value !== \"boolean\") {\n      throw new Error(\"Value needs to be a boolean\");\n    }\n    const byteValue = value ? 1 : 0;\n    this.serialize(new Uint8Array([byteValue]));\n  }\n\n  /**\n   * Serializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  @checkNumberRange(0, MAX_U8_NUMBER)\n  serializeU8(value: Uint8): void {\n    this.serialize(new Uint8Array([value]));\n  }\n\n  /**\n   * Serializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU16(4660);\n   * assert(serializer.getBytes() === new Uint8Array([0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U16_NUMBER)\n  serializeU16(value: Uint16): void {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n\n  /**\n   * Serializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU32(305419896);\n   * assert(serializer.getBytes() === new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32(value: Uint32): void {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n\n  /**\n   * Serializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU64(1311768467750121216);\n   * assert(serializer.getBytes() === new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(BigInt(0), MAX_U64_BIG_INT)\n  serializeU64(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value.toString()) >> BigInt(32);\n\n    // write little endian number\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n\n  /**\n   * Serializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U128_BIG_INT)\n  serializeU128(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & MAX_U64_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(64);\n\n    // write little endian number\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n\n  /**\n   * Serializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U256_BIG_INT)\n  serializeU256(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & MAX_U128_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(128);\n\n    // write little endian number\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n\n  /**\n   * Serializes a uint32 number with uleb128.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32AsUleb128(val: Uint32): void {\n    let value = val;\n    const valueArray = [];\n    while (value >>> 7 !== 0) {\n      valueArray.push((value & 0x7f) | 0x80);\n      value >>>= 7;\n    }\n    valueArray.push(value);\n    this.serialize(new Uint8Array(valueArray));\n  }\n\n  /**\n   * Returns the buffered bytes\n   */\n  getBytes(): Bytes {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n}\n\n/**\n * Creates a decorator to make sure the arg value of the decorated function is within a range.\n * @param minValue The arg value of decorated function must >= minValue\n * @param maxValue The arg value of decorated function must <= maxValue\n * @param message Error message\n */\nfunction checkNumberRange<T extends AnyNumber>(minValue: T, maxValue: T, message?: string) {\n  return (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const childFunction = descriptor.value;\n    // eslint-disable-next-line no-param-reassign\n    descriptor.value = function deco(value: AnyNumber) {\n      const valueBigInt = BigInt(value.toString());\n      if (valueBigInt > BigInt(maxValue.toString()) || valueBigInt < BigInt(minValue.toString())) {\n        throw new Error(message || \"Value is out of range\");\n      }\n      childFunction.apply(this, [value]);\n    };\n    return descriptor;\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { MAX_U32_NUMBER } from \"./consts\";\nimport { Bytes, Uint128, Uint16, Uint256, Uint32, Uint64, Uint8 } from \"./types\";\n\nexport class Deserializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor(data: Bytes) {\n    // copies data to prevent outside mutation of buffer.\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n\n  private read(length: number): ArrayBuffer {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n\n  /**\n   * Deserializes a string. UTF8 string is supported. Reads the string's bytes length \"l\" first,\n   * and then reads \"l\" bytes of content. Decodes the byte array into a string.\n   *\n   * BCS layout for \"string\": string_length | string_content. string_length is the bytes length of\n   * the string that is uleb128 encoded. string_length is a u32 integer.\n   *\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([24, 0xc3, 0xa7, 0xc3, 0xa5, 0xe2, 0x88, 0x9e,\n   * 0xe2, 0x89, 0xa0, 0xc2, 0xa2, 0xc3, 0xb5, 0xc3, 0x9f, 0xe2, 0x88, 0x82, 0xc6, 0x92, 0xe2, 0x88, 0xab]));\n   * assert(deserializer.deserializeStr() === \"çå∞≠¢õß∂ƒ∫\");\n   * ```\n   */\n  deserializeStr(): string {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n\n  /**\n   * Deserializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes. bytes_length is the length of the bytes array that is\n   * uleb128 encoded. bytes_length is a u32 integer.\n   */\n  deserializeBytes(): Bytes {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes an array of bytes. The number of bytes to read is already known.\n   *\n   */\n  deserializeFixedBytes(len: number): Bytes {\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for True and \"0x00\" for False.\n   */\n  deserializeBool(): boolean {\n    const bool = new Uint8Array(this.read(1))[0];\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n    return bool === 1;\n  }\n\n  /**\n   * Deserializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  deserializeU8(): Uint8 {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n\n  /**\n   * Deserializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x34, 0x12]));\n   * assert(deserializer.deserializeU16() === 4660);\n   * ```\n   */\n  deserializeU16(): Uint16 {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n\n  /**\n   * Deserializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU32() === 305419896);\n   * ```\n   */\n  deserializeU32(): Uint32 {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n\n  /**\n   * Deserializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU64() === 1311768467750121216);\n   * ```\n   */\n  deserializeU64(): Uint64 {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n\n    // combine the two 32-bit values and return (little endian)\n    return BigInt((BigInt(high) << BigInt(32)) | BigInt(low));\n  }\n\n  /**\n   * Deserializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  deserializeU128(): Uint128 {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n\n    // combine the two 64-bit values and return (little endian)\n    return BigInt((high << BigInt(64)) | low);\n  }\n\n  /**\n   * Deserializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Thirty-two bytes. Binary format in little-endian representation.\n   */\n  deserializeU256(): Uint256 {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n\n    // combine the two 128-bit values and return (little endian)\n    return BigInt((high << BigInt(128)) | low);\n  }\n\n  /**\n   * Deserializes a uleb128 encoded uint32 number.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  deserializeUleb128AsU32(): Uint32 {\n    let value: bigint = BigInt(0);\n    let shift = 0;\n\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 0x7f) << BigInt(shift);\n\n      if ((byte & 0x80) === 0) {\n        break;\n      }\n      shift += 7;\n    }\n\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n\n    return Number(value);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer } from \"./deserializer\";\nimport { Serializer } from \"./serializer\";\nimport { AnyNumber, Bytes, Seq, Uint16, Uint32, Uint8 } from \"./types\";\n\ninterface Serializable {\n  serialize(serializer: Serializer): void;\n}\n\n/**\n * Serializes a vector values that are \"Serializable\".\n */\nexport function serializeVector<T extends Serializable>(value: Seq<T>, serializer: Serializer): void {\n  serializer.serializeU32AsUleb128(value.length);\n  value.forEach((item: T) => {\n    item.serialize(serializer);\n  });\n}\n\n/**\n * Serializes a vector with specified item serialization function.\n * Very dynamic function and bypasses static typechecking.\n */\nexport function serializeVectorWithFunc(value: any[], func: string): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(value.length);\n  const f = (serializer as any)[func];\n  value.forEach((item) => {\n    f.call(serializer, item);\n  });\n  return serializer.getBytes();\n}\n\n/**\n * Deserializes a vector of values.\n */\nexport function deserializeVector(deserializer: Deserializer, cls: any): any[] {\n  const length = deserializer.deserializeUleb128AsU32();\n  const list: Seq<typeof cls> = [];\n  for (let i = 0; i < length; i += 1) {\n    list.push(cls.deserialize(deserializer));\n  }\n  return list;\n}\n\nexport function bcsToBytes<T extends Serializable>(value: T): Bytes {\n  const serializer = new Serializer();\n  value.serialize(serializer);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeUint64(value: AnyNumber): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU64(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU8(value: Uint8): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU8(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU16(value: Uint16): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU16(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU32(value: Uint32): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU32(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU128(value: AnyNumber): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU128(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeBool(value: boolean): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeBool(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeStr(value: string): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeStr(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeBytes(value: Bytes): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeBytes(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeFixedBytes(value: Bytes): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeFixedBytes(value);\n  return serializer.getBytes();\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexString, MaybeHexString } from \"../utils\";\nimport { Serializer, Deserializer, Bytes } from \"../bcs\";\n\nexport class AccountAddress {\n  static readonly LENGTH: number = 32;\n\n  readonly address: Bytes;\n\n  static CORE_CODE_ADDRESS: AccountAddress = AccountAddress.fromHex(\"0x1\");\n\n  constructor(address: Bytes) {\n    if (address.length !== AccountAddress.LENGTH) {\n      throw new Error(\"Expected address of length 32\");\n    }\n    this.address = address;\n  }\n\n  /**\n   * Creates AccountAddress from a hex string.\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  static fromHex(addr: MaybeHexString): AccountAddress {\n    let address = HexString.ensure(addr);\n\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n\n    if (addressBytes.length > AccountAddress.LENGTH) {\n      // eslint-disable-next-line quotes\n      throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\n    } else if (addressBytes.length === AccountAddress.LENGTH) {\n      return new AccountAddress(addressBytes);\n    }\n\n    const res: Bytes = new Uint8Array(AccountAddress.LENGTH);\n    res.set(addressBytes, AccountAddress.LENGTH - addressBytes.length);\n\n    return new AccountAddress(res);\n  }\n\n  /**\n   * Checks if the string is a valid AccountAddress\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  static isValid(addr: MaybeHexString): boolean {\n    // At least one zero is required\n    if (addr === \"\") {\n      return false;\n    }\n\n    let address = HexString.ensure(addr);\n\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n\n    return addressBytes.length <= AccountAddress.LENGTH;\n  }\n\n  /**\n   * Return a hex string from account Address.\n   */\n  toHexString(): MaybeHexString {\n    return HexString.fromUint8Array(this.address).hex();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.address);\n  }\n\n  static deserialize(deserializer: Deserializer): AccountAddress {\n    return new AccountAddress(deserializer.deserializeFixedBytes(AccountAddress.LENGTH));\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bytes, Deserializer, Serializer } from \"../bcs\";\n\nexport class Ed25519PublicKey {\n  static readonly LENGTH: number = 32;\n\n  readonly value: Bytes;\n\n  constructor(value: Bytes) {\n    if (value.length !== Ed25519PublicKey.LENGTH) {\n      throw new Error(`Ed25519PublicKey length should be ${Ed25519PublicKey.LENGTH}`);\n    }\n    this.value = value;\n  }\n\n  toBytes(): Bytes {\n    return this.value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PublicKey {\n    const value = deserializer.deserializeBytes();\n    return new Ed25519PublicKey(value);\n  }\n}\n\nexport class Ed25519Signature {\n  static readonly LENGTH = 64;\n\n  constructor(public readonly value: Bytes) {\n    if (value.length !== Ed25519Signature.LENGTH) {\n      throw new Error(`Ed25519Signature length should be ${Ed25519Signature.LENGTH}`);\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519Signature {\n    const value = deserializer.deserializeBytes();\n    return new Ed25519Signature(value);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { Bytes, Deserializer, Seq, Serializer, Uint8 } from \"../bcs\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\n\n/**\n * MultiEd25519 currently supports at most 32 signatures.\n */\nconst MAX_SIGNATURES_SUPPORTED = 32;\n\nexport class MultiEd25519PublicKey {\n  /**\n   * Public key for a K-of-N multisig transaction. A K-of-N multisig transaction means that for such a\n   * transaction to be executed, at least K out of the N authorized signers have signed the transaction\n   * and passed the check conducted by the chain.\n   *\n   * @see {@link\n   * https://aptos.dev/guides/creating-a-signed-transaction#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param public_keys A list of public keys\n   * @param threshold At least \"threshold\" signatures must be valid\n   */\n  constructor(public readonly public_keys: Seq<Ed25519PublicKey>, public readonly threshold: Uint8) {\n    if (threshold > MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`\"threshold\" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`);\n    }\n  }\n\n  /**\n   * Converts a MultiEd25519PublicKey into bytes with: bytes = p1_bytes | ... | pn_bytes | threshold\n   */\n  toBytes(): Bytes {\n    const bytes = new Uint8Array(this.public_keys.length * Ed25519PublicKey.LENGTH + 1);\n    this.public_keys.forEach((k: Ed25519PublicKey, i: number) => {\n      bytes.set(k.value, i * Ed25519PublicKey.LENGTH);\n    });\n\n    bytes[this.public_keys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n\n    return bytes;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n\n    const keys: Seq<Ed25519PublicKey> = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey(keys, threshold);\n  }\n}\n\nexport class MultiEd25519Signature {\n  static BITMAP_LEN: Uint8 = 4;\n\n  /**\n   * Signature for a K-of-N multisig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/guides/creating-a-signed-transaction#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param signatures A list of ed25519 signatures\n   * @param bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right\n   */\n  constructor(public readonly signatures: Seq<Ed25519Signature>, public readonly bitmap: Uint8Array) {\n    if (bitmap.length !== MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiEd25519Signature.BITMAP_LEN}`);\n    }\n  }\n\n  /**\n   * Converts a MultiEd25519Signature into bytes with `bytes = s1_bytes | ... | sn_bytes | bitmap`\n   */\n  toBytes(): Bytes {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k: Ed25519Signature, i: number) => {\n      bytes.set(k.value, i * Ed25519Signature.LENGTH);\n    });\n\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n\n    return bytes;\n  }\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   */\n  static createBitmap(bits: Seq<Uint8>): Uint8Array {\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number) => {\n      if (bit >= MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Invalid bit value ${bit}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicated bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n\n    const sigs: Seq<Ed25519Signature> = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      sigs.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new MultiEd25519Signature(sigs, bitmap);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { AccountAddress } from \"./account_address\";\nimport { Serializer, Deserializer, Seq, deserializeVector, serializeVector } from \"../bcs\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"./multi_ed25519\";\n\nexport abstract class TransactionAuthenticator {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case 2:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n}\n\nexport class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {\n  /**\n   * An authenticator for single signature.\n   *\n   * @param public_key Client's public key.\n   * @param signature Signature of a raw transaction.\n   * @see {@link https://aptos.dev/guides/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   * for details about generating a signature.\n   */\n  constructor(public readonly public_key: Ed25519PublicKey, public readonly signature: Ed25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n}\n\nexport class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {\n  /**\n   * An authenticator for multiple signatures.\n   *\n   * @param public_key\n   * @param signature\n   *\n   */\n  constructor(public readonly public_key: MultiEd25519PublicKey, public readonly signature: MultiEd25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\nexport class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {\n  constructor(\n    public readonly sender: AccountAuthenticator,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n    public readonly secondary_signers: Seq<AccountAuthenticator>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    this.sender.serialize(serializer);\n    serializeVector<AccountAddress>(this.secondary_signer_addresses, serializer);\n    serializeVector<AccountAuthenticator>(this.secondary_signers, serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n    const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n}\n\nexport abstract class AccountAuthenticator {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): AccountAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n}\n\nexport class AccountAuthenticatorEd25519 extends AccountAuthenticator {\n  constructor(public readonly public_key: Ed25519PublicKey, public readonly signature: Ed25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n}\n\nexport class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {\n  constructor(public readonly public_key: MultiEd25519PublicKey, public readonly signature: MultiEd25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from \"../bcs\";\n\nexport class Identifier {\n  constructor(public value: string) {}\n\n  public serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Identifier {\n    const value = deserializer.deserializeStr();\n    return new Identifier(value);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { AccountAddress } from \"./account_address\";\nimport { Deserializer, Seq, Serializer, deserializeVector, serializeVector } from \"../bcs\";\nimport { Identifier } from \"./identifier\";\n\nexport abstract class TypeTag {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TypeTag {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TypeTagBool.load(deserializer);\n      case 1:\n        return TypeTagU8.load(deserializer);\n      case 2:\n        return TypeTagU64.load(deserializer);\n      case 3:\n        return TypeTagU128.load(deserializer);\n      case 4:\n        return TypeTagAddress.load(deserializer);\n      case 5:\n        return TypeTagSigner.load(deserializer);\n      case 6:\n        return TypeTagVector.load(deserializer);\n      case 7:\n        return TypeTagStruct.load(deserializer);\n      case 8:\n        return TypeTagU16.load(deserializer);\n      case 9:\n        return TypeTagU32.load(deserializer);\n      case 10:\n        return TypeTagU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n}\n\nexport class TypeTagBool extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n  }\n\n  static load(deserializer: Deserializer): TypeTagBool {\n    return new TypeTagBool();\n  }\n}\n\nexport class TypeTagU8 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU8 {\n    return new TypeTagU8();\n  }\n}\n\nexport class TypeTagU16 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU16 {\n    return new TypeTagU16();\n  }\n}\n\nexport class TypeTagU32 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU32 {\n    return new TypeTagU32();\n  }\n}\n\nexport class TypeTagU64 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU64 {\n    return new TypeTagU64();\n  }\n}\n\nexport class TypeTagU128 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU128 {\n    return new TypeTagU128();\n  }\n}\n\nexport class TypeTagU256 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU256 {\n    return new TypeTagU256();\n  }\n}\n\nexport class TypeTagAddress extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(4);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagAddress {\n    return new TypeTagAddress();\n  }\n}\n\nexport class TypeTagSigner extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(5);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagSigner {\n    return new TypeTagSigner();\n  }\n}\n\nexport class TypeTagVector extends TypeTag {\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(6);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagVector {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n}\n\nexport class TypeTagStruct extends TypeTag {\n  constructor(public readonly value: StructTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(7);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagStruct {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  isStringTypeTag(): boolean {\n    if (\n      this.value.module_name.value === \"string\" &&\n      this.value.name.value === \"String\" &&\n      this.value.address.toHexString() === AccountAddress.fromHex(\"0x1\").toHexString()\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport class StructTag {\n  constructor(\n    public readonly address: AccountAddress,\n    public readonly module_name: Identifier,\n    public readonly name: Identifier,\n    public readonly type_args: Seq<TypeTag>,\n  ) {}\n\n  /**\n   * Converts a string literal to a StructTag\n   * @param structTag String literal in format \"AcountAddress::module_name::ResourceName\",\n   *   e.g. \"0x1::aptos_coin::AptosCoin\"\n   * @returns\n   */\n  static fromString(structTag: string): StructTag {\n    // Use the TypeTagParser to parse the string literal into a TypeTagStruct\n    const typeTagStruct = new TypeTagParser(structTag).parseTypeTag() as TypeTagStruct;\n\n    // Convert and return as a StructTag\n    return new StructTag(\n      typeTagStruct.value.address,\n      typeTagStruct.value.module_name,\n      typeTagStruct.value.name,\n      typeTagStruct.value.type_args,\n    );\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.module_name.serialize(serializer);\n    this.name.serialize(serializer);\n    serializeVector<TypeTag>(this.type_args, serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializeVector(deserializer, TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n}\n\nexport const stringStructTag = new StructTag(\n  AccountAddress.fromHex(\"0x1\"),\n  new Identifier(\"string\"),\n  new Identifier(\"String\"),\n  [],\n);\n\nfunction bail(message: string) {\n  throw new TypeTagParserError(message);\n}\n\nfunction isWhiteSpace(c: string): boolean {\n  if (c.match(/\\s/)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isValidAlphabetic(c: string): boolean {\n  if (c.match(/[_A-Za-z0-9]/g)) {\n    return true;\n  }\n  return false;\n}\n\n// Generic format is T<digits> - for example T1, T2, T10\nfunction isGeneric(c: string): boolean {\n  if (c.match(/T\\d+/g)) {\n    return true;\n  }\n  return false;\n}\n\ntype TokenType = string;\ntype TokenValue = string;\ntype Token = [TokenType, TokenValue];\n\n// Returns Token and Token byte size\nfunction nextToken(tagStr: string, pos: number): [Token, number] {\n  const c = tagStr[pos];\n  if (c === \":\") {\n    if (tagStr.slice(pos, pos + 2) === \"::\") {\n      return [[\"COLON\", \"::\"], 2];\n    }\n    bail(\"Unrecognized token.\");\n  } else if (c === \"<\") {\n    return [[\"LT\", \"<\"], 1];\n  } else if (c === \">\") {\n    return [[\"GT\", \">\"], 1];\n  } else if (c === \",\") {\n    return [[\"COMMA\", \",\"], 1];\n  } else if (isWhiteSpace(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isWhiteSpace(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    return [[\"SPACE\", res], res.length];\n  } else if (isValidAlphabetic(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isValidAlphabetic(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    if (isGeneric(res)) {\n      return [[\"GENERIC\", res], res.length];\n    }\n    return [[\"IDENT\", res], res.length];\n  }\n  throw new Error(\"Unrecognized token.\");\n}\n\nfunction tokenize(tagStr: string): Token[] {\n  let pos = 0;\n  const tokens = [];\n  while (pos < tagStr.length) {\n    const [token, size] = nextToken(tagStr, pos);\n    if (token[0] !== \"SPACE\") {\n      tokens.push(token);\n    }\n    pos += size;\n  }\n  return tokens;\n}\n\n/**\n * Parser to parse a type tag string\n */\nexport class TypeTagParser {\n  private readonly tokens: Token[];\n\n  private readonly typeTags: string[] = [];\n\n  constructor(tagStr: string, typeTags?: string[]) {\n    this.tokens = tokenize(tagStr);\n    this.typeTags = typeTags || [];\n  }\n\n  private consume(targetToken: string) {\n    const token = this.tokens.shift();\n    if (!token || token[1] !== targetToken) {\n      bail(\"Invalid type tag.\");\n    }\n  }\n\n  private parseCommaList(endToken: TokenValue, allowTraillingComma: boolean): TypeTag[] {\n    const res: TypeTag[] = [];\n    if (this.tokens.length <= 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    while (this.tokens[0][1] !== endToken) {\n      res.push(this.parseTypeTag());\n\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken) {\n        break;\n      }\n\n      this.consume(\",\");\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken && allowTraillingComma) {\n        break;\n      }\n\n      if (this.tokens.length <= 0) {\n        bail(\"Invalid type tag.\");\n      }\n    }\n    return res;\n  }\n\n  parseTypeTag(): TypeTag {\n    if (this.tokens.length === 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    // Pop left most element out\n    const [tokenTy, tokenVal] = this.tokens.shift()!;\n\n    if (tokenVal === \"u8\") {\n      return new TypeTagU8();\n    }\n    if (tokenVal === \"u16\") {\n      return new TypeTagU16();\n    }\n    if (tokenVal === \"u32\") {\n      return new TypeTagU32();\n    }\n    if (tokenVal === \"u64\") {\n      return new TypeTagU64();\n    }\n    if (tokenVal === \"u128\") {\n      return new TypeTagU128();\n    }\n    if (tokenVal === \"u256\") {\n      return new TypeTagU256();\n    }\n    if (tokenVal === \"bool\") {\n      return new TypeTagBool();\n    }\n    if (tokenVal === \"address\") {\n      return new TypeTagAddress();\n    }\n    if (tokenVal === \"vector\") {\n      this.consume(\"<\");\n      const res = this.parseTypeTag();\n      this.consume(\">\");\n      return new TypeTagVector(res);\n    }\n    if (tokenVal === \"string\") {\n      return new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"string\"), new Identifier(\"String\"), []);\n    }\n    if (tokenTy === \"IDENT\" && (tokenVal.startsWith(\"0x\") || tokenVal.startsWith(\"0X\"))) {\n      const address = tokenVal;\n      this.consume(\"::\");\n      const [moduleTokenTy, module] = this.tokens.shift()!;\n      if (moduleTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n      this.consume(\"::\");\n      const [nameTokenTy, name] = this.tokens.shift()!;\n      if (nameTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n\n      // an Object `0x1::object::Object<T>` doesn't hold a real type, it points to an address\n      // therefore, we parse it as an address and dont need to care/parse the `T` type\n      if (module === \"object\" && name === \"Object\") {\n        // to support a nested type tag, i.e 0x1::some_module::SomeResource<0x1::object::Object<T>>, we want\n        // to remove the `<T>` part from the tokens list so we dont parse it and can keep parse the type tag.\n        this.tokens.splice(0, 3);\n        return new TypeTagAddress();\n      }\n\n      let tyTags: TypeTag[] = [];\n      // Check if the struct has ty args\n      if (this.tokens.length > 0 && this.tokens[0][1] === \"<\") {\n        this.consume(\"<\");\n        tyTags = this.parseCommaList(\">\", true);\n        this.consume(\">\");\n      }\n\n      const structTag = new StructTag(\n        AccountAddress.fromHex(address),\n        new Identifier(module),\n        new Identifier(name),\n        tyTags,\n      );\n      return new TypeTagStruct(structTag);\n    }\n    if (tokenTy === \"GENERIC\") {\n      if (this.typeTags.length === 0) {\n        bail(\"Can't convert generic type since no typeTags were specified.\");\n      }\n      // a generic tokenVal has the format of `T<digit>`, for example `T1`.\n      // The digit (i.e 1) indicates the the index of this type in the typeTags array.\n      // For a tokenVal == T1, should be parsed as the type in typeTags[1]\n      const idx = parseInt(tokenVal.substring(1), 10);\n      return new TypeTagParser(this.typeTags[idx]).parseTypeTag();\n    }\n\n    throw new Error(\"Invalid type tag.\");\n  }\n}\n\nexport class TypeTagParserError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"TypeTagParserError\";\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable max-classes-per-file */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { HexString } from \"../utils\";\nimport {\n  Deserializer,\n  Serializer,\n  Uint64,\n  Bytes,\n  Seq,\n  Uint8,\n  Uint128,\n  deserializeVector,\n  serializeVector,\n  bcsToBytes,\n  Uint16,\n  Uint256,\n} from \"../bcs\";\nimport { TransactionAuthenticator } from \"./authenticator\";\nimport { Identifier } from \"./identifier\";\nimport { TypeTag } from \"./type_tag\";\nimport { AccountAddress } from \"./account_address\";\n\nexport class RawTransaction {\n  /**\n   * RawTransactions contain the metadata and payloads that can be submitted to Aptos chain for execution.\n   * RawTransactions must be signed before Aptos chain can execute them.\n   *\n   * @param sender Account address of the sender.\n   * @param sequence_number Sequence number of this transaction. This must match the sequence number stored in\n   *   the sender's account at the time the transaction executes.\n   * @param payload Instructions for the Aptos Blockchain, including publishing a module,\n   *   execute a entry function or execute a script payload.\n   * @param max_gas_amount Maximum total gas to spend for this transaction. The account must have more\n   *   than this gas or the transaction will be discarded during validation.\n   * @param gas_unit_price Price to be paid per gas unit.\n   * @param expiration_timestamp_secs The blockchain timestamp at which the blockchain would discard this transaction.\n   * @param chain_id The chain ID of the blockchain that this transaction is intended to be run on.\n   */\n  constructor(\n    public readonly sender: AccountAddress,\n    public readonly sequence_number: Uint64,\n    public readonly payload: TransactionPayload,\n    public readonly max_gas_amount: Uint64,\n    public readonly gas_unit_price: Uint64,\n    public readonly expiration_timestamp_secs: Uint64,\n    public readonly chain_id: ChainId,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): RawTransaction {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(\n      sender,\n      sequence_number,\n      payload,\n      max_gas_amount,\n      gas_unit_price,\n      expiration_timestamp_secs,\n      chain_id,\n    );\n  }\n}\n\nexport class Script {\n  /**\n   * Scripts contain the Move bytecodes payload that can be submitted to Aptos chain for execution.\n   * @param code Move bytecode\n   * @param ty_args Type arguments that bytecode requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to bytecode function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(\n    public readonly code: Bytes,\n    public readonly ty_args: Seq<TypeTag>,\n    public readonly args: Seq<TransactionArgument>,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.code);\n    serializeVector<TypeTag>(this.ty_args, serializer);\n    serializeVector<TransactionArgument>(this.args, serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): Script {\n    const code = deserializer.deserializeBytes();\n    const ty_args = deserializeVector(deserializer, TypeTag);\n    const args = deserializeVector(deserializer, TransactionArgument);\n    return new Script(code, ty_args, args);\n  }\n}\n\nexport class EntryFunction {\n  /**\n   * Contains the payload to run a function within a module.\n   * @param module_name Fully qualified module name. ModuleId consists of account address and module name.\n   * @param function_name The function to run.\n   * @param ty_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(\n    public readonly module_name: ModuleId,\n    public readonly function_name: Identifier,\n    public readonly ty_args: Seq<TypeTag>,\n    public readonly args: Seq<Bytes>,\n  ) {}\n\n  /**\n   *\n   * @param module Fully qualified module name in format \"AccountAddress::module_name\" e.g. \"0x1::coin\"\n   * @param func Function name\n   * @param ty_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @returns\n   */\n  static natural(module: string, func: string, ty_args: Seq<TypeTag>, args: Seq<Bytes>): EntryFunction {\n    return new EntryFunction(ModuleId.fromStr(module), new Identifier(func), ty_args, args);\n  }\n\n  /**\n   * `natual` is deprecated, please use `natural`\n   *\n   * @deprecated.\n   */\n  static natual(module: string, func: string, ty_args: Seq<TypeTag>, args: Seq<Bytes>): EntryFunction {\n    return EntryFunction.natural(module, func, ty_args, args);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializeVector<TypeTag>(this.ty_args, serializer);\n\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: Bytes) => {\n      serializer.serializeBytes(item);\n    });\n  }\n\n  static deserialize(deserializer: Deserializer): EntryFunction {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const ty_args = deserializeVector(deserializer, TypeTag);\n\n    const length = deserializer.deserializeUleb128AsU32();\n    const list: Seq<Bytes> = [];\n    for (let i = 0; i < length; i += 1) {\n      list.push(deserializer.deserializeBytes());\n    }\n\n    const args = list;\n    return new EntryFunction(module_name, function_name, ty_args, args);\n  }\n}\n\nexport class MultiSigTransactionPayload {\n  /**\n   * Contains the payload to run a multisig account transaction.\n   * @param transaction_payload The payload of the multisig transaction. This can only be EntryFunction for now but\n   * Script might be supported in the future.\n   */\n  constructor(public readonly transaction_payload: EntryFunction) {}\n\n  serialize(serializer: Serializer): void {\n    // We can support multiple types of inner transaction payload in the future.\n    // For now it's only EntryFunction but if we support more types, we need to serialize with the right enum values\n    // here\n    serializer.serializeU32AsUleb128(0);\n    this.transaction_payload.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSigTransactionPayload {\n    // TODO: Support other types of payload beside EntryFunction.\n    // This is the enum value indicating which type of payload the multisig tx contains.\n    deserializer.deserializeUleb128AsU32();\n    return new MultiSigTransactionPayload(EntryFunction.deserialize(deserializer));\n  }\n}\n\nexport class MultiSig {\n  /**\n   * Contains the payload to run a multisig account transaction.\n   * @param multisig_address The multisig account address the transaction will be executed as.\n   * @param transaction_payload The payload of the multisig transaction. This is optional when executing a multisig\n   *  transaction whose payload is already stored on chain.\n   */\n  constructor(\n    public readonly multisig_address: AccountAddress,\n    public readonly transaction_payload?: MultiSigTransactionPayload,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.multisig_address.serialize(serializer);\n    // Options are encoded with an extra u8 field before the value - 0x0 is none and 0x1 is present.\n    // We use serializeBool below to create this prefix value.\n    if (this.transaction_payload === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.transaction_payload.serialize(serializer);\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSig {\n    const multisig_address = AccountAddress.deserialize(deserializer);\n    const payloadPresent = deserializer.deserializeBool();\n    let transaction_payload;\n    if (payloadPresent) {\n      transaction_payload = MultiSigTransactionPayload.deserialize(deserializer);\n    }\n    return new MultiSig(multisig_address, transaction_payload);\n  }\n}\n\nexport class Module {\n  /**\n   * Contains the bytecode of a Move module that can be published to the Aptos chain.\n   * @param code Move bytecode of a module.\n   */\n  constructor(public readonly code: Bytes) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.code);\n  }\n\n  static deserialize(deserializer: Deserializer): Module {\n    const code = deserializer.deserializeBytes();\n    return new Module(code);\n  }\n}\n\nexport class ModuleId {\n  /**\n   * Full name of a module.\n   * @param address The account address.\n   * @param name The name of the module under the account at \"address\".\n   */\n  constructor(public readonly address: AccountAddress, public readonly name: Identifier) {}\n\n  /**\n   * Converts a string literal to a ModuleId\n   * @param moduleId String literal in format \"AccountAddress::module_name\",\n   *   e.g. \"0x1::coin\"\n   * @returns\n   */\n  static fromStr(moduleId: string): ModuleId {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromHex(new HexString(parts[0])), new Identifier(parts[1]));\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ModuleId {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n}\n\nexport class ChangeSet {\n  serialize(serializer: Serializer): void {\n    throw new Error(\"Not implemented.\");\n  }\n\n  static deserialize(deserializer: Deserializer): ChangeSet {\n    throw new Error(\"Not implemented.\");\n  }\n}\n\nexport class WriteSet {\n  serialize(serializer: Serializer): void {\n    throw new Error(\"Not implmented.\");\n  }\n\n  static deserialize(deserializer: Deserializer): WriteSet {\n    throw new Error(\"Not implmented.\");\n  }\n}\n\nexport class SignedTransaction {\n  /**\n   * A SignedTransaction consists of a raw transaction and an authenticator. The authenticator\n   * contains a client's public key and the signature of the raw transaction.\n   *\n   * @see {@link https://aptos.dev/guides/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   *\n   * @param raw_txn\n   * @param authenticator Contains a client's public key and the signature of the raw transaction.\n   *   Authenticator has 3 flavors: single signature, multi-signature and multi-agent.\n   *   @see authenticator.ts for details.\n   */\n  constructor(public readonly raw_txn: RawTransaction, public readonly authenticator: TransactionAuthenticator) {}\n\n  serialize(serializer: Serializer): void {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): SignedTransaction {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n}\n\nexport abstract class RawTransactionWithData {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): RawTransactionWithData {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return MultiAgentRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n}\n\nexport class MultiAgentRawTransaction extends RawTransactionWithData {\n  constructor(\n    public readonly raw_txn: RawTransaction,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    // enum variant index\n    serializer.serializeU32AsUleb128(0);\n    this.raw_txn.serialize(serializer);\n    serializeVector<TransactionArgument>(this.secondary_signer_addresses, serializer);\n  }\n\n  static load(deserializer: Deserializer): MultiAgentRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n}\n\nexport abstract class TransactionPayload {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionPayload {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionPayloadScript.load(deserializer);\n      // TODO: change to 1 once ModuleBundle has been removed from rust\n      case 2:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      case 3:\n        return TransactionPayloadMultisig.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\nexport class TransactionPayloadScript extends TransactionPayload {\n  constructor(public readonly value: Script) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadScript {\n    const value = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(value);\n  }\n}\n\nexport class TransactionPayloadEntryFunction extends TransactionPayload {\n  constructor(public readonly value: EntryFunction) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadEntryFunction {\n    const value = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(value);\n  }\n}\n\nexport class TransactionPayloadMultisig extends TransactionPayload {\n  constructor(public readonly value: MultiSig) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadMultisig {\n    const value = MultiSig.deserialize(deserializer);\n    return new TransactionPayloadMultisig(value);\n  }\n}\n\nexport class ChainId {\n  constructor(public readonly value: Uint8) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): ChainId {\n    const value = deserializer.deserializeU8();\n    return new ChainId(value);\n  }\n}\n\nexport abstract class TransactionArgument {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionArgument {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionArgumentU8.load(deserializer);\n      case 1:\n        return TransactionArgumentU64.load(deserializer);\n      case 2:\n        return TransactionArgumentU128.load(deserializer);\n      case 3:\n        return TransactionArgumentAddress.load(deserializer);\n      case 4:\n        return TransactionArgumentU8Vector.load(deserializer);\n      case 5:\n        return TransactionArgumentBool.load(deserializer);\n      case 6:\n        return TransactionArgumentU16.load(deserializer);\n      case 7:\n        return TransactionArgumentU32.load(deserializer);\n      case 8:\n        return TransactionArgumentU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionArgument: ${index}`);\n    }\n  }\n}\n\nexport class TransactionArgumentU8 extends TransactionArgument {\n  constructor(public readonly value: Uint8) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeU8(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU8 {\n    const value = deserializer.deserializeU8();\n    return new TransactionArgumentU8(value);\n  }\n}\n\nexport class TransactionArgumentU16 extends TransactionArgument {\n  constructor(public readonly value: Uint16) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(6);\n    serializer.serializeU16(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU16 {\n    const value = deserializer.deserializeU16();\n    return new TransactionArgumentU16(value);\n  }\n}\n\nexport class TransactionArgumentU32 extends TransactionArgument {\n  constructor(public readonly value: Uint16) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(7);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU32 {\n    const value = deserializer.deserializeU32();\n    return new TransactionArgumentU32(value);\n  }\n}\n\nexport class TransactionArgumentU64 extends TransactionArgument {\n  constructor(public readonly value: Uint64) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeU64(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU64 {\n    const value = deserializer.deserializeU64();\n    return new TransactionArgumentU64(value);\n  }\n}\n\nexport class TransactionArgumentU128 extends TransactionArgument {\n  constructor(public readonly value: Uint128) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    serializer.serializeU128(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU128 {\n    const value = deserializer.deserializeU128();\n    return new TransactionArgumentU128(value);\n  }\n}\n\nexport class TransactionArgumentU256 extends TransactionArgument {\n  constructor(public readonly value: Uint256) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(8);\n    serializer.serializeU256(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU256 {\n    const value = deserializer.deserializeU256();\n    return new TransactionArgumentU256(value);\n  }\n}\n\nexport class TransactionArgumentAddress extends TransactionArgument {\n  constructor(public readonly value: AccountAddress) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentAddress {\n    const value = AccountAddress.deserialize(deserializer);\n    return new TransactionArgumentAddress(value);\n  }\n}\n\nexport class TransactionArgumentU8Vector extends TransactionArgument {\n  constructor(public readonly value: Bytes) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(4);\n    serializer.serializeBytes(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU8Vector {\n    const value = deserializer.deserializeBytes();\n    return new TransactionArgumentU8Vector(value);\n  }\n}\n\nexport class TransactionArgumentBool extends TransactionArgument {\n  constructor(public readonly value: boolean) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(5);\n    serializer.serializeBool(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentBool {\n    const value = deserializer.deserializeBool();\n    return new TransactionArgumentBool(value);\n  }\n}\n\nexport abstract class Transaction {\n  abstract serialize(serializer: Serializer): void;\n\n  abstract hash(): Bytes;\n\n  getHashSalt(): Bytes {\n    const hash = sha3Hash.create();\n    hash.update(\"APTOS::Transaction\");\n    return hash.digest();\n  }\n\n  static deserialize(deserializer: Deserializer): Transaction {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return UserTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for Transaction: ${index}`);\n    }\n  }\n}\n\nexport class UserTransaction extends Transaction {\n  constructor(public readonly value: SignedTransaction) {\n    super();\n  }\n\n  hash(): Bytes {\n    const hash = sha3Hash.create();\n    hash.update(this.getHashSalt());\n    hash.update(bcsToBytes(this));\n    return hash.digest();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): UserTransaction {\n    return new UserTransaction(SignedTransaction.deserialize(deserializer));\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer, Bytes, Seq, deserializeVector, serializeVector } from \"../bcs\";\n\nimport { ModuleId } from \"./transaction\";\n\nimport { TypeTag } from \"./type_tag\";\n\nexport class TypeArgumentABI {\n  /**\n   * Constructs a TypeArgumentABI instance.\n   * @param name\n   */\n  constructor(public readonly name: string) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.name);\n  }\n\n  static deserialize(deserializer: Deserializer): TypeArgumentABI {\n    const name = deserializer.deserializeStr();\n    return new TypeArgumentABI(name);\n  }\n}\n\nexport class ArgumentABI {\n  /**\n   * Constructs an ArgumentABI instance.\n   * @param name\n   * @param type_tag\n   */\n  constructor(public readonly name: string, public readonly type_tag: TypeTag) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.name);\n    this.type_tag.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ArgumentABI {\n    const name = deserializer.deserializeStr();\n    const typeTag = TypeTag.deserialize(deserializer);\n    return new ArgumentABI(name, typeTag);\n  }\n}\n\nexport abstract class ScriptABI {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): ScriptABI {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionScriptABI.load(deserializer);\n      case 1:\n        return EntryFunctionABI.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\nexport class TransactionScriptABI extends ScriptABI {\n  /**\n   * Constructs a TransactionScriptABI instance.\n   * @param name Entry function name\n   * @param doc\n   * @param code\n   * @param ty_args\n   * @param args\n   */\n  constructor(\n    public readonly name: string,\n    public readonly doc: string,\n    public readonly code: Bytes,\n    public readonly ty_args: Seq<TypeArgumentABI>,\n    public readonly args: Seq<ArgumentABI>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeStr(this.name);\n    serializer.serializeStr(this.doc);\n    serializer.serializeBytes(this.code);\n    serializeVector<TypeArgumentABI>(this.ty_args, serializer);\n    serializeVector<ArgumentABI>(this.args, serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionScriptABI {\n    const name = deserializer.deserializeStr();\n    const doc = deserializer.deserializeStr();\n    const code = deserializer.deserializeBytes();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new TransactionScriptABI(name, doc, code, tyArgs, args);\n  }\n}\n\nexport class EntryFunctionABI extends ScriptABI {\n  /**\n   * Constructs a EntryFunctionABI instance\n   * @param name\n   * @param module_name Fully qualified module id\n   * @param doc\n   * @param ty_args\n   * @param args\n   */\n  constructor(\n    public readonly name: string,\n    public readonly module_name: ModuleId,\n    public readonly doc: string,\n    public readonly ty_args: Seq<TypeArgumentABI>,\n    public readonly args: Seq<ArgumentABI>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeStr(this.name);\n    this.module_name.serialize(serializer);\n    serializer.serializeStr(this.doc);\n    serializeVector<TypeArgumentABI>(this.ty_args, serializer);\n    serializeVector<ArgumentABI>(this.args, serializer);\n  }\n\n  static load(deserializer: Deserializer): EntryFunctionABI {\n    const name = deserializer.deserializeStr();\n    const moduleName = ModuleId.deserialize(deserializer);\n    const doc = deserializer.deserializeStr();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new EntryFunctionABI(name, moduleName, doc, tyArgs, args);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { HexString } from \"../utils\";\nimport { Bytes } from \"../bcs\";\nimport { MultiEd25519PublicKey } from \"./multi_ed25519\";\nimport { Ed25519PublicKey } from \"./ed25519\";\n\n/**\n * Each account stores an authentication key. Authentication key enables account owners to rotate\n * their private key(s) associated with the account without changing the address that hosts their account.\n * @see {@link * https://aptos.dev/concepts/accounts | Account Basics}\n *\n * Account addresses can be derived from AuthenticationKey\n */\nexport class AuthenticationKey {\n  static readonly LENGTH: number = 32;\n\n  static readonly MULTI_ED25519_SCHEME: number = 1;\n\n  static readonly ED25519_SCHEME: number = 0;\n\n  static readonly DERIVE_RESOURCE_ACCOUNT_SCHEME: number = 255;\n\n  readonly bytes: Bytes;\n\n  constructor(bytes: Bytes) {\n    if (bytes.length !== AuthenticationKey.LENGTH) {\n      throw new Error(\"Expected a byte array of length 32\");\n    }\n    this.bytes = bytes;\n  }\n\n  /**\n   * Converts a K-of-N MultiEd25519PublicKey to AuthenticationKey with:\n   * `auth_key = sha3-256(p_1 | … | p_n | K | 0x01)`. `K` represents the K-of-N required for\n   * authenticating the transaction. `0x01` is the 1-byte scheme for multisig.\n   */\n  static fromMultiEd25519PublicKey(publicKey: MultiEd25519PublicKey): AuthenticationKey {\n    const pubKeyBytes = publicKey.toBytes();\n\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([AuthenticationKey.MULTI_ED25519_SCHEME], pubKeyBytes.length);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return new AuthenticationKey(hash.digest());\n  }\n\n  static fromEd25519PublicKey(publicKey: Ed25519PublicKey): AuthenticationKey {\n    const pubKeyBytes = publicKey.value;\n\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([AuthenticationKey.ED25519_SCHEME], pubKeyBytes.length);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return new AuthenticationKey(hash.digest());\n  }\n\n  /**\n   * Derives an account address from AuthenticationKey. Since current AccountAddress is 32 bytes,\n   * AuthenticationKey bytes are directly translated to AccountAddress.\n   */\n  derivedAddress(): HexString {\n    return HexString.fromUint8Array(this.bytes);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress } from \"./account_address\";\nimport { Serializer } from \"../bcs\";\n\nexport class RotationProofChallenge {\n  constructor(\n    public readonly accountAddress: AccountAddress,\n    public readonly moduleName: string,\n    public readonly structName: string,\n    public readonly sequenceNumber: number | bigint,\n    public readonly originator: AccountAddress,\n    public readonly currentAuthKey: AccountAddress,\n    public readonly newPublicKey: Uint8Array,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.accountAddress.serialize(serializer);\n    serializer.serializeStr(this.moduleName);\n    serializer.serializeStr(this.structName);\n    serializer.serializeU64(this.sequenceNumber);\n    this.originator.serialize(serializer);\n    this.currentAuthKey.serialize(serializer);\n    serializer.serializeBytes(this.newPublicKey);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from \"tweetnacl\";\nimport * as bip39 from \"@scure/bip39\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { derivePath } from \"../utils/hd-key\";\nimport { HexString, MaybeHexString, Memoize } from \"../utils\";\nimport * as Gen from \"../generated/index\";\nimport { AccountAddress, AuthenticationKey, Ed25519PublicKey } from \"../aptos_types\";\nimport { bcsToBytes } from \"../bcs\";\n\nexport interface AptosAccountObject {\n  address?: Gen.HexEncodedBytes;\n  publicKeyHex?: Gen.HexEncodedBytes;\n  privateKeyHex: Gen.HexEncodedBytes;\n}\n\n/**\n * Class for creating and managing Aptos account\n */\nexport class AptosAccount {\n  /**\n   * A private key and public key, associated with the given account\n   */\n  readonly signingKey: nacl.SignKeyPair;\n\n  /**\n   * Address associated with the given account\n   */\n  private readonly accountAddress: HexString;\n\n  static fromAptosAccountObject(obj: AptosAccountObject): AptosAccount {\n    return new AptosAccount(HexString.ensure(obj.privateKeyHex).toUint8Array(), obj.address);\n  }\n\n  /**\n   * Test derive path\n   */\n  static isValidPath(path: string): boolean {\n    return /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$/.test(path);\n  }\n\n  /**\n   * Creates new account with bip44 path and mnemonics,\n   * @param path. (e.g. m/44'/637'/0'/0'/0')\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param mnemonics.\n   * @returns AptosAccount\n   */\n  static fromDerivePath(path: string, mnemonics: string): AptosAccount {\n    if (!AptosAccount.isValidPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n\n    const normalizeMnemonics = mnemonics\n      .trim()\n      .split(/\\s+/)\n      .map((part) => part.toLowerCase())\n      .join(\" \");\n\n    const { key } = derivePath(path, bytesToHex(bip39.mnemonicToSeedSync(normalizeMnemonics)));\n\n    return new AptosAccount(key);\n  }\n\n  /**\n   * Creates new account instance. Constructor allows passing in an address,\n   * to handle account key rotation, where auth_key != public_key\n   * @param privateKeyBytes  Private key from which account key pair will be generated.\n   * If not specified, new key pair is going to be created.\n   * @param address Account address (e.g. 0xe8012714cd17606cee7188a2a365eef3fe760be598750678c8c5954eb548a591).\n   * If not specified, a new one will be generated from public key\n   */\n  constructor(privateKeyBytes?: Uint8Array | undefined, address?: MaybeHexString) {\n    if (privateKeyBytes) {\n      this.signingKey = nacl.sign.keyPair.fromSeed(privateKeyBytes.slice(0, 32));\n    } else {\n      this.signingKey = nacl.sign.keyPair();\n    }\n    this.accountAddress = HexString.ensure(address || this.authKey().hex());\n  }\n\n  /**\n   * This is the key by which Aptos account is referenced.\n   * It is the 32-byte of the SHA-3 256 cryptographic hash\n   * of the public key(s) concatenated with a signature scheme identifier byte\n   * @returns Address associated with the given account\n   */\n  address(): HexString {\n    return this.accountAddress;\n  }\n\n  /**\n   * This key enables account owners to rotate their private key(s)\n   * associated with the account without changing the address that hosts their account.\n   * See here for more info: {@link https://aptos.dev/concepts/accounts#single-signer-authentication}\n   * @returns Authentication key for the associated account\n   */\n  @Memoize()\n  authKey(): HexString {\n    const pubKey = new Ed25519PublicKey(this.signingKey.publicKey);\n    const authKey = AuthenticationKey.fromEd25519PublicKey(pubKey);\n    return authKey.derivedAddress();\n  }\n\n  /**\n   * Takes source address and seeds and returns the resource account address\n   * @param sourceAddress Address used to derive the resource account\n   * @param seed The seed bytes\n   * @returns The resource account address\n   */\n\n  static getResourceAccountAddress(sourceAddress: MaybeHexString, seed: Uint8Array): HexString {\n    const source = bcsToBytes(AccountAddress.fromHex(sourceAddress));\n\n    const bytes = new Uint8Array([...source, ...seed, AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME]);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return HexString.fromUint8Array(hash.digest());\n  }\n\n  /**\n   * This key is generated with Ed25519 scheme.\n   * Public key is used to check a signature of transaction, signed by given account\n   * @returns The public key for the associated account\n   */\n  pubKey(): HexString {\n    return HexString.fromUint8Array(this.signingKey.publicKey);\n  }\n\n  /**\n   * Signs specified `buffer` with account's private key\n   * @param buffer A buffer to sign\n   * @returns A signature HexString\n   */\n  signBuffer(buffer: Uint8Array): HexString {\n    const signature = nacl.sign.detached(buffer, this.signingKey.secretKey);\n    return HexString.fromUint8Array(signature);\n  }\n\n  /**\n   * Signs specified `hexString` with account's private key\n   * @param hexString A regular string or HexString to sign\n   * @returns A signature HexString\n   */\n  signHexString(hexString: MaybeHexString): HexString {\n    const toSign = HexString.ensure(hexString).toUint8Array();\n    return this.signBuffer(toSign);\n  }\n\n  /**\n   * Verifies the signature of the message with the public key of the account\n   * @param message a signed message\n   * @param signature the signature of the message\n   */\n  verifySignature(message: MaybeHexString, signature: MaybeHexString): boolean {\n    const rawMessage = HexString.ensure(message).toUint8Array();\n    const rawSignature = HexString.ensure(signature).toUint8Array();\n    return nacl.sign.detached.verify(rawMessage, rawSignature, this.signingKey.publicKey);\n  }\n\n  /**\n   * Derives account address, public key and private key\n   * @returns AptosAccountObject instance.\n   * @example An example of the returned AptosAccountObject object\n   * ```\n   * {\n   *    address: \"0xe8012714cd17606cee7188a2a365eef3fe760be598750678c8c5954eb548a591\",\n   *    publicKeyHex: \"0xf56d8524faf79fbc0f48c13aeed3b0ce5dd376b4db93b8130a107c0a5e04ba04\",\n   *    privateKeyHex: `0x009c9f7c992a06cfafe916f125d8adb7a395fca243e264a8e56a4b3e6accf940\n   *      d2b11e9ece3049ce60e3c7b4a1c58aebfa9298e29a30a58a67f1998646135204`\n   * }\n   * ```\n   */\n  toPrivateKeyObject(): AptosAccountObject {\n    return {\n      address: this.address().hex(),\n      publicKeyHex: this.pubKey().hex(),\n      privateKeyHex: HexString.fromUint8Array(this.signingKey.secretKey.slice(0, 32)).hex(),\n    };\n  }\n}\n\n// Returns an account address as a HexString given either an AptosAccount or a MaybeHexString.\nexport function getAddressFromAccountOrAddress(accountOrAddress: AptosAccount | MaybeHexString): HexString {\n  return accountOrAddress instanceof AptosAccount ? accountOrAddress.address() : HexString.ensure(accountOrAddress);\n}\n","import * as Types from './operations';\n\nimport { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nexport const TokenDataFieldsFragmentDoc = `\n    fragment TokenDataFields on current_token_datas {\n  creator_address\n  collection_name\n  description\n  metadata_uri\n  name\n  token_data_id_hash\n  collection_data_id_hash\n}\n    `;\nexport const CollectionDataFieldsFragmentDoc = `\n    fragment CollectionDataFields on current_collection_datas {\n  metadata_uri\n  supply\n  description\n  collection_name\n  collection_data_id_hash\n  table_handle\n  creator_address\n}\n    `;\nexport const GetAccountCoinsData = `\n    query getAccountCoinsData($owner_address: String, $offset: Int, $limit: Int) {\n  current_coin_balances(\n    where: {owner_address: {_eq: $owner_address}}\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    coin_type\n    coin_info {\n      name\n      decimals\n      symbol\n    }\n  }\n}\n    `;\nexport const GetAccountCurrentTokens = `\n    query getAccountCurrentTokens($address: String!, $offset: Int, $limit: Int) {\n  current_token_ownerships(\n    where: {owner_address: {_eq: $address}, amount: {_gt: 0}}\n    order_by: [{last_transaction_version: desc}, {creator_address: asc}, {collection_name: asc}, {name: asc}]\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    current_token_data {\n      ...TokenDataFields\n    }\n    current_collection_data {\n      ...CollectionDataFields\n    }\n    last_transaction_version\n    property_version\n  }\n}\n    ${TokenDataFieldsFragmentDoc}\n${CollectionDataFieldsFragmentDoc}`;\nexport const GetAccountTokensCount = `\n    query getAccountTokensCount($owner_address: String) {\n  current_token_ownerships_aggregate(\n    where: {owner_address: {_eq: $owner_address}, amount: {_gt: \"0\"}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  move_resources_aggregate(\n    where: {address: {_eq: $address}}\n    distinct_on: transaction_version\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsData = `\n    query getAccountTransactionsData($address: String, $limit: Int, $offset: Int) {\n  move_resources(\n    where: {address: {_eq: $address}}\n    order_by: {transaction_version: desc}\n    distinct_on: transaction_version\n    limit: $limit\n    offset: $offset\n  ) {\n    transaction_version\n  }\n}\n    `;\nexport const GetCurrentDelegatorBalancesCount = `\n    query getCurrentDelegatorBalancesCount($poolAddress: String) {\n  current_delegator_balances_aggregate(\n    where: {pool_type: {_eq: \"active_shares\"}, pool_address: {_eq: $poolAddress}, amount: {_gt: \"0\"}}\n    distinct_on: delegator_address\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nexport const GetIndexerLedgerInfo = `\n    query getIndexerLedgerInfo {\n  ledger_infos {\n    chain_id\n  }\n}\n    `;\nexport const GetTokenActivities = `\n    query getTokenActivities($idHash: String!, $offset: Int, $limit: Int) {\n  token_activities(\n    where: {token_data_id_hash: {_eq: $idHash}}\n    order_by: {transaction_version: desc}\n    offset: $offset\n    limit: $limit\n  ) {\n    creator_address\n    collection_name\n    name\n    token_data_id_hash\n    collection_data_id_hash\n    from_address\n    to_address\n    transaction_version\n    transaction_timestamp\n    property_version\n    transfer_type\n    event_sequence_number\n    token_amount\n  }\n}\n    `;\nexport const GetTokenActivitiesCount = `\n    query getTokenActivitiesCount($token_id: String) {\n  token_activities_aggregate(where: {token_data_id_hash: {_eq: $token_id}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetTokenData = `\n    query getTokenData($token_id: String) {\n  current_token_datas(where: {token_data_id_hash: {_eq: $token_id}}) {\n    token_data_id_hash\n    name\n    collection_name\n    creator_address\n    default_properties\n    largest_property_version\n    maximum\n    metadata_uri\n    payee_address\n    royalty_points_denominator\n    royalty_points_numerator\n    supply\n  }\n}\n    `;\nexport const GetTokenOwnersData = `\n    query getTokenOwnersData($token_id: String, $property_version: numeric) {\n  current_token_ownerships(\n    where: {token_data_id_hash: {_eq: $token_id}, property_version: {_eq: $property_version}}\n  ) {\n    owner_address\n  }\n}\n    `;\nexport const GetTopUserTransactions = `\n    query getTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nexport const GetUserTransactions = `\n    query getUserTransactions($limit: Int, $start_version: bigint, $offset: Int) {\n  user_transactions(\n    limit: $limit\n    order_by: {version: desc}\n    where: {version: {_lte: $start_version}}\n    offset: $offset\n  ) {\n    version\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAccountCoinsData(variables?: Types.GetAccountCoinsDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountCoinsDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountCoinsDataQuery>(GetAccountCoinsData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountCoinsData', 'query');\n    },\n    getAccountCurrentTokens(variables: Types.GetAccountCurrentTokensQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountCurrentTokensQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountCurrentTokensQuery>(GetAccountCurrentTokens, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountCurrentTokens', 'query');\n    },\n    getAccountTokensCount(variables?: Types.GetAccountTokensCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountTokensCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountTokensCountQuery>(GetAccountTokensCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountTokensCount', 'query');\n    },\n    getAccountTransactionsCount(variables?: Types.GetAccountTransactionsCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountTransactionsCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountTransactionsCountQuery>(GetAccountTransactionsCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountTransactionsCount', 'query');\n    },\n    getAccountTransactionsData(variables?: Types.GetAccountTransactionsDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountTransactionsDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountTransactionsDataQuery>(GetAccountTransactionsData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountTransactionsData', 'query');\n    },\n    getCurrentDelegatorBalancesCount(variables?: Types.GetCurrentDelegatorBalancesCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetCurrentDelegatorBalancesCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetCurrentDelegatorBalancesCountQuery>(GetCurrentDelegatorBalancesCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCurrentDelegatorBalancesCount', 'query');\n    },\n    getDelegatedStakingActivities(variables?: Types.GetDelegatedStakingActivitiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetDelegatedStakingActivitiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetDelegatedStakingActivitiesQuery>(GetDelegatedStakingActivities, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getDelegatedStakingActivities', 'query');\n    },\n    getIndexerLedgerInfo(variables?: Types.GetIndexerLedgerInfoQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetIndexerLedgerInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetIndexerLedgerInfoQuery>(GetIndexerLedgerInfo, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getIndexerLedgerInfo', 'query');\n    },\n    getTokenActivities(variables: Types.GetTokenActivitiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenActivitiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenActivitiesQuery>(GetTokenActivities, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenActivities', 'query');\n    },\n    getTokenActivitiesCount(variables?: Types.GetTokenActivitiesCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenActivitiesCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenActivitiesCountQuery>(GetTokenActivitiesCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenActivitiesCount', 'query');\n    },\n    getTokenData(variables?: Types.GetTokenDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenDataQuery>(GetTokenData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenData', 'query');\n    },\n    getTokenOwnersData(variables?: Types.GetTokenOwnersDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenOwnersDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenOwnersDataQuery>(GetTokenOwnersData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenOwnersData', 'query');\n    },\n    getTopUserTransactions(variables?: Types.GetTopUserTransactionsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTopUserTransactionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTopUserTransactionsQuery>(GetTopUserTransactions, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTopUserTransactions', 'query');\n    },\n    getUserTransactions(variables?: Types.GetUserTransactionsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetUserTransactionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetUserTransactionsQuery>(GetUserTransactions, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getUserTransactions', 'query');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import axios from \"axios\";\n\nimport { AnyNumber } from \"../bcs/types\";\nimport { HexString, MaybeHexString } from \"../utils\";\nimport {\n  GetAccountTokensCountQuery,\n  GetAccountCoinsDataQuery,\n  GetAccountCurrentTokensQuery,\n  GetAccountTransactionsCountQuery,\n  GetAccountTransactionsDataQuery,\n  GetCurrentDelegatorBalancesCountQuery,\n  GetDelegatedStakingActivitiesQuery,\n  GetIndexerLedgerInfoQuery,\n  GetTokenActivitiesCountQuery,\n  GetTokenActivitiesQuery,\n  GetTokenDataQuery,\n  GetTokenOwnersDataQuery,\n  GetTopUserTransactionsQuery,\n  GetUserTransactionsQuery,\n} from \"../indexer/generated/operations\";\nimport {\n  GetAccountTokensCount,\n  GetAccountCoinsData,\n  GetAccountCurrentTokens,\n  GetAccountTransactionsCount,\n  GetAccountTransactionsData,\n  GetCurrentDelegatorBalancesCount,\n  GetDelegatedStakingActivities,\n  GetIndexerLedgerInfo,\n  GetTokenActivities,\n  GetTokenActivitiesCount,\n  GetTokenData,\n  GetTokenOwnersData,\n  GetTopUserTransactions,\n  GetUserTransactions,\n} from \"../indexer/generated/queries\";\n\n/**\n * Controls the number of results that are returned and the starting position of those results.\n * limit specifies the maximum number of items or records to return in a query result.\n * offset parameter specifies the starting position of the query result within the set of data.\n * For example, if you want to retrieve records 11-20,\n * you would set the offset parameter to 10 (i.e., the index of the first record to retrieve is 10)\n * and the limit parameter to 10 (i.e., the number of records to retrieve is 10))\n */\ninterface PaginationArgs {\n  offset?: AnyNumber;\n  limit?: number;\n}\n\ntype GraphqlQuery = {\n  query: string;\n  variables?: {};\n};\n/**\n * Provides methods for retrieving data from Aptos Indexer.\n * For more detailed Queries specification see\n * {@link https://cloud.hasura.io/public/graphiql?endpoint=https://indexer.mainnet.aptoslabs.com/v1/graphql}\n */\nexport class IndexerClient {\n  endpoint: string;\n\n  /**\n   * @param endpoint URL of the Aptos Indexer API endpoint.\n   */\n  constructor(endpoint: string) {\n    this.endpoint = endpoint;\n  }\n\n  /**\n   * Indexer only accepts address in the long format, i.e a 66 chars long -> 0x<64 chars>\n   * This method makes sure address is 66 chars long.\n   * @param address\n   */\n  static validateAddress(address: string): void {\n    if (address.length < 66) {\n      throw new Error(\"Address needs to be 66 chars long.\");\n    }\n  }\n\n  /**\n   * Builds a axios client call to fetch data from Aptos Indexer.\n   *\n   * @param graphqlQuery A GraphQL query to pass in the `data` axios call.\n   */\n  async queryIndexer<T>(graphqlQuery: GraphqlQuery): Promise<T> {\n    const { data } = await axios.post(this.endpoint, graphqlQuery);\n    if (data.errors) {\n      throw new Error(`Indexer data error ${JSON.stringify(data.errors, null, \" \")}`);\n    }\n    return data.data;\n  }\n\n  /**\n   * Queries Indexer Ledger Info\n   *\n   * @returns GetLedgerInfoQuery response type\n   */\n  async getIndexerLedgerInfo(): Promise<GetIndexerLedgerInfoQuery> {\n    const graphqlQuery = {\n      query: GetIndexerLedgerInfo,\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries an Aptos account's NFTs by owner address\n   *\n   * @param ownerAddress Hex-encoded 32 byte Aptos account address\n   * @returns GetAccountCurrentTokensQuery response type\n   */\n  async getAccountNFTs(ownerAddress: MaybeHexString, options?: PaginationArgs): Promise<GetAccountCurrentTokensQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountCurrentTokens,\n      variables: { address, offset: options?.offset, limit: options?.limit },\n    };\n\n    return this.queryIndexer<GetAccountCurrentTokensQuery>(graphqlQuery);\n  }\n\n  /**\n   * Queries a token activities by token id hash\n   *\n   * @param idHash token id hash\n   * @returns GetTokenActivitiesQuery response type\n   */\n  async getTokenActivities(idHash: string, options?: PaginationArgs): Promise<GetTokenActivitiesQuery> {\n    const graphqlQuery = {\n      query: GetTokenActivities,\n      variables: { idHash, offset: options?.offset, limit: options?.limit },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries an account coin data\n   *\n   * @param ownerAddress Owner address\n   * @returns GetAccountCoinsDataQuery response type\n   */\n  async getAccountCoinsData(ownerAddress: MaybeHexString, options?: PaginationArgs): Promise<GetAccountCoinsDataQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountCoinsData,\n      variables: { owner_address: address, offset: options?.offset, limit: options?.limit },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Gets the count of tokens owned by an account\n   *\n   * @param ownerAddress Owner address\n   * @returns AccountTokensCountQuery response type\n   */\n  async getAccountTokensCount(ownerAddress: MaybeHexString): Promise<GetAccountTokensCountQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountTokensCount,\n      variables: { owner_address: address },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Gets the count of transactions submitted by an account\n   *\n   * @param address Account address\n   * @returns GetAccountTransactionsCountQuery response type\n   */\n  async getAccountTransactionsCount(accountAddress: MaybeHexString): Promise<GetAccountTransactionsCountQuery> {\n    const address = HexString.ensure(accountAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountTransactionsCount,\n      variables: { address },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries an account transactions data\n   *\n   * @param address Account address\n   * @returns GetAccountTransactionsDataQuery response type\n   */\n  async getAccountTransactionsData(\n    accountAddress: MaybeHexString,\n    options?: PaginationArgs,\n  ): Promise<GetAccountTransactionsDataQuery> {\n    const address = HexString.ensure(accountAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountTransactionsData,\n      variables: { address, offset: options?.offset, limit: options?.limit },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries delegated staking activities\n   *\n   * @param delegatorAddress Delegator address\n   * @param poolAddress Pool address\n   * @returns GetDelegatedStakingActivitiesQuery response type\n   */\n  async getDelegatedStakingActivities(\n    delegatorAddress: MaybeHexString,\n    poolAddress: MaybeHexString,\n  ): Promise<GetDelegatedStakingActivitiesQuery> {\n    const delegator = HexString.ensure(delegatorAddress).hex();\n    const pool = HexString.ensure(poolAddress).hex();\n    IndexerClient.validateAddress(delegator);\n    IndexerClient.validateAddress(pool);\n    const graphqlQuery = {\n      query: GetDelegatedStakingActivities,\n      variables: {\n        delegatorAddress: delegator,\n        poolAddress: pool,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Gets the count of token's activities\n   *\n   * @param tokenId Token ID\n   * @returns GetTokenActivitiesCountQuery response type\n   */\n  async getTokenActivitiesCount(tokenId: string): Promise<GetTokenActivitiesCountQuery> {\n    const graphqlQuery = {\n      query: GetTokenActivitiesCount,\n      variables: { token_id: tokenId },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries token data\n   *\n   * @param tokenId Token ID\n   * @returns GetTokenDataQuery response type\n   */\n  async getTokenData(tokenId: string): Promise<GetTokenDataQuery> {\n    const graphqlQuery = {\n      query: GetTokenData,\n      variables: { token_id: tokenId },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries token owners data\n   *\n   * @param tokenId Token ID\n   * @param propertyVersion Property version\n   * @returns GetTokenOwnersDataQuery response type\n   */\n  async getTokenOwnersData(tokenId: string, propertyVersion: number): Promise<GetTokenOwnersDataQuery> {\n    const graphqlQuery = {\n      query: GetTokenOwnersData,\n      variables: { token_id: tokenId, property_version: propertyVersion },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries top user transactions\n   *\n   * @param limit\n   * @returns GetTopUserTransactionsQuery response type\n   */\n  async getTopUserTransactions(limit: number): Promise<GetTopUserTransactionsQuery> {\n    const graphqlQuery = {\n      query: GetTopUserTransactions,\n      variables: { limit },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries top user transactions\n   *\n   * @returns GetUserTransactionsQuery response type\n   */\n  async getUserTransactions(startVersion?: number, options?: PaginationArgs): Promise<GetUserTransactionsQuery> {\n    const graphqlQuery = {\n      query: GetUserTransactions,\n      variables: { start_version: startVersion, offset: options?.offset, limit: options?.limit },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries current delegator balances count\n   *\n   * @returns GetCurrentDelegatorBalancesCountQuery response type\n   */\n  async getCurrentDelegatorBalancesCount(poolAddress: MaybeHexString): Promise<GetCurrentDelegatorBalancesCountQuery> {\n    const address = HexString.ensure(poolAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetCurrentDelegatorBalancesCount,\n      variables: { poolAddress: address },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport { AptosGeneratedClient } from './AptosGeneratedClient';\n\nexport { ApiError } from './core/ApiError';\nexport { BaseHttpRequest } from './core/BaseHttpRequest';\nexport { CancelablePromise, CancelError } from './core/CancelablePromise';\nexport { OpenAPI } from './core/OpenAPI';\nexport type { OpenAPIConfig } from './core/OpenAPI';\n\nexport type { AccountData } from './models/AccountData';\nexport type { AccountSignature } from './models/AccountSignature';\nexport type { AccountSignature_Ed25519Signature } from './models/AccountSignature_Ed25519Signature';\nexport type { AccountSignature_MultiEd25519Signature } from './models/AccountSignature_MultiEd25519Signature';\nexport type { Address } from './models/Address';\nexport type { AptosError } from './models/AptosError';\nexport { AptosErrorCode } from './models/AptosErrorCode';\nexport type { Block } from './models/Block';\nexport type { BlockMetadataTransaction } from './models/BlockMetadataTransaction';\nexport type { DecodedTableData } from './models/DecodedTableData';\nexport type { DeletedTableData } from './models/DeletedTableData';\nexport type { DeleteModule } from './models/DeleteModule';\nexport type { DeleteResource } from './models/DeleteResource';\nexport type { DeleteTableItem } from './models/DeleteTableItem';\nexport type { DirectWriteSet } from './models/DirectWriteSet';\nexport type { Ed25519Signature } from './models/Ed25519Signature';\nexport type { EncodeSubmissionRequest } from './models/EncodeSubmissionRequest';\nexport type { EntryFunctionId } from './models/EntryFunctionId';\nexport type { EntryFunctionPayload } from './models/EntryFunctionPayload';\nexport type { Event } from './models/Event';\nexport type { EventGuid } from './models/EventGuid';\nexport type { GasEstimation } from './models/GasEstimation';\nexport type { GenesisPayload } from './models/GenesisPayload';\nexport type { GenesisPayload_WriteSetPayload } from './models/GenesisPayload_WriteSetPayload';\nexport type { GenesisTransaction } from './models/GenesisTransaction';\nexport type { HashValue } from './models/HashValue';\nexport type { HealthCheckSuccess } from './models/HealthCheckSuccess';\nexport type { HexEncodedBytes } from './models/HexEncodedBytes';\nexport type { IdentifierWrapper } from './models/IdentifierWrapper';\nexport type { IndexResponse } from './models/IndexResponse';\nexport type { ModuleBundlePayload } from './models/ModuleBundlePayload';\nexport type { MoveAbility } from './models/MoveAbility';\nexport type { MoveFunction } from './models/MoveFunction';\nexport type { MoveFunctionGenericTypeParam } from './models/MoveFunctionGenericTypeParam';\nexport { MoveFunctionVisibility } from './models/MoveFunctionVisibility';\nexport type { MoveModule } from './models/MoveModule';\nexport type { MoveModuleBytecode } from './models/MoveModuleBytecode';\nexport type { MoveModuleId } from './models/MoveModuleId';\nexport type { MoveResource } from './models/MoveResource';\nexport type { MoveScriptBytecode } from './models/MoveScriptBytecode';\nexport type { MoveStruct } from './models/MoveStruct';\nexport type { MoveStructField } from './models/MoveStructField';\nexport type { MoveStructGenericTypeParam } from './models/MoveStructGenericTypeParam';\nexport type { MoveStructTag } from './models/MoveStructTag';\nexport type { MoveStructValue } from './models/MoveStructValue';\nexport type { MoveType } from './models/MoveType';\nexport type { MoveValue } from './models/MoveValue';\nexport type { MultiAgentSignature } from './models/MultiAgentSignature';\nexport type { MultiEd25519Signature } from './models/MultiEd25519Signature';\nexport type { MultisigPayload } from './models/MultisigPayload';\nexport type { MultisigTransactionPayload } from './models/MultisigTransactionPayload';\nexport type { PendingTransaction } from './models/PendingTransaction';\nexport type { RawTableItemRequest } from './models/RawTableItemRequest';\nexport { RoleType } from './models/RoleType';\nexport type { ScriptPayload } from './models/ScriptPayload';\nexport type { ScriptWriteSet } from './models/ScriptWriteSet';\nexport type { StateCheckpointTransaction } from './models/StateCheckpointTransaction';\nexport type { StateKeyWrapper } from './models/StateKeyWrapper';\nexport type { SubmitTransactionRequest } from './models/SubmitTransactionRequest';\nexport type { TableItemRequest } from './models/TableItemRequest';\nexport type { Transaction } from './models/Transaction';\nexport type { Transaction_BlockMetadataTransaction } from './models/Transaction_BlockMetadataTransaction';\nexport type { Transaction_GenesisTransaction } from './models/Transaction_GenesisTransaction';\nexport type { Transaction_PendingTransaction } from './models/Transaction_PendingTransaction';\nexport type { Transaction_StateCheckpointTransaction } from './models/Transaction_StateCheckpointTransaction';\nexport type { Transaction_UserTransaction } from './models/Transaction_UserTransaction';\nexport type { TransactionPayload } from './models/TransactionPayload';\nexport type { TransactionPayload_EntryFunctionPayload } from './models/TransactionPayload_EntryFunctionPayload';\nexport type { TransactionPayload_ModuleBundlePayload } from './models/TransactionPayload_ModuleBundlePayload';\nexport type { TransactionPayload_MultisigPayload } from './models/TransactionPayload_MultisigPayload';\nexport type { TransactionPayload_ScriptPayload } from './models/TransactionPayload_ScriptPayload';\nexport type { TransactionsBatchSingleSubmissionFailure } from './models/TransactionsBatchSingleSubmissionFailure';\nexport type { TransactionsBatchSubmissionResult } from './models/TransactionsBatchSubmissionResult';\nexport type { TransactionSignature } from './models/TransactionSignature';\nexport type { TransactionSignature_Ed25519Signature } from './models/TransactionSignature_Ed25519Signature';\nexport type { TransactionSignature_MultiAgentSignature } from './models/TransactionSignature_MultiAgentSignature';\nexport type { TransactionSignature_MultiEd25519Signature } from './models/TransactionSignature_MultiEd25519Signature';\nexport type { U128 } from './models/U128';\nexport type { U256 } from './models/U256';\nexport type { U64 } from './models/U64';\nexport type { UserTransaction } from './models/UserTransaction';\nexport type { VersionedEvent } from './models/VersionedEvent';\nexport type { ViewRequest } from './models/ViewRequest';\nexport type { WriteModule } from './models/WriteModule';\nexport type { WriteResource } from './models/WriteResource';\nexport type { WriteSet } from './models/WriteSet';\nexport type { WriteSet_DirectWriteSet } from './models/WriteSet_DirectWriteSet';\nexport type { WriteSet_ScriptWriteSet } from './models/WriteSet_ScriptWriteSet';\nexport type { WriteSetChange } from './models/WriteSetChange';\nexport type { WriteSetChange_DeleteModule } from './models/WriteSetChange_DeleteModule';\nexport type { WriteSetChange_DeleteResource } from './models/WriteSetChange_DeleteResource';\nexport type { WriteSetChange_DeleteTableItem } from './models/WriteSetChange_DeleteTableItem';\nexport type { WriteSetChange_WriteModule } from './models/WriteSetChange_WriteModule';\nexport type { WriteSetChange_WriteResource } from './models/WriteSetChange_WriteResource';\nexport type { WriteSetChange_WriteTableItem } from './models/WriteSetChange_WriteTableItem';\nexport type { WriteSetPayload } from './models/WriteSetPayload';\nexport type { WriteTableItem } from './models/WriteTableItem';\n\nexport { $AccountData } from './schemas/$AccountData';\nexport { $AccountSignature } from './schemas/$AccountSignature';\nexport { $AccountSignature_Ed25519Signature } from './schemas/$AccountSignature_Ed25519Signature';\nexport { $AccountSignature_MultiEd25519Signature } from './schemas/$AccountSignature_MultiEd25519Signature';\nexport { $Address } from './schemas/$Address';\nexport { $AptosError } from './schemas/$AptosError';\nexport { $AptosErrorCode } from './schemas/$AptosErrorCode';\nexport { $Block } from './schemas/$Block';\nexport { $BlockMetadataTransaction } from './schemas/$BlockMetadataTransaction';\nexport { $DecodedTableData } from './schemas/$DecodedTableData';\nexport { $DeletedTableData } from './schemas/$DeletedTableData';\nexport { $DeleteModule } from './schemas/$DeleteModule';\nexport { $DeleteResource } from './schemas/$DeleteResource';\nexport { $DeleteTableItem } from './schemas/$DeleteTableItem';\nexport { $DirectWriteSet } from './schemas/$DirectWriteSet';\nexport { $Ed25519Signature } from './schemas/$Ed25519Signature';\nexport { $EncodeSubmissionRequest } from './schemas/$EncodeSubmissionRequest';\nexport { $EntryFunctionId } from './schemas/$EntryFunctionId';\nexport { $EntryFunctionPayload } from './schemas/$EntryFunctionPayload';\nexport { $Event } from './schemas/$Event';\nexport { $EventGuid } from './schemas/$EventGuid';\nexport { $GasEstimation } from './schemas/$GasEstimation';\nexport { $GenesisPayload } from './schemas/$GenesisPayload';\nexport { $GenesisPayload_WriteSetPayload } from './schemas/$GenesisPayload_WriteSetPayload';\nexport { $GenesisTransaction } from './schemas/$GenesisTransaction';\nexport { $HashValue } from './schemas/$HashValue';\nexport { $HealthCheckSuccess } from './schemas/$HealthCheckSuccess';\nexport { $HexEncodedBytes } from './schemas/$HexEncodedBytes';\nexport { $IdentifierWrapper } from './schemas/$IdentifierWrapper';\nexport { $IndexResponse } from './schemas/$IndexResponse';\nexport { $ModuleBundlePayload } from './schemas/$ModuleBundlePayload';\nexport { $MoveAbility } from './schemas/$MoveAbility';\nexport { $MoveFunction } from './schemas/$MoveFunction';\nexport { $MoveFunctionGenericTypeParam } from './schemas/$MoveFunctionGenericTypeParam';\nexport { $MoveFunctionVisibility } from './schemas/$MoveFunctionVisibility';\nexport { $MoveModule } from './schemas/$MoveModule';\nexport { $MoveModuleBytecode } from './schemas/$MoveModuleBytecode';\nexport { $MoveModuleId } from './schemas/$MoveModuleId';\nexport { $MoveResource } from './schemas/$MoveResource';\nexport { $MoveScriptBytecode } from './schemas/$MoveScriptBytecode';\nexport { $MoveStruct } from './schemas/$MoveStruct';\nexport { $MoveStructField } from './schemas/$MoveStructField';\nexport { $MoveStructGenericTypeParam } from './schemas/$MoveStructGenericTypeParam';\nexport { $MoveStructTag } from './schemas/$MoveStructTag';\nexport { $MoveStructValue } from './schemas/$MoveStructValue';\nexport { $MoveType } from './schemas/$MoveType';\nexport { $MoveValue } from './schemas/$MoveValue';\nexport { $MultiAgentSignature } from './schemas/$MultiAgentSignature';\nexport { $MultiEd25519Signature } from './schemas/$MultiEd25519Signature';\nexport { $MultisigPayload } from './schemas/$MultisigPayload';\nexport { $MultisigTransactionPayload } from './schemas/$MultisigTransactionPayload';\nexport { $PendingTransaction } from './schemas/$PendingTransaction';\nexport { $RawTableItemRequest } from './schemas/$RawTableItemRequest';\nexport { $RoleType } from './schemas/$RoleType';\nexport { $ScriptPayload } from './schemas/$ScriptPayload';\nexport { $ScriptWriteSet } from './schemas/$ScriptWriteSet';\nexport { $StateCheckpointTransaction } from './schemas/$StateCheckpointTransaction';\nexport { $StateKeyWrapper } from './schemas/$StateKeyWrapper';\nexport { $SubmitTransactionRequest } from './schemas/$SubmitTransactionRequest';\nexport { $TableItemRequest } from './schemas/$TableItemRequest';\nexport { $Transaction } from './schemas/$Transaction';\nexport { $Transaction_BlockMetadataTransaction } from './schemas/$Transaction_BlockMetadataTransaction';\nexport { $Transaction_GenesisTransaction } from './schemas/$Transaction_GenesisTransaction';\nexport { $Transaction_PendingTransaction } from './schemas/$Transaction_PendingTransaction';\nexport { $Transaction_StateCheckpointTransaction } from './schemas/$Transaction_StateCheckpointTransaction';\nexport { $Transaction_UserTransaction } from './schemas/$Transaction_UserTransaction';\nexport { $TransactionPayload } from './schemas/$TransactionPayload';\nexport { $TransactionPayload_EntryFunctionPayload } from './schemas/$TransactionPayload_EntryFunctionPayload';\nexport { $TransactionPayload_ModuleBundlePayload } from './schemas/$TransactionPayload_ModuleBundlePayload';\nexport { $TransactionPayload_MultisigPayload } from './schemas/$TransactionPayload_MultisigPayload';\nexport { $TransactionPayload_ScriptPayload } from './schemas/$TransactionPayload_ScriptPayload';\nexport { $TransactionsBatchSingleSubmissionFailure } from './schemas/$TransactionsBatchSingleSubmissionFailure';\nexport { $TransactionsBatchSubmissionResult } from './schemas/$TransactionsBatchSubmissionResult';\nexport { $TransactionSignature } from './schemas/$TransactionSignature';\nexport { $TransactionSignature_Ed25519Signature } from './schemas/$TransactionSignature_Ed25519Signature';\nexport { $TransactionSignature_MultiAgentSignature } from './schemas/$TransactionSignature_MultiAgentSignature';\nexport { $TransactionSignature_MultiEd25519Signature } from './schemas/$TransactionSignature_MultiEd25519Signature';\nexport { $U128 } from './schemas/$U128';\nexport { $U256 } from './schemas/$U256';\nexport { $U64 } from './schemas/$U64';\nexport { $UserTransaction } from './schemas/$UserTransaction';\nexport { $VersionedEvent } from './schemas/$VersionedEvent';\nexport { $ViewRequest } from './schemas/$ViewRequest';\nexport { $WriteModule } from './schemas/$WriteModule';\nexport { $WriteResource } from './schemas/$WriteResource';\nexport { $WriteSet } from './schemas/$WriteSet';\nexport { $WriteSet_DirectWriteSet } from './schemas/$WriteSet_DirectWriteSet';\nexport { $WriteSet_ScriptWriteSet } from './schemas/$WriteSet_ScriptWriteSet';\nexport { $WriteSetChange } from './schemas/$WriteSetChange';\nexport { $WriteSetChange_DeleteModule } from './schemas/$WriteSetChange_DeleteModule';\nexport { $WriteSetChange_DeleteResource } from './schemas/$WriteSetChange_DeleteResource';\nexport { $WriteSetChange_DeleteTableItem } from './schemas/$WriteSetChange_DeleteTableItem';\nexport { $WriteSetChange_WriteModule } from './schemas/$WriteSetChange_WriteModule';\nexport { $WriteSetChange_WriteResource } from './schemas/$WriteSetChange_WriteResource';\nexport { $WriteSetChange_WriteTableItem } from './schemas/$WriteSetChange_WriteTableItem';\nexport { $WriteSetPayload } from './schemas/$WriteSetPayload';\nexport { $WriteTableItem } from './schemas/$WriteTableItem';\n\nexport { AccountsService } from './services/AccountsService';\nexport { BlocksService } from './services/BlocksService';\nexport { EventsService } from './services/EventsService';\nexport { GeneralService } from './services/GeneralService';\nexport { TablesService } from './services/TablesService';\nexport { TransactionsService } from './services/TransactionsService';\nexport { ViewService } from './services/ViewService';\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n    constructor(public readonly config: OpenAPIConfig) {}\n\n    public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n    public readonly url: string;\n    public readonly status: number;\n    public readonly statusText: string;\n    public readonly body: any;\n    public readonly request: ApiRequestOptions;\n\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n        super(message);\n\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n    constructor(message: string) {\n        super(message);\n        this.name = 'CancelError';\n    }\n\n    public get isCancelled(): boolean {\n        return true;\n    }\n}\n\nexport interface OnCancel {\n    readonly isResolved: boolean;\n    readonly isRejected: boolean;\n    readonly isCancelled: boolean;\n\n    (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n    readonly [Symbol.toStringTag]!: string;\n\n    private _isResolved: boolean;\n    private _isRejected: boolean;\n    private _isCancelled: boolean;\n    private readonly _cancelHandlers: (() => void)[];\n    private readonly _promise: Promise<T>;\n    private _resolve?: (value: T | PromiseLike<T>) => void;\n    private _reject?: (reason?: any) => void;\n\n    constructor(\n        executor: (\n            resolve: (value: T | PromiseLike<T>) => void,\n            reject: (reason?: any) => void,\n            onCancel: OnCancel\n        ) => void\n    ) {\n        this._isResolved = false;\n        this._isRejected = false;\n        this._isCancelled = false;\n        this._cancelHandlers = [];\n        this._promise = new Promise<T>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n\n            const onResolve = (value: T | PromiseLike<T>): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isResolved = true;\n                this._resolve?.(value);\n            };\n\n            const onReject = (reason?: any): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isRejected = true;\n                this._reject?.(reason);\n            };\n\n            const onCancel = (cancelHandler: () => void): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._cancelHandlers.push(cancelHandler);\n            };\n\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: (): boolean => this._isResolved,\n            });\n\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: (): boolean => this._isRejected,\n            });\n\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: (): boolean => this._isCancelled,\n            });\n\n            return executor(onResolve, onReject, onCancel as OnCancel);\n        });\n    }\n\n    public then<TResult1 = T, TResult2 = never>(\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return this._promise.then(onFulfilled, onRejected);\n    }\n\n    public catch<TResult = never>(\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n    ): Promise<T | TResult> {\n        return this._promise.catch(onRejected);\n    }\n\n    public finally(onFinally?: (() => void) | null): Promise<T> {\n        return this._promise.finally(onFinally);\n    }\n\n    public cancel(): void {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n            return;\n        }\n        this._isCancelled = true;\n        if (this._cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this._cancelHandlers) {\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this._cancelHandlers.length = 0;\n        this._reject?.(new CancelError('Request aborted'));\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport axios from 'axios';\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport FormData from 'form-data';\n\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\ninterface Cookie {\n  name: string;\n  value: string;\n  expires?: Date;\n  path?: string;\n  sameSite?: \"Lax\" | \"None\" | \"Strict\";\n  secure?: boolean;\n}\n\nclass CookieJar {\n  constructor(private jar = new Map<string, Cookie[]>()) {}\n\n  setCookie(url: URL, cookieStr: string) {\n    const key = url.origin.toLowerCase();\n    if (!this.jar.has(key)) {\n      this.jar.set(key, []);\n    }\n\n    const cookie = CookieJar.parse(cookieStr);\n    this.jar.set(key, [...(this.jar.get(key)?.filter((c) => c.name !== cookie.name) || []), cookie]);\n  }\n\n  getCookies(url: URL): Cookie[] {\n    const key = url.origin.toLowerCase();\n    if (!this.jar.get(key)) {\n      return [];\n    }\n\n    // Filter out expired cookies\n    return this.jar.get(key)?.filter((cookie) => !cookie.expires || cookie.expires > new Date()) || [];\n  }\n\n  static parse(str: string): Cookie {\n    if (typeof str !== \"string\") {\n      throw new Error(\"argument str must be a string\");\n    }\n\n    const parts = str.split(\";\").map((part) => part.trim());\n\n    let cookie: Cookie;\n\n    if (parts.length > 0) {\n      const [name, value] = parts[0].split(\"=\");\n      if (!name || !value) {\n        throw new Error(\"Invalid cookie\");\n      }\n\n      cookie = {\n        name,\n        value,\n      };\n    } else {\n      throw new Error(\"Invalid cookie\");\n    }\n\n    parts.slice(1).forEach((part) => {\n      const [name, value] = part.split(\"=\");\n      if (!name.trim()) {\n        throw new Error(\"Invalid cookie\");\n      }\n\n      const nameLow = name.toLowerCase();\n      // eslint-disable-next-line quotes\n      const val = value?.charAt(0) === \"'\" || value?.charAt(0) === '\"' ? value?.slice(1, -1) : value;\n      if (nameLow === \"expires\") {\n        cookie.expires = new Date(val);\n      }\n      if (nameLow === \"path\") {\n        cookie.path = val;\n      }\n      if (nameLow === \"samesite\") {\n        if (val !== \"Lax\" && val !== \"None\" && val !== \"Strict\") {\n          throw new Error(\"Invalid cookie SameSite value\");\n        }\n        cookie.sameSite = val;\n      }\n      if (nameLow === \"secure\") {\n        cookie.secure = true;\n      }\n    });\n\n    return cookie;\n  }\n}\n\nconst jar = new CookieJar();\n\naxios.interceptors.response.use((response) => {\n  if (Array.isArray(response.headers[\"set-cookie\"])) {\n    response.headers[\"set-cookie\"].forEach((c) => {\n      jar.setCookie(new URL(response.config.url!), c);\n    });\n  }\n  return response;\n});\n\naxios.interceptors.request.use(function (config) {\n  const cookies = jar.getCookies(new URL(config.url!));\n\n  if (cookies?.length > 0 && config.headers) {\n    config.headers.cookie = cookies.map((cookie) => `${cookie.name}=${cookie.value}`).join(\"; \");\n  }\n  return config;\n});\n\nconst isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n    return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n    return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n    return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n    return (\n        typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\n    );\n};\n\nconst isFormData = (value: any): value is FormData => {\n    return value instanceof FormData;\n};\n\nconst isSuccess = (status: number): boolean => {\n    return status >= 200 && status < 300;\n};\n\nconst base64 = (str: string): string => { return btoa(str); };\n\nconst getQueryString = (params: Record<string, any>): string => {\n    const qs: string[] = [];\n\n    const append = (key: string, value: any) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n\n    const process = (key: string, value: any) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            } else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n\n    return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\n            if (options.path?.hasOwnProperty(group)) {\n                return encoder(String(options.path[group]));\n            }\n            return substring;\n        });\n\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n    if (options.formData) {\n        const formData = new FormData();\n\n        const process = (key: string, value: any) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n                if (Array.isArray(value)) {\n                    value.forEach(v => process(key, v));\n                } else {\n                    process(key, value);\n                }\n            });\n\n        return formData;\n    }\n    return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n    if (typeof resolver === 'function') {\n        return (resolver as Resolver<T>)(options);\n    }\n    return resolver;\n};\n\nconst getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions, formData?: FormData): Promise<Record<string, string>> => {\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n    const formHeaders = typeof formData?.getHeaders === 'function' && formData?.getHeaders() || {}\n\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n        ...formHeaders,\n    })\n    .filter(([_, value]) => isDefined(value))\n    .reduce((headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n    }), {} as Record<string, string>);\n\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n\n    if (options.body) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        } else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        } else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n\n    return headers;\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n    if (options.body) {\n        return options.body;\n    }\n    return undefined;\n};\n\nconst sendRequest = async <T>(\n    config: OpenAPIConfig,\n    options: ApiRequestOptions,\n    url: string,\n    body: any,\n    formData: FormData | undefined,\n    headers: Record<string, string>,\n    onCancel: OnCancel\n): Promise<AxiosResponse<T>> => {\n    const source = axios.CancelToken.source();\n\n    const requestConfig: AxiosRequestConfig = {\n        url,\n        headers,\n        data: body ?? formData,\n        method: options.method,\n        withCredentials: config.WITH_CREDENTIALS,\n        cancelToken: source.token,\n    };\n\n    const isBCS = Object.keys(config.HEADERS || {})\n    .filter((k) => k.toLowerCase() === \"accept\")\n    .map((k) => (config.HEADERS as Record<string, string>)[k])\n    .includes(\"application/x-bcs\");\n  if (isBCS) {\n    requestConfig.responseType = \"arraybuffer\";\n  }\n\n    onCancel(() => source.cancel('The user aborted a request.'));\n\n    try {\n        return await axios.request(requestConfig);\n    } catch (error) {\n        const axiosError = error as AxiosError<T>;\n        if (axiosError.response) {\n            return axiosError.response;\n        }\n        throw error;\n    }\n};\n\nconst getResponseHeader = (response: AxiosResponse<any>, responseHeader?: string): string | undefined => {\n    if (responseHeader) {\n        const content = response.headers[responseHeader];\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\n\nconst getResponseBody = (response: AxiosResponse<any>): any => {\n    if (response.status !== 204) {\n        return response.data;\n    }\n    return undefined;\n};\n\nconst catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n    const errors: Record<number, string> = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        429: 'Too Many Requests',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    }\n\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n\n    if (!result.ok) {\n        throw new ApiError(options, result, 'Generic Error');\n    }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options, formData);\n\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest<T>(config, options, url, body, formData, headers, onCancel);\n                const responseBody = getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n\n                const result: ApiResult = {\n                    url,\n                    ok: isSuccess(response.status),\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n\n                catchErrorCodes(options, result);\n\n                // Attach the response headers to the output. This is a hack to fix\n                // https://github.com/ferdikoomen/openapi-typescript-codegen/issues/1295\n                const out = result.body;\n                try {\n                    out[\"__headers\"] = response.headers;\n                } catch (_) {}\n\n                resolve(out);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class AxiosHttpRequest extends BaseHttpRequest {\n\n    constructor(config: OpenAPIConfig) {\n        super(config);\n    }\n\n    /**\n     * Request method\n     * @param options The request options from the service\n     * @returns CancelablePromise<T>\n     * @throws ApiError\n     */\n    public request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n        return __request(this.config, options);\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AccountData } from '../models/AccountData';\nimport type { Address } from '../models/Address';\nimport type { IdentifierWrapper } from '../models/IdentifierWrapper';\nimport type { MoveModuleBytecode } from '../models/MoveModuleBytecode';\nimport type { MoveResource } from '../models/MoveResource';\nimport type { MoveStructTag } from '../models/MoveStructTag';\nimport type { StateKeyWrapper } from '../models/StateKeyWrapper';\nimport type { U64 } from '../models/U64';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class AccountsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get account\n     * Return the authentication key and the sequence number for an account\n     * address. Optionally, a ledger version can be specified. If the ledger\n     * version is not specified in the request, the latest ledger version is used.\n     * @param address Address of account with or without a `0x` prefix\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns AccountData\n     * @throws ApiError\n     */\n    public getAccount(\n        address: Address,\n        ledgerVersion?: U64,\n    ): CancelablePromise<AccountData> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}',\n            path: {\n                'address': address,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n        });\n    }\n\n    /**\n     * Get account resources\n     * Retrieves all account resources for a given account and a specific ledger version.  If the\n     * ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @param start Cursor specifying where to start for pagination\n     *\n     * This cursor cannot be derived manually client-side. Instead, you must\n     * call this endpoint once without this query parameter specified, and\n     * then use the cursor returned in the X-Aptos-Cursor header in the\n     * response.\n     * @param limit Max number of account resources to retrieve\n     *\n     * If not provided, defaults to default page size.\n     * @returns MoveResource\n     * @throws ApiError\n     */\n    public getAccountResources(\n        address: Address,\n        ledgerVersion?: U64,\n        start?: StateKeyWrapper,\n        limit?: number,\n    ): CancelablePromise<Array<MoveResource>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/resources',\n            path: {\n                'address': address,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Get account modules\n     * Retrieves all account modules' bytecode for a given account at a specific ledger version.\n     * If the ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @param start Cursor specifying where to start for pagination\n     *\n     * This cursor cannot be derived manually client-side. Instead, you must\n     * call this endpoint once without this query parameter specified, and\n     * then use the cursor returned in the X-Aptos-Cursor header in the\n     * response.\n     * @param limit Max number of account modules to retrieve\n     *\n     * If not provided, defaults to default page size.\n     * @returns MoveModuleBytecode\n     * @throws ApiError\n     */\n    public getAccountModules(\n        address: Address,\n        ledgerVersion?: U64,\n        start?: StateKeyWrapper,\n        limit?: number,\n    ): CancelablePromise<Array<MoveModuleBytecode>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/modules',\n            path: {\n                'address': address,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Get account resource\n     * Retrieves an individual resource from a given account and at a specific ledger version. If the\n     * ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param resourceType Name of struct to retrieve e.g. `0x1::account::Account`\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveResource\n     * @throws ApiError\n     */\n    public getAccountResource(\n        address: Address,\n        resourceType: MoveStructTag,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveResource> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/resource/{resource_type}',\n            path: {\n                'address': address,\n                'resource_type': resourceType,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n        });\n    }\n\n    /**\n     * Get account module\n     * Retrieves an individual module from a given account and at a specific ledger version. If the\n     * ledger version is not specified in the request, the latest ledger version is used.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param address Address of account with or without a `0x` prefix\n     * @param moduleName Name of module to retrieve e.g. `coin`\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveModuleBytecode\n     * @throws ApiError\n     */\n    public getAccountModule(\n        address: Address,\n        moduleName: IdentifierWrapper,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveModuleBytecode> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/module/{module_name}',\n            path: {\n                'address': address,\n                'module_name': moduleName,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Block } from '../models/Block';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class BlocksService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get blocks by height\n     * This endpoint allows you to get the transactions in a block\n     * and the corresponding block information.\n     *\n     * Transactions are limited by max default transactions size.  If not all transactions\n     * are present, the user will need to query for the rest of the transactions via the\n     * get transactions API.\n     *\n     * If the block is pruned, it will return a 410\n     * @param blockHeight Block height to lookup.  Starts at 0\n     * @param withTransactions If set to true, include all transactions in the block\n     *\n     * If not provided, no transactions will be retrieved\n     * @returns Block\n     * @throws ApiError\n     */\n    public getBlockByHeight(\n        blockHeight: number,\n        withTransactions?: boolean,\n    ): CancelablePromise<Block> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/blocks/by_height/{block_height}',\n            path: {\n                'block_height': blockHeight,\n            },\n            query: {\n                'with_transactions': withTransactions,\n            },\n        });\n    }\n\n    /**\n     * Get blocks by version\n     * This endpoint allows you to get the transactions in a block\n     * and the corresponding block information given a version in the block.\n     *\n     * Transactions are limited by max default transactions size.  If not all transactions\n     * are present, the user will need to query for the rest of the transactions via the\n     * get transactions API.\n     *\n     * If the block has been pruned, it will return a 410\n     * @param version Ledger version to lookup block information for.\n     * @param withTransactions If set to true, include all transactions in the block\n     *\n     * If not provided, no transactions will be retrieved\n     * @returns Block\n     * @throws ApiError\n     */\n    public getBlockByVersion(\n        version: number,\n        withTransactions?: boolean,\n    ): CancelablePromise<Block> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/blocks/by_version/{version}',\n            path: {\n                'version': version,\n            },\n            query: {\n                'with_transactions': withTransactions,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Address } from '../models/Address';\nimport type { IdentifierWrapper } from '../models/IdentifierWrapper';\nimport type { MoveStructTag } from '../models/MoveStructTag';\nimport type { U64 } from '../models/U64';\nimport type { VersionedEvent } from '../models/VersionedEvent';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class EventsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get events by creation number\n     * Event types are globally identifiable by an account `address` and\n     * monotonically increasing `creation_number`, one per event type emitted\n     * to the given account. This API returns events corresponding to that\n     * that event type.\n     * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix, for\n     * which events are queried. This refers to the account that events were\n     * emitted to, not the account hosting the move module that emits that\n     * event type.\n     * @param creationNumber Creation number corresponding to the event stream originating\n     * from the given account.\n     * @param start Starting sequence number of events.\n     *\n     * If unspecified, by default will retrieve the most recent events\n     * @param limit Max number of events to retrieve.\n     *\n     * If unspecified, defaults to default page size\n     * @returns VersionedEvent\n     * @throws ApiError\n     */\n    public getEventsByCreationNumber(\n        address: Address,\n        creationNumber: U64,\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<VersionedEvent>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/events/{creation_number}',\n            path: {\n                'address': address,\n                'creation_number': creationNumber,\n            },\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Get events by event handle\n     * This API uses the given account `address`, `eventHandle`, and `fieldName`\n     * to build a key that can globally identify an event types. It then uses this\n     * key to return events emitted to the given account matching that event type.\n     * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix, for\n     * which events are queried. This refers to the account that events were\n     * emitted to, not the account hosting the move module that emits that\n     * event type.\n     * @param eventHandle Name of struct to lookup event handle e.g. `0x1::account::Account`\n     * @param fieldName Name of field to lookup event handle e.g. `withdraw_events`\n     * @param start Starting sequence number of events.\n     *\n     * If unspecified, by default will retrieve the most recent\n     * @param limit Max number of events to retrieve.\n     *\n     * If unspecified, defaults to default page size\n     * @returns VersionedEvent\n     * @throws ApiError\n     */\n    public getEventsByEventHandle(\n        address: Address,\n        eventHandle: MoveStructTag,\n        fieldName: IdentifierWrapper,\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<VersionedEvent>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/events/{event_handle}/{field_name}',\n            path: {\n                'address': address,\n                'event_handle': eventHandle,\n                'field_name': fieldName,\n            },\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { HealthCheckSuccess } from '../models/HealthCheckSuccess';\nimport type { IndexResponse } from '../models/IndexResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class GeneralService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Show OpenAPI explorer\n     * Provides a UI that you can use to explore the API. You can also\n     * retrieve the API directly at `/spec.yaml` and `/spec.json`.\n     * @returns string\n     * @throws ApiError\n     */\n    public spec(): CancelablePromise<string> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/spec',\n        });\n    }\n\n    /**\n     * Check basic node health\n     * By default this endpoint just checks that it can get the latest ledger\n     * info and then returns 200.\n     *\n     * If the duration_secs param is provided, this endpoint will return a\n     * 200 if the following condition is true:\n     *\n     * `server_latest_ledger_info_timestamp >= server_current_time_timestamp - duration_secs`\n     * @param durationSecs Threshold in seconds that the server can be behind to be considered healthy\n     *\n     * If not provided, the healthcheck will always succeed\n     * @returns HealthCheckSuccess\n     * @throws ApiError\n     */\n    public healthy(\n        durationSecs?: number,\n    ): CancelablePromise<HealthCheckSuccess> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/-/healthy',\n            query: {\n                'duration_secs': durationSecs,\n            },\n        });\n    }\n\n    /**\n     * Get ledger info\n     * Get the latest ledger information, including data such as chain ID,\n     * role type, ledger versions, epoch, etc.\n     * @returns IndexResponse\n     * @throws ApiError\n     */\n    public getLedgerInfo(): CancelablePromise<IndexResponse> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Address } from '../models/Address';\nimport type { MoveValue } from '../models/MoveValue';\nimport type { RawTableItemRequest } from '../models/RawTableItemRequest';\nimport type { TableItemRequest } from '../models/TableItemRequest';\nimport type { U64 } from '../models/U64';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class TablesService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get table item\n     * Get a table item at a specific ledger version from the table identified by {table_handle}\n     * in the path and the \"key\" (TableItemRequest) provided in the request body.\n     *\n     * This is a POST endpoint because the \"key\" for requesting a specific\n     * table item (TableItemRequest) could be quite complex, as each of its\n     * fields could themselves be composed of other structs. This makes it\n     * impractical to express using query params, meaning GET isn't an option.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param tableHandle Table handle hex encoded 32-byte string\n     * @param requestBody\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveValue\n     * @throws ApiError\n     */\n    public getTableItem(\n        tableHandle: Address,\n        requestBody: TableItemRequest,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveValue> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/tables/{table_handle}/item',\n            path: {\n                'table_handle': tableHandle,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Get raw table item\n     * Get a table item at a specific ledger version from the table identified by {table_handle}\n     * in the path and the \"key\" (RawTableItemRequest) provided in the request body.\n     *\n     * The `get_raw_table_item` requires only a serialized key comparing to the full move type information\n     * comparing to the `get_table_item` api, and can only return the query in the bcs format.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param tableHandle Table handle hex encoded 32-byte string\n     * @param requestBody\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveValue\n     * @throws ApiError\n     */\n    public getRawTableItem(\n        tableHandle: Address,\n        requestBody: RawTableItemRequest,\n        ledgerVersion?: U64,\n    ): CancelablePromise<MoveValue> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/tables/{table_handle}/raw_item',\n            path: {\n                'table_handle': tableHandle,\n            },\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Address } from '../models/Address';\nimport type { EncodeSubmissionRequest } from '../models/EncodeSubmissionRequest';\nimport type { GasEstimation } from '../models/GasEstimation';\nimport type { HashValue } from '../models/HashValue';\nimport type { HexEncodedBytes } from '../models/HexEncodedBytes';\nimport type { PendingTransaction } from '../models/PendingTransaction';\nimport type { SubmitTransactionRequest } from '../models/SubmitTransactionRequest';\nimport type { Transaction } from '../models/Transaction';\nimport type { TransactionsBatchSubmissionResult } from '../models/TransactionsBatchSubmissionResult';\nimport type { U64 } from '../models/U64';\nimport type { UserTransaction } from '../models/UserTransaction';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class TransactionsService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Get transactions\n     * Retrieve on-chain committed transactions. The page size and start ledger version\n     * can be provided to get a specific sequence of transactions.\n     *\n     * If the version has been pruned, then a 410 will be returned.\n     *\n     * To retrieve a pending transaction, use /transactions/by_hash.\n     * @param start Ledger version to start list of transactions\n     *\n     * If not provided, defaults to showing the latest transactions\n     * @param limit Max number of transactions to retrieve.\n     *\n     * If not provided, defaults to default page size\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getTransactions(\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<Transaction>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/transactions',\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Submit transaction\n     * This endpoint accepts transaction submissions in two formats.\n     *\n     * To submit a transaction as JSON, you must submit a SubmitTransactionRequest.\n     * To build this request, do the following:\n     *\n     * 1. Encode the transaction as BCS. If you are using a language that has\n     * native BCS support, make sure of that library. If not, you may take\n     * advantage of /transactions/encode_submission. When using this\n     * endpoint, make sure you trust the node you're talking to, as it is\n     * possible they could manipulate your request.\n     * 2. Sign the encoded transaction and use it to create a TransactionSignature.\n     * 3. Submit the request. Make sure to use the \"application/json\" Content-Type.\n     *\n     * To submit a transaction as BCS, you must submit a SignedTransaction\n     * encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs.\n     * Make sure to use the `application/x.aptos.signed_transaction+bcs` Content-Type.\n     * @param requestBody\n     * @returns PendingTransaction\n     * @throws ApiError\n     */\n    public submitTransaction(\n        requestBody: SubmitTransactionRequest,\n    ): CancelablePromise<PendingTransaction> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Get transaction by hash\n     * Look up a transaction by its hash. This is the same hash that is returned\n     * by the API when submitting a transaction (see PendingTransaction).\n     *\n     * When given a transaction hash, the server first looks for the transaction\n     * in storage (on-chain, committed). If no on-chain transaction is found, it\n     * looks the transaction up by hash in the mempool (pending, not yet committed).\n     *\n     * To create a transaction hash by yourself, do the following:\n     * 1. Hash message bytes: \"RawTransaction\" bytes + BCS bytes of [Transaction](https://aptos-labs.github.io/aptos-core/aptos_types/transaction/enum.Transaction.html).\n     * 2. Apply hash algorithm `SHA3-256` to the hash message bytes.\n     * 3. Hex-encode the hash bytes with `0x` prefix.\n     * @param txnHash Hash of transaction to retrieve\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getTransactionByHash(\n        txnHash: HashValue,\n    ): CancelablePromise<Transaction> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/transactions/by_hash/{txn_hash}',\n            path: {\n                'txn_hash': txnHash,\n            },\n        });\n    }\n\n    /**\n     * Get transaction by version\n     * Retrieves a transaction by a given version. If the version has been\n     * pruned, a 410 will be returned.\n     * @param txnVersion Version of transaction to retrieve\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getTransactionByVersion(\n        txnVersion: U64,\n    ): CancelablePromise<Transaction> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/transactions/by_version/{txn_version}',\n            path: {\n                'txn_version': txnVersion,\n            },\n        });\n    }\n\n    /**\n     * Get account transactions\n     * Retrieves on-chain committed transactions from an account. If the start\n     * version is too far in the past, a 410 will be returned.\n     *\n     * If no start version is given, it will start at version 0.\n     *\n     * To retrieve a pending transaction, use /transactions/by_hash.\n     * @param address Address of account with or without a `0x` prefix\n     * @param start Account sequence number to start list of transactions\n     *\n     * If not provided, defaults to showing the latest transactions\n     * @param limit Max number of transactions to retrieve.\n     *\n     * If not provided, defaults to default page size\n     * @returns Transaction\n     * @throws ApiError\n     */\n    public getAccountTransactions(\n        address: Address,\n        start?: U64,\n        limit?: number,\n    ): CancelablePromise<Array<Transaction>> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/accounts/{address}/transactions',\n            path: {\n                'address': address,\n            },\n            query: {\n                'start': start,\n                'limit': limit,\n            },\n        });\n    }\n\n    /**\n     * Submit batch transactions\n     * This allows you to submit multiple transactions.  The response has three outcomes:\n     *\n     * 1. All transactions succeed, and it will return a 202\n     * 2. Some transactions succeed, and it will return the failed transactions and a 206\n     * 3. No transactions succeed, and it will also return the failed transactions and a 206\n     *\n     * To submit a transaction as JSON, you must submit a SubmitTransactionRequest.\n     * To build this request, do the following:\n     *\n     * 1. Encode the transaction as BCS. If you are using a language that has\n     * native BCS support, make sure to use that library. If not, you may take\n     * advantage of /transactions/encode_submission. When using this\n     * endpoint, make sure you trust the node you're talking to, as it is\n     * possible they could manipulate your request.\n     * 2. Sign the encoded transaction and use it to create a TransactionSignature.\n     * 3. Submit the request. Make sure to use the \"application/json\" Content-Type.\n     *\n     * To submit a transaction as BCS, you must submit a SignedTransaction\n     * encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs.\n     * Make sure to use the `application/x.aptos.signed_transaction+bcs` Content-Type.\n     * @param requestBody\n     * @returns TransactionsBatchSubmissionResult\n     * @throws ApiError\n     */\n    public submitBatchTransactions(\n        requestBody: Array<SubmitTransactionRequest>,\n    ): CancelablePromise<TransactionsBatchSubmissionResult> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions/batch',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Simulate transaction\n     * The output of the transaction will have the exact transaction outputs and events that running\n     * an actual signed transaction would have.  However, it will not have the associated state\n     * hashes, as they are not updated in storage.  This can be used to estimate the maximum gas\n     * units for a submitted transaction.\n     *\n     * To use this, you must:\n     * - Create a SignedTransaction with a zero-padded signature.\n     * - Submit a SubmitTransactionRequest containing a UserTransactionRequest containing that signature.\n     *\n     * To use this endpoint with BCS, you must submit a SignedTransaction\n     * encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs.\n     * @param requestBody\n     * @param estimateMaxGasAmount If set to true, the max gas value in the transaction will be ignored\n     * and the maximum possible gas will be used\n     * @param estimateGasUnitPrice If set to true, the gas unit price in the transaction will be ignored\n     * and the estimated value will be used\n     * @param estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the original\n     * estimate.\n     * @returns UserTransaction\n     * @throws ApiError\n     */\n    public simulateTransaction(\n        requestBody: SubmitTransactionRequest,\n        estimateMaxGasAmount?: boolean,\n        estimateGasUnitPrice?: boolean,\n        estimatePrioritizedGasUnitPrice?: boolean,\n    ): CancelablePromise<Array<UserTransaction>> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions/simulate',\n            query: {\n                'estimate_max_gas_amount': estimateMaxGasAmount,\n                'estimate_gas_unit_price': estimateGasUnitPrice,\n                'estimate_prioritized_gas_unit_price': estimatePrioritizedGasUnitPrice,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Encode submission\n     * This endpoint accepts an EncodeSubmissionRequest, which internally is a\n     * UserTransactionRequestInner (and optionally secondary signers) encoded\n     * as JSON, validates the request format, and then returns that request\n     * encoded in BCS. The client can then use this to create a transaction\n     * signature to be used in a SubmitTransactionRequest, which it then\n     * passes to the /transactions POST endpoint.\n     *\n     * To be clear, this endpoint makes it possible to submit transaction\n     * requests to the API from languages that do not have library support for\n     * BCS. If you are using an SDK that has BCS support, such as the official\n     * Rust, TypeScript, or Python SDKs, you do not need to use this endpoint.\n     *\n     * To sign a message using the response from this endpoint:\n     * - Decode the hex encoded string in the response to bytes.\n     * - Sign the bytes to create the signature.\n     * - Use that as the signature field in something like Ed25519Signature, which you then use to build a TransactionSignature.\n     * @param requestBody\n     * @returns HexEncodedBytes\n     * @throws ApiError\n     */\n    public encodeSubmission(\n        requestBody: EncodeSubmissionRequest,\n    ): CancelablePromise<HexEncodedBytes> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/transactions/encode_submission',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Estimate gas price\n     * Currently, the gas estimation is handled by taking the median of the last 100,000 transactions\n     * If a user wants to prioritize their transaction and is willing to pay, they can pay more\n     * than the gas price.  If they're willing to wait longer, they can pay less.  Note that the\n     * gas price moves with the fee market, and should only increase when demand outweighs supply.\n     *\n     * If there have been no transactions in the last 100,000 transactions, the price will be 1.\n     * @returns GasEstimation\n     * @throws ApiError\n     */\n    public estimateGasPrice(): CancelablePromise<GasEstimation> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/estimate_gas_price',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { MoveValue } from '../models/MoveValue';\nimport type { U64 } from '../models/U64';\nimport type { ViewRequest } from '../models/ViewRequest';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class ViewService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Execute view function of a module\n     * Execute the Move function with the given parameters and return its execution result.\n     *\n     * The Aptos nodes prune account state history, via a configurable time window.\n     * If the requested ledger version has been pruned, the server responds with a 410.\n     * @param requestBody\n     * @param ledgerVersion Ledger version to get state of account\n     *\n     * If not provided, it will be the latest version\n     * @returns MoveValue\n     * @throws ApiError\n     */\n    public view(\n        requestBody: ViewRequest,\n        ledgerVersion?: U64,\n    ): CancelablePromise<Array<MoveValue>> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/view',\n            query: {\n                'ledger_version': ledgerVersion,\n            },\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { AxiosHttpRequest } from './core/AxiosHttpRequest';\n\nimport { AccountsService } from './services/AccountsService';\nimport { BlocksService } from './services/BlocksService';\nimport { EventsService } from './services/EventsService';\nimport { GeneralService } from './services/GeneralService';\nimport { TablesService } from './services/TablesService';\nimport { TransactionsService } from './services/TransactionsService';\nimport { ViewService } from './services/ViewService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class AptosGeneratedClient {\n\n    public readonly accounts: AccountsService;\n    public readonly blocks: BlocksService;\n    public readonly events: EventsService;\n    public readonly general: GeneralService;\n    public readonly tables: TablesService;\n    public readonly transactions: TransactionsService;\n    public readonly view: ViewService;\n\n    public readonly request: BaseHttpRequest;\n\n    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = AxiosHttpRequest) {\n        this.request = new HttpRequest({\n            BASE: config?.BASE ?? '/v1',\n            VERSION: config?.VERSION ?? '1.2.0',\n            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n            CREDENTIALS: config?.CREDENTIALS ?? 'include',\n            TOKEN: config?.TOKEN,\n            USERNAME: config?.USERNAME,\n            PASSWORD: config?.PASSWORD,\n            HEADERS: config?.HEADERS,\n            ENCODE_PATH: config?.ENCODE_PATH,\n        });\n\n        this.accounts = new AccountsService(this.request);\n        this.blocks = new BlocksService(this.request);\n        this.events = new EventsService(this.request);\n        this.general = new GeneralService(this.request);\n        this.tables = new TablesService(this.request);\n        this.transactions = new TransactionsService(this.request);\n        this.view = new ViewService(this.request);\n    }\n}\n\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n    BASE: string;\n    VERSION: string;\n    WITH_CREDENTIALS: boolean;\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\n    TOKEN?: string | Resolver<string>;\n    USERNAME?: string | Resolver<string>;\n    PASSWORD?: string | Resolver<string>;\n    HEADERS?: Headers | Resolver<Headers>;\n    ENCODE_PATH?: (path: string) => string;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n    BASE: '/v1',\n    VERSION: '1.2.0',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * These codes provide more granular error information beyond just the HTTP\n * status code of the response.\n */\nexport enum AptosErrorCode {\n    ACCOUNT_NOT_FOUND = 'account_not_found',\n    RESOURCE_NOT_FOUND = 'resource_not_found',\n    MODULE_NOT_FOUND = 'module_not_found',\n    STRUCT_FIELD_NOT_FOUND = 'struct_field_not_found',\n    VERSION_NOT_FOUND = 'version_not_found',\n    TRANSACTION_NOT_FOUND = 'transaction_not_found',\n    TABLE_ITEM_NOT_FOUND = 'table_item_not_found',\n    BLOCK_NOT_FOUND = 'block_not_found',\n    VERSION_PRUNED = 'version_pruned',\n    BLOCK_PRUNED = 'block_pruned',\n    INVALID_INPUT = 'invalid_input',\n    INVALID_TRANSACTION_UPDATE = 'invalid_transaction_update',\n    SEQUENCE_NUMBER_TOO_OLD = 'sequence_number_too_old',\n    VM_ERROR = 'vm_error',\n    HEALTH_CHECK_FAILED = 'health_check_failed',\n    MEMPOOL_IS_FULL = 'mempool_is_full',\n    INTERNAL_ERROR = 'internal_error',\n    WEB_FRAMEWORK_ERROR = 'web_framework_error',\n    BCS_NOT_SUPPORTED = 'bcs_not_supported',\n    API_DISABLED = 'api_disabled',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * Move function visibility\n */\nexport enum MoveFunctionVisibility {\n    PRIVATE = 'private',\n    PUBLIC = 'public',\n    FRIEND = 'friend',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport enum RoleType {\n    VALIDATOR = 'validator',\n    FULL_NODE = 'full_node',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountData = {\n    description: `Account data\n\n    A simplified version of the onchain Account resource`,\n    properties: {\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        authentication_key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountSignature = {\n    type: 'one-of',\n    description: `Account signature scheme\n\n    The account signature scheme allows you to have two types of accounts:\n\n    1. A single Ed25519 key account, one private key\n    2. A k-of-n multi-Ed25519 key account, multiple private keys, such that k-of-n must sign a transaction.`,\n    contains: [{\n        type: 'AccountSignature_Ed25519Signature',\n    }, {\n        type: 'AccountSignature_MultiEd25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountSignature_Ed25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'Ed25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AccountSignature_MultiEd25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'MultiEd25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Address = {\n    type: 'string',\n    description: `A hex encoded 32 byte Aptos account address.\n\n    This is represented in a string as a 64 character hex string, sometimes\n    shortened by stripping leading 0s, and adding a 0x.\n\n    For example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n    `,\n    format: 'hex',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AptosError = {\n    description: `This is the generic struct we use for all API errors, it contains a string\n    message and an Aptos API specific error code.`,\n    properties: {\n        message: {\n            type: 'string',\n            description: `A message describing the error`,\n            isRequired: true,\n        },\n        error_code: {\n            type: 'AptosErrorCode',\n            isRequired: true,\n        },\n        vm_error_code: {\n            type: 'number',\n            description: `A code providing VM error details when submitting transactions to the VM`,\n            format: 'uint64',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AptosErrorCode = {\n    type: 'Enum',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Block = {\n    description: `A Block with or without transactions\n\n    This contains the information about a transactions along with\n    associated transactions if requested`,\n    properties: {\n        block_height: {\n            type: 'U64',\n            isRequired: true,\n        },\n        block_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        block_timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n        first_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        last_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        transactions: {\n            type: 'array',\n            contains: {\n                type: 'Transaction',\n            },\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $BlockMetadataTransaction = {\n    description: `A block metadata transaction\n\n    This signifies the beginning of a block, and contains information\n    about the specific block`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        id: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        epoch: {\n            type: 'U64',\n            isRequired: true,\n        },\n        round: {\n            type: 'U64',\n            isRequired: true,\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n        previous_block_votes_bitvec: {\n            type: 'array',\n            contains: {\n                type: 'number',\n                format: 'uint8',\n            },\n            isRequired: true,\n        },\n        proposer: {\n            type: 'Address',\n            isRequired: true,\n        },\n        failed_proposer_indices: {\n            type: 'array',\n            contains: {\n                type: 'number',\n                format: 'uint32',\n            },\n            isRequired: true,\n        },\n        timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DecodedTableData = {\n    description: `Decoded table data`,\n    properties: {\n        key: {\n            description: `Key of table in JSON`,\n            properties: {\n            },\n            isRequired: true,\n        },\n        key_type: {\n            type: 'string',\n            description: `Type of key`,\n            isRequired: true,\n        },\n        value: {\n            description: `Value of table in JSON`,\n            properties: {\n            },\n            isRequired: true,\n        },\n        value_type: {\n            type: 'string',\n            description: `Type of value`,\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeletedTableData = {\n    description: `Deleted table data`,\n    properties: {\n        key: {\n            description: `Deleted key`,\n            properties: {\n            },\n            isRequired: true,\n        },\n        key_type: {\n            type: 'string',\n            description: `Deleted key type`,\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeleteModule = {\n    description: `Delete a module`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        module: {\n            type: 'MoveModuleId',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeleteResource = {\n    description: `Delete a resource`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        resource: {\n            type: 'MoveStructTag',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DeleteTableItem = {\n    description: `Delete a table item`,\n    properties: {\n        state_key_hash: {\n            type: 'string',\n            isRequired: true,\n        },\n        handle: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        data: {\n            type: 'DeletedTableData',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $DirectWriteSet = {\n    properties: {\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Ed25519Signature = {\n    description: `A single Ed25519 signature`,\n    properties: {\n        public_key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        signature: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EncodeSubmissionRequest = {\n    description: `Request to encode a submission`,\n    properties: {\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        secondary_signers: {\n            type: 'array',\n            contains: {\n                type: 'Address',\n            },\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EntryFunctionId = {\n    type: 'string',\n    description: `Entry function id is string representation of a entry function defined on-chain.\n\n    Format: \\`{address}::{module name}::{function name}\\`\n\n    Both \\`module name\\` and \\`function name\\` are case-sensitive.\n    `,\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EntryFunctionPayload = {\n    description: `Payload which runs a single entry function`,\n    properties: {\n        function: {\n            type: 'EntryFunctionId',\n            isRequired: true,\n        },\n        type_arguments: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        arguments: {\n            type: 'array',\n            contains: {\n                properties: {\n                },\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Event = {\n    description: `An event from a transaction`,\n    properties: {\n        guid: {\n            type: 'EventGuid',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        data: {\n            description: `The JSON representation of the event`,\n            properties: {\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $EventGuid = {\n    properties: {\n        creation_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        account_address: {\n            type: 'Address',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GasEstimation = {\n    description: `Struct holding the outputs of the estimate gas API`,\n    properties: {\n        deprioritized_gas_estimate: {\n            type: 'number',\n            description: `The deprioritized estimate for the gas unit price`,\n            format: 'uint64',\n        },\n        gas_estimate: {\n            type: 'number',\n            description: `The current estimate for the gas unit price`,\n            isRequired: true,\n            format: 'uint64',\n        },\n        prioritized_gas_estimate: {\n            type: 'number',\n            description: `The prioritized estimate for the gas unit price`,\n            format: 'uint64',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GenesisPayload = {\n    type: 'one-of',\n    description: `The writeset payload of the Genesis transaction`,\n    contains: [{\n        type: 'GenesisPayload_WriteSetPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GenesisPayload_WriteSetPayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteSetPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $GenesisTransaction = {\n    description: `The genesis transaction\n\n    This only occurs at the genesis transaction (version 0)`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        payload: {\n            type: 'GenesisPayload',\n            isRequired: true,\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $HashValue = {\n    type: 'string',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $HealthCheckSuccess = {\n    description: `Representation of a successful healthcheck`,\n    properties: {\n        message: {\n            type: 'string',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $HexEncodedBytes = {\n    type: 'string',\n    description: `All bytes (Vec<u8>) data is represented as hex-encoded string prefixed with \\`0x\\` and fulfilled with\n    two hex digits per byte.\n\n    Unlike the \\`Address\\` type, HexEncodedBytes will not trim any zeros.\n    `,\n    format: 'hex',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $IdentifierWrapper = {\n    type: 'string',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $IndexResponse = {\n    description: `The struct holding all data returned to the client by the\n    index endpoint (i.e., GET \"/\").  Only for responding in JSON`,\n    properties: {\n        chain_id: {\n            type: 'number',\n            description: `Chain ID of the current chain`,\n            isRequired: true,\n            format: 'uint8',\n        },\n        epoch: {\n            type: 'U64',\n            isRequired: true,\n        },\n        ledger_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        oldest_ledger_version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        ledger_timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n        node_role: {\n            type: 'RoleType',\n            isRequired: true,\n        },\n        oldest_block_height: {\n            type: 'U64',\n            isRequired: true,\n        },\n        block_height: {\n            type: 'U64',\n            isRequired: true,\n        },\n        git_hash: {\n            type: 'string',\n            description: `Git hash of the build of the API endpoint.  Can be used to determine the exact\n            software version used by the API endpoint.`,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ModuleBundlePayload = {\n    properties: {\n        modules: {\n            type: 'array',\n            contains: {\n                type: 'MoveModuleBytecode',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveAbility = {\n    type: 'string',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveFunction = {\n    description: `Move function`,\n    properties: {\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        visibility: {\n            type: 'MoveFunctionVisibility',\n            isRequired: true,\n        },\n        is_entry: {\n            type: 'boolean',\n            description: `Whether the function can be called as an entry function directly in a transaction`,\n            isRequired: true,\n        },\n        is_view: {\n            type: 'boolean',\n            description: `Whether the function is a view function or not`,\n            isRequired: true,\n        },\n        generic_type_params: {\n            type: 'array',\n            contains: {\n                type: 'MoveFunctionGenericTypeParam',\n            },\n            isRequired: true,\n        },\n        params: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        return: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveFunctionGenericTypeParam = {\n    description: `Move function generic type param`,\n    properties: {\n        constraints: {\n            type: 'array',\n            contains: {\n                type: 'MoveAbility',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveFunctionVisibility = {\n    type: 'Enum',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveModule = {\n    description: `A Move module`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        friends: {\n            type: 'array',\n            contains: {\n                type: 'MoveModuleId',\n            },\n            isRequired: true,\n        },\n        exposed_functions: {\n            type: 'array',\n            contains: {\n                type: 'MoveFunction',\n            },\n            isRequired: true,\n        },\n        structs: {\n            type: 'array',\n            contains: {\n                type: 'MoveStruct',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveModuleBytecode = {\n    description: `Move module bytecode along with it's ABI`,\n    properties: {\n        bytecode: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        abi: {\n            type: 'MoveModule',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveModuleId = {\n    type: 'string',\n    description: `Move module id is a string representation of Move module.\n\n    Format: \\`{address}::{module name}\\`\n\n    \\`address\\` should be hex-encoded 32 byte account address that is prefixed with \\`0x\\`.\n\n    Module name is case-sensitive.\n    `,\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveResource = {\n    description: `A parsed Move resource`,\n    properties: {\n        type: {\n            type: 'MoveStructTag',\n            isRequired: true,\n        },\n        data: {\n            type: 'MoveStructValue',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveScriptBytecode = {\n    description: `Move script bytecode`,\n    properties: {\n        bytecode: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        abi: {\n            type: 'MoveFunction',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStruct = {\n    description: `A move struct`,\n    properties: {\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        is_native: {\n            type: 'boolean',\n            description: `Whether the struct is a native struct of Move`,\n            isRequired: true,\n        },\n        abilities: {\n            type: 'array',\n            contains: {\n                type: 'MoveAbility',\n            },\n            isRequired: true,\n        },\n        generic_type_params: {\n            type: 'array',\n            contains: {\n                type: 'MoveStructGenericTypeParam',\n            },\n            isRequired: true,\n        },\n        fields: {\n            type: 'array',\n            contains: {\n                type: 'MoveStructField',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructField = {\n    description: `Move struct field`,\n    properties: {\n        name: {\n            type: 'IdentifierWrapper',\n            isRequired: true,\n        },\n        type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructGenericTypeParam = {\n    description: `Move generic type param`,\n    properties: {\n        constraints: {\n            type: 'array',\n            contains: {\n                type: 'MoveAbility',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructTag = {\n    type: 'string',\n    description: `String representation of a MoveStructTag (on-chain Move struct type). This exists so you\n    can specify MoveStructTags as path / query parameters, e.g. for get_events_by_event_handle.\n\n    It is a combination of:\n    1. \\`move_module_address\\`, \\`module_name\\` and \\`struct_name\\`, all joined by \\`::\\`\n    2. \\`struct generic type parameters\\` joined by \\`, \\`\n\n    Examples:\n     * \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\\`\n     * \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\n    See [doc](https://aptos.dev/concepts/accounts) for more details.\n    `,\n    pattern: '^0x[0-9a-zA-Z:_<>]+$',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveStructValue = {\n    description: `This is a JSON representation of some data within an account resource. More specifically,\n    it is a map of strings to arbitrary JSON values / objects, where the keys are top level\n    fields within the given resource.\n\n    To clarify, you might query for 0x1::account::Account and see the example data.\n\n    Move \\`bool\\` type value is serialized into \\`boolean\\`.\n\n    Move \\`u8\\`, \\`u16\\` and \\`u32\\` type value is serialized into \\`integer\\`.\n\n    Move \\`u64\\`, \\`u128\\` and \\`u256\\` type value is serialized into \\`string\\`.\n\n    Move \\`address\\` type value (32 byte Aptos account address) is serialized into a HexEncodedBytes string.\n    For example:\n    - \\`0x1\\`\n    - \\`0x1668f6be25668c1a17cd8caf6b8d2f25\\`\n\n    Move \\`vector\\` type value is serialized into \\`array\\`, except \\`vector<u8>\\` which is serialized into a\n    HexEncodedBytes string with \\`0x\\` prefix.\n    For example:\n    - \\`vector<u64>{255, 255}\\` => \\`[\"255\", \"255\"]\\`\n    - \\`vector<u8>{255, 255}\\` => \\`0xffff\\`\n\n    Move \\`struct\\` type value is serialized into \\`object\\` that looks like this (except some Move stdlib types, see the following section):\n    \\`\\`\\`json\n    {\n        field1_name: field1_value,\n        field2_name: field2_value,\n        ......\n    }\n    \\`\\`\\`\n\n    For example:\n    \\`{ \"created\": \"0xa550c18\", \"role_id\": \"0\" }\\`\n\n     **Special serialization for Move stdlib types**:\n    - [0x1::string::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ascii.md)\n    is serialized into \\`string\\`. For example, struct value \\`0x1::string::String{bytes: b\"Hello World!\"}\\`\n    is serialized as \\`\"Hello World!\"\\` in JSON.\n    `,\n    properties: {\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveType = {\n    type: 'string',\n    description: `String representation of an on-chain Move type tag that is exposed in transaction payload.\n    Values:\n    - bool\n    - u8\n    - u16\n    - u32\n    - u64\n    - u128\n    - u256\n    - address\n    - signer\n    - vector: \\`vector<{non-reference MoveTypeId}>\\`\n    - struct: \\`{address}::{module_name}::{struct_name}::<{generic types}>\\`\n\n    Vector type value examples:\n    - \\`vector<u8>\\`\n    - \\`vector<vector<u64>>\\`\n    - \\`vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>\\`\n\n    Struct type value examples:\n    - \\`0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n    - \\`0x1::account::Account\\`\n\n    Note:\n    1. Empty chars should be ignored when comparing 2 struct tag ids.\n    2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n    `,\n    pattern: '^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MoveValue = {\n    type: 'any-of',\n    description: `An enum of the possible Move value types`,\n    contains: [{\n        type: 'number',\n        format: 'uint8',\n    }, {\n        type: 'number',\n        format: 'uint16',\n    }, {\n        type: 'number',\n        format: 'uint32',\n    }, {\n        type: 'U64',\n    }, {\n        type: 'U128',\n    }, {\n        type: 'U256',\n    }, {\n        type: 'boolean',\n    }, {\n        type: 'Address',\n    }, {\n        type: 'array',\n        contains: {\n            type: 'MoveValue',\n        },\n    }, {\n        type: 'HexEncodedBytes',\n    }, {\n        type: 'MoveStructValue',\n    }, {\n        type: 'string',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MultiAgentSignature = {\n    description: `Multi agent signature for multi agent transactions\n\n    This allows you to have transactions across multiple accounts`,\n    properties: {\n        sender: {\n            type: 'AccountSignature',\n            isRequired: true,\n        },\n        secondary_signer_addresses: {\n            type: 'array',\n            contains: {\n                type: 'Address',\n            },\n            isRequired: true,\n        },\n        secondary_signers: {\n            type: 'array',\n            contains: {\n                type: 'AccountSignature',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MultiEd25519Signature = {\n    description: `A Ed25519 multi-sig signature\n\n    This allows k-of-n signing for a transaction`,\n    properties: {\n        public_keys: {\n            type: 'array',\n            contains: {\n                type: 'HexEncodedBytes',\n            },\n            isRequired: true,\n        },\n        signatures: {\n            type: 'array',\n            contains: {\n                type: 'HexEncodedBytes',\n            },\n            isRequired: true,\n        },\n        threshold: {\n            type: 'number',\n            description: `The number of signatures required for a successful transaction`,\n            isRequired: true,\n            format: 'uint8',\n        },\n        bitmap: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MultisigPayload = {\n    description: `A multisig transaction that allows an owner of a multisig account to execute a pre-approved\n    transaction as the multisig account.`,\n    properties: {\n        multisig_address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        transaction_payload: {\n            type: 'MultisigTransactionPayload',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $MultisigTransactionPayload = {\n    type: 'any-of',\n    contains: [{\n        type: 'EntryFunctionPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $PendingTransaction = {\n    description: `A transaction waiting in mempool`,\n    properties: {\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        signature: {\n            type: 'TransactionSignature',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $RawTableItemRequest = {\n    description: `Table Item request for the GetTableItemRaw API`,\n    properties: {\n        key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $RoleType = {\n    type: 'Enum',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ScriptPayload = {\n    description: `Payload which runs a script that can run multiple functions`,\n    properties: {\n        code: {\n            type: 'MoveScriptBytecode',\n            isRequired: true,\n        },\n        type_arguments: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        arguments: {\n            type: 'array',\n            contains: {\n                properties: {\n                },\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ScriptWriteSet = {\n    properties: {\n        execute_as: {\n            type: 'Address',\n            isRequired: true,\n        },\n        script: {\n            type: 'ScriptPayload',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $StateCheckpointTransaction = {\n    description: `A state checkpoint transaction`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $StateKeyWrapper = {\n    type: 'string',\n    description: `Representation of a StateKey as a hex string. This is used for cursor based pagination.\n    `,\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $SubmitTransactionRequest = {\n    description: `A request to submit a transaction\n\n    This requires a transaction and a signature of it`,\n    properties: {\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        signature: {\n            type: 'TransactionSignature',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TableItemRequest = {\n    description: `Table Item request for the GetTableItem API`,\n    properties: {\n        key_type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        value_type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        key: {\n            description: `The value of the table item's key`,\n            properties: {\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction = {\n    type: 'one-of',\n    description: `Enum of the different types of transactions in Aptos`,\n    contains: [{\n        type: 'Transaction_PendingTransaction',\n    }, {\n        type: 'Transaction_UserTransaction',\n    }, {\n        type: 'Transaction_GenesisTransaction',\n    }, {\n        type: 'Transaction_BlockMetadataTransaction',\n    }, {\n        type: 'Transaction_StateCheckpointTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_BlockMetadataTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'BlockMetadataTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_GenesisTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'GenesisTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_PendingTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'PendingTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_StateCheckpointTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'StateCheckpointTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $Transaction_UserTransaction = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'UserTransaction',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload = {\n    type: 'one-of',\n    description: `An enum of the possible transaction payloads`,\n    contains: [{\n        type: 'TransactionPayload_EntryFunctionPayload',\n    }, {\n        type: 'TransactionPayload_ScriptPayload',\n    }, {\n        type: 'TransactionPayload_ModuleBundlePayload',\n    }, {\n        type: 'TransactionPayload_MultisigPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload_EntryFunctionPayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'EntryFunctionPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload_ModuleBundlePayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'ModuleBundlePayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload_MultisigPayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'MultisigPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionPayload_ScriptPayload = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'ScriptPayload',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionsBatchSingleSubmissionFailure = {\n    description: `Information telling which batch submission transactions failed`,\n    properties: {\n        error: {\n            type: 'AptosError',\n            isRequired: true,\n        },\n        transaction_index: {\n            type: 'number',\n            description: `The index of which transaction failed, same as submission order`,\n            isRequired: true,\n            format: 'uint64',\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionsBatchSubmissionResult = {\n    description: `Batch transaction submission result\n\n    Tells which transactions failed`,\n    properties: {\n        transaction_failures: {\n            type: 'array',\n            contains: {\n                type: 'TransactionsBatchSingleSubmissionFailure',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature = {\n    type: 'one-of',\n    description: `An enum representing the different transaction signatures available`,\n    contains: [{\n        type: 'TransactionSignature_Ed25519Signature',\n    }, {\n        type: 'TransactionSignature_MultiEd25519Signature',\n    }, {\n        type: 'TransactionSignature_MultiAgentSignature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature_Ed25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'Ed25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature_MultiAgentSignature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'MultiAgentSignature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $TransactionSignature_MultiEd25519Signature = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'MultiEd25519Signature',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $U128 = {\n    type: 'string',\n    description: `A string containing a 128-bit unsigned integer.\n\n    We represent u128 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u128s in JSON natively.\n    `,\n    format: 'uint128',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $U256 = {\n    type: 'string',\n    description: `A string containing a 256-bit unsigned integer.\n\n    We represent u256 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u256s in JSON natively.\n    `,\n    format: 'uint256',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $U64 = {\n    type: 'string',\n    description: `A string containing a 64-bit unsigned integer.\n\n    We represent u64 values as a string to ensure compatibility with languages such\n    as JavaScript that do not parse u64s in JSON natively.\n    `,\n    format: 'uint64',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $UserTransaction = {\n    description: `A transaction submitted by a user to change the state of the blockchain`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_change_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        event_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        state_checkpoint_hash: {\n            type: 'HashValue',\n        },\n        gas_used: {\n            type: 'U64',\n            isRequired: true,\n        },\n        success: {\n            type: 'boolean',\n            description: `Whether the transaction was successful`,\n            isRequired: true,\n        },\n        vm_status: {\n            type: 'string',\n            description: `The VM status of the transaction, can tell useful information in a failure`,\n            isRequired: true,\n        },\n        accumulator_root_hash: {\n            type: 'HashValue',\n            isRequired: true,\n        },\n        changes: {\n            type: 'array',\n            contains: {\n                type: 'WriteSetChange',\n            },\n            isRequired: true,\n        },\n        sender: {\n            type: 'Address',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        max_gas_amount: {\n            type: 'U64',\n            isRequired: true,\n        },\n        gas_unit_price: {\n            type: 'U64',\n            isRequired: true,\n        },\n        expiration_timestamp_secs: {\n            type: 'U64',\n            isRequired: true,\n        },\n        payload: {\n            type: 'TransactionPayload',\n            isRequired: true,\n        },\n        signature: {\n            type: 'TransactionSignature',\n        },\n        events: {\n            type: 'array',\n            contains: {\n                type: 'Event',\n            },\n            isRequired: true,\n        },\n        timestamp: {\n            type: 'U64',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $VersionedEvent = {\n    description: `An event from a transaction with a version`,\n    properties: {\n        version: {\n            type: 'U64',\n            isRequired: true,\n        },\n        guid: {\n            type: 'EventGuid',\n            isRequired: true,\n        },\n        sequence_number: {\n            type: 'U64',\n            isRequired: true,\n        },\n        type: {\n            type: 'MoveType',\n            isRequired: true,\n        },\n        data: {\n            description: `The JSON representation of the event`,\n            properties: {\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $ViewRequest = {\n    description: `View request for the Move View Function API`,\n    properties: {\n        function: {\n            type: 'EntryFunctionId',\n            isRequired: true,\n        },\n        type_arguments: {\n            type: 'array',\n            contains: {\n                type: 'MoveType',\n            },\n            isRequired: true,\n        },\n        arguments: {\n            type: 'array',\n            contains: {\n                properties: {\n                },\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteModule = {\n    description: `Write a new module or update an existing one`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        data: {\n            type: 'MoveModuleBytecode',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteResource = {\n    description: `Write a resource or update an existing one`,\n    properties: {\n        address: {\n            type: 'Address',\n            isRequired: true,\n        },\n        state_key_hash: {\n            type: 'string',\n            description: `State key hash`,\n            isRequired: true,\n        },\n        data: {\n            type: 'MoveResource',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSet = {\n    type: 'one-of',\n    description: `The associated writeset with a payload`,\n    contains: [{\n        type: 'WriteSet_ScriptWriteSet',\n    }, {\n        type: 'WriteSet_DirectWriteSet',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSet_DirectWriteSet = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DirectWriteSet',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSet_ScriptWriteSet = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'ScriptWriteSet',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange = {\n    type: 'one-of',\n    description: `A final state change of a transaction on a resource or module`,\n    contains: [{\n        type: 'WriteSetChange_DeleteModule',\n    }, {\n        type: 'WriteSetChange_DeleteResource',\n    }, {\n        type: 'WriteSetChange_DeleteTableItem',\n    }, {\n        type: 'WriteSetChange_WriteModule',\n    }, {\n        type: 'WriteSetChange_WriteResource',\n    }, {\n        type: 'WriteSetChange_WriteTableItem',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_DeleteModule = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DeleteModule',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_DeleteResource = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DeleteResource',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_DeleteTableItem = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'DeleteTableItem',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_WriteModule = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteModule',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_WriteResource = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteResource',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetChange_WriteTableItem = {\n    type: 'all-of',\n    contains: [{\n        properties: {\n            type: {\n                type: 'string',\n                isRequired: true,\n            },\n        },\n    }, {\n        type: 'WriteTableItem',\n    }],\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteSetPayload = {\n    description: `A writeset payload, used only for genesis`,\n    properties: {\n        write_set: {\n            type: 'WriteSet',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $WriteTableItem = {\n    description: `Change set to write a table item`,\n    properties: {\n        state_key_hash: {\n            type: 'string',\n            isRequired: true,\n        },\n        handle: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        key: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        value: {\n            type: 'HexEncodedBytes',\n            isRequired: true,\n        },\n        data: {\n            type: 'DecodedTableData',\n        },\n    },\n} as const;\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexString } from \"../utils\";\nimport {\n  TypeTag,\n  TypeTagBool,\n  TypeTagU8,\n  TypeTagU16,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU128,\n  TypeTagU256,\n  TypeTagAddress,\n  AccountAddress,\n  TypeTagVector,\n  TypeTagStruct,\n  TransactionArgument,\n  TransactionArgumentBool,\n  TransactionArgumentU16,\n  TransactionArgumentU32,\n  TransactionArgumentU64,\n  TransactionArgumentU128,\n  TransactionArgumentU256,\n  TransactionArgumentAddress,\n  TransactionArgumentU8,\n  TransactionArgumentU8Vector,\n} from \"../aptos_types\";\nimport { Serializer } from \"../bcs\";\n\nfunction assertType(val: any, types: string[] | string, message?: string) {\n  if (!types?.includes(typeof val)) {\n    throw new Error(\n      message || `Invalid arg: ${val} type should be ${types instanceof Array ? types.join(\" or \") : types}`,\n    );\n  }\n}\n\nexport function ensureBoolean(val: boolean | string): boolean {\n  assertType(val, [\"boolean\", \"string\"]);\n  if (typeof val === \"boolean\") {\n    return val;\n  }\n\n  if (val === \"true\") {\n    return true;\n  }\n  if (val === \"false\") {\n    return false;\n  }\n\n  throw new Error(\"Invalid boolean string.\");\n}\n\nexport function ensureNumber(val: number | string): number {\n  assertType(val, [\"number\", \"string\"]);\n  if (typeof val === \"number\") {\n    return val;\n  }\n\n  const res = Number.parseInt(val, 10);\n  if (Number.isNaN(res)) {\n    throw new Error(\"Invalid number string.\");\n  }\n\n  return res;\n}\n\nexport function ensureBigInt(val: number | bigint | string): bigint {\n  assertType(val, [\"number\", \"bigint\", \"string\"]);\n  return BigInt(val);\n}\n\nexport function serializeArg(argVal: any, argType: TypeTag, serializer: Serializer) {\n  if (argType instanceof TypeTagBool) {\n    serializer.serializeBool(ensureBoolean(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU8) {\n    serializer.serializeU8(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU16) {\n    serializer.serializeU16(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU32) {\n    serializer.serializeU32(ensureNumber(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU64) {\n    serializer.serializeU64(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU128) {\n    serializer.serializeU128(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagU256) {\n    serializer.serializeU256(ensureBigInt(argVal));\n    return;\n  }\n  if (argType instanceof TypeTagAddress) {\n    let addr: AccountAddress;\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n    addr.serialize(serializer);\n    return;\n  }\n  if (argType instanceof TypeTagVector) {\n    // We are serializing a vector<u8>\n    if (argType.value instanceof TypeTagU8) {\n      if (argVal instanceof Uint8Array) {\n        serializer.serializeBytes(argVal);\n        return;\n      }\n\n      if (typeof argVal === \"string\") {\n        serializer.serializeStr(argVal);\n        return;\n      }\n    }\n\n    if (!Array.isArray(argVal)) {\n      throw new Error(\"Invalid vector args.\");\n    }\n\n    serializer.serializeU32AsUleb128(argVal.length);\n\n    argVal.forEach((arg) => serializeArg(arg, argType.value, serializer));\n    return;\n  }\n\n  if (argType instanceof TypeTagStruct) {\n    const { address, module_name: moduleName, name } = (argType as TypeTagStruct).value;\n    if (\n      `${HexString.fromUint8Array(address.address).toShortString()}::${moduleName.value}::${name.value}` !==\n      \"0x1::string::String\"\n    ) {\n      throw new Error(\"The only supported struct arg is of type 0x1::string::String\");\n    }\n    assertType(argVal, [\"string\"]);\n\n    serializer.serializeStr(argVal);\n    return;\n  }\n  throw new Error(\"Unsupported arg type.\");\n}\n\nexport function argToTransactionArgument(argVal: any, argType: TypeTag): TransactionArgument {\n  if (argType instanceof TypeTagBool) {\n    return new TransactionArgumentBool(ensureBoolean(argVal));\n  }\n  if (argType instanceof TypeTagU8) {\n    return new TransactionArgumentU8(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU16) {\n    return new TransactionArgumentU16(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU32) {\n    return new TransactionArgumentU32(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU64) {\n    return new TransactionArgumentU64(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU128) {\n    return new TransactionArgumentU128(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU256) {\n    return new TransactionArgumentU256(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagAddress) {\n    let addr: AccountAddress;\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n    return new TransactionArgumentAddress(addr);\n  }\n  if (argType instanceof TypeTagVector && argType.value instanceof TypeTagU8) {\n    if (!(argVal instanceof Uint8Array)) {\n      throw new Error(`${argVal} should be an instance of Uint8Array`);\n    }\n    return new TransactionArgumentU8Vector(argVal);\n  }\n\n  throw new Error(\"Unknown type for TransactionArgument.\");\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport {\n  Ed25519PublicKey,\n  Ed25519Signature,\n  MultiEd25519PublicKey,\n  MultiEd25519Signature,\n  RawTransaction,\n  SignedTransaction,\n  TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorMultiEd25519,\n  SigningMessage,\n  MultiAgentRawTransaction,\n  AccountAddress,\n  EntryFunction,\n  Identifier,\n  ChainId,\n  Script,\n  TransactionPayload,\n  TransactionArgument,\n  TransactionPayloadEntryFunction,\n  TransactionPayloadScript,\n  ModuleId,\n  TypeTagParser,\n} from \"../aptos_types\";\nimport { bcsToBytes, Bytes, Deserializer, Serializer, Uint64, Uint8 } from \"../bcs\";\nimport { ArgumentABI, EntryFunctionABI, ScriptABI, TransactionScriptABI, TypeArgumentABI } from \"../aptos_types/abi\";\nimport { argToTransactionArgument, serializeArg } from \"./builder_utils\";\nimport * as Gen from \"../generated/index\";\nimport {\n  DEFAULT_TXN_EXP_SEC_FROM_NOW,\n  DEFAULT_MAX_GAS_AMOUNT,\n  HexString,\n  MaybeHexString,\n  MemoizeExpiring,\n} from \"../utils\";\n\nexport { TypeTagParser } from \"../aptos_types\";\n\nconst RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nconst RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\n\ntype AnyRawTransaction = RawTransaction | MultiAgentRawTransaction;\n\n/**\n * Function that takes in a Signing Message (serialized raw transaction)\n *  and returns a signature\n */\nexport type SigningFn = (txn: SigningMessage) => Ed25519Signature | MultiEd25519Signature;\n\nexport class TransactionBuilder<F extends SigningFn> {\n  protected readonly signingFunction: F;\n\n  constructor(signingFunction: F, public readonly rawTxnBuilder?: TransactionBuilderABI) {\n    this.signingFunction = signingFunction;\n  }\n\n  /**\n   * Builds a RawTransaction. Relays the call to TransactionBuilderABI.build\n   * @param func\n   * @param ty_tags\n   * @param args\n   */\n  build(func: string, ty_tags: string[], args: any[]): RawTransaction {\n    if (!this.rawTxnBuilder) {\n      throw new Error(\"this.rawTxnBuilder doesn't exist.\");\n    }\n\n    return this.rawTxnBuilder.build(func, ty_tags, args);\n  }\n\n  /** Generates a Signing Message out of a raw transaction. */\n  static getSigningMessage(rawTxn: AnyRawTransaction): SigningMessage {\n    const hash = sha3Hash.create();\n    if (rawTxn instanceof RawTransaction) {\n      hash.update(RAW_TRANSACTION_SALT);\n    } else if (rawTxn instanceof MultiAgentRawTransaction) {\n      hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n    } else {\n      throw new Error(\"Unknown transaction type.\");\n    }\n\n    const prefix = hash.digest();\n\n    const body = bcsToBytes(rawTxn);\n\n    const mergedArray = new Uint8Array(prefix.length + body.length);\n    mergedArray.set(prefix);\n    mergedArray.set(body, prefix.length);\n\n    return mergedArray;\n  }\n}\n\n/**\n * Provides signing method for signing a raw transaction with single public key.\n */\nexport class TransactionBuilderEd25519 extends TransactionBuilder<SigningFn> {\n  private readonly publicKey: Uint8Array;\n\n  constructor(signingFunction: SigningFn, publicKey: Uint8Array, rawTxnBuilder?: TransactionBuilderABI) {\n    super(signingFunction, rawTxnBuilder);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn: RawTransaction): SignedTransaction {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n\n    const authenticator = new TransactionAuthenticatorEd25519(\n      new Ed25519PublicKey(this.publicKey),\n      signature as Ed25519Signature,\n    );\n\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  /** Signs a raw transaction and returns a bcs serialized transaction. */\n  sign(rawTxn: RawTransaction): Bytes {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n}\n\n/**\n * Provides signing method for signing a raw transaction with multisig public key.\n */\nexport class TransactionBuilderMultiEd25519 extends TransactionBuilder<SigningFn> {\n  private readonly publicKey: MultiEd25519PublicKey;\n\n  constructor(signingFunction: SigningFn, publicKey: MultiEd25519PublicKey) {\n    super(signingFunction);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn: RawTransaction): SignedTransaction {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n\n    const authenticator = new TransactionAuthenticatorMultiEd25519(this.publicKey, signature as MultiEd25519Signature);\n\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  /** Signs a raw transaction and returns a bcs serialized transaction. */\n  sign(rawTxn: RawTransaction): Bytes {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n}\n\n/**\n * Config for creating raw transactions.\n */\ninterface ABIBuilderConfig {\n  sender: MaybeHexString | AccountAddress;\n  sequenceNumber: Uint64 | string;\n  gasUnitPrice: Uint64 | string;\n  maxGasAmount?: Uint64 | string;\n  expSecFromNow?: number | string;\n  chainId: Uint8 | string;\n}\n\n/**\n * Builds raw transactions based on ABI\n */\nexport class TransactionBuilderABI {\n  private readonly abiMap: Map<string, ScriptABI>;\n\n  private readonly builderConfig: Partial<ABIBuilderConfig>;\n\n  /**\n   * Constructs a TransactionBuilderABI instance\n   * @param abis List of binary ABIs.\n   * @param builderConfig Configs for creating a raw transaction.\n   */\n  constructor(abis: Bytes[], builderConfig?: ABIBuilderConfig) {\n    this.abiMap = new Map<string, ScriptABI>();\n\n    abis.forEach((abi) => {\n      const deserializer = new Deserializer(abi);\n      const scriptABI = ScriptABI.deserialize(deserializer);\n      let k: string;\n      if (scriptABI instanceof EntryFunctionABI) {\n        const funcABI = scriptABI as EntryFunctionABI;\n        const { address: addr, name: moduleName } = funcABI.module_name;\n        k = `${HexString.fromUint8Array(addr.address).toShortString()}::${moduleName.value}::${funcABI.name}`;\n      } else {\n        const funcABI = scriptABI as TransactionScriptABI;\n        k = funcABI.name;\n      }\n\n      if (this.abiMap.has(k)) {\n        throw new Error(\"Found conflicting ABI interfaces\");\n      }\n\n      this.abiMap.set(k, scriptABI);\n    });\n\n    this.builderConfig = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      expSecFromNow: DEFAULT_TXN_EXP_SEC_FROM_NOW,\n      ...builderConfig,\n    };\n  }\n\n  private static toBCSArgs(abiArgs: any[], args: any[]): Bytes[] {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => {\n      const serializer = new Serializer();\n      serializeArg(arg, abiArgs[i].type_tag, serializer);\n      return serializer.getBytes();\n    });\n  }\n\n  private static toTransactionArguments(abiArgs: any[], args: any[]): TransactionArgument[] {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => argToTransactionArgument(arg, abiArgs[i].type_tag));\n  }\n\n  setSequenceNumber(seqNumber: Uint64 | string) {\n    this.builderConfig.sequenceNumber = BigInt(seqNumber);\n  }\n\n  /**\n   * Builds a TransactionPayload. For dApps, chain ID and account sequence numbers are only known to the wallet.\n   * Instead of building a RawTransaction (requires chainID and sequenceNumber), dApps can build a TransactionPayload\n   * and pass the payload to the wallet for signing and sending.\n   * @param func Fully qualified func names, e.g. 0x1::Coin::transfer\n   * @param ty_tags TypeTag strings\n   * @param args Function arguments\n   * @returns TransactionPayload\n   */\n  buildTransactionPayload(func: string, ty_tags: string[], args: any[]): TransactionPayload {\n    const typeTags = ty_tags.map((ty_arg) => new TypeTagParser(ty_arg).parseTypeTag());\n\n    let payload: TransactionPayload;\n\n    if (!this.abiMap.has(func)) {\n      throw new Error(`Cannot find function: ${func}`);\n    }\n\n    const scriptABI = this.abiMap.get(func);\n\n    if (scriptABI instanceof EntryFunctionABI) {\n      const funcABI = scriptABI as EntryFunctionABI;\n      const bcsArgs = TransactionBuilderABI.toBCSArgs(funcABI.args, args);\n      payload = new TransactionPayloadEntryFunction(\n        new EntryFunction(funcABI.module_name, new Identifier(funcABI.name), typeTags, bcsArgs),\n      );\n    } else if (scriptABI instanceof TransactionScriptABI) {\n      const funcABI = scriptABI as TransactionScriptABI;\n      const scriptArgs = TransactionBuilderABI.toTransactionArguments(funcABI.args, args);\n\n      payload = new TransactionPayloadScript(new Script(funcABI.code, typeTags, scriptArgs));\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"Unknown ABI format.\");\n    }\n\n    return payload;\n  }\n\n  /**\n   * Builds a RawTransaction\n   * @param func Fully qualified func names, e.g. 0x1::Coin::transfer\n   * @param ty_tags TypeTag strings.\n   * @example Below are valid value examples\n   * ```\n   * // Structs are in format `AccountAddress::ModuleName::StructName`\n   * 0x1::aptos_coin::AptosCoin\n   * // Vectors are in format `vector<other_tag_string>`\n   * vector<0x1::aptos_coin::AptosCoin>\n   * bool\n   * u8\n   * u16\n   * u32\n   * u64\n   * u128\n   * u256\n   * address\n   * ```\n   * @param args Function arguments\n   * @returns RawTransaction\n   */\n  build(func: string, ty_tags: string[], args: any[]): RawTransaction {\n    const { sender, sequenceNumber, gasUnitPrice, maxGasAmount, expSecFromNow, chainId } = this.builderConfig;\n\n    if (!gasUnitPrice) {\n      throw new Error(\"No gasUnitPrice provided.\");\n    }\n\n    const senderAccount = sender instanceof AccountAddress ? sender : AccountAddress.fromHex(sender!);\n    const expTimestampSec = BigInt(Math.floor(Date.now() / 1000) + Number(expSecFromNow));\n    const payload = this.buildTransactionPayload(func, ty_tags, args);\n\n    if (payload) {\n      return new RawTransaction(\n        senderAccount,\n        BigInt(sequenceNumber!),\n        payload,\n        BigInt(maxGasAmount!),\n        BigInt(gasUnitPrice!),\n        expTimestampSec,\n        new ChainId(Number(chainId)),\n      );\n    }\n\n    throw new Error(\"Invalid ABI.\");\n  }\n}\n\nexport type RemoteABIBuilderConfig = Partial<Omit<ABIBuilderConfig, \"sender\">> & {\n  sender: MaybeHexString | AccountAddress;\n};\n\ninterface AptosClientInterface {\n  getAccountModules: (accountAddress: MaybeHexString) => Promise<Gen.MoveModuleBytecode[]>;\n  getAccount: (accountAddress: MaybeHexString) => Promise<Gen.AccountData>;\n  getChainId: () => Promise<number>;\n  estimateGasPrice: () => Promise<Gen.GasEstimation>;\n}\n\n/**\n * This transaction builder downloads JSON ABIs from the fullnodes.\n * It then translates the JSON ABIs to the format that is accepted by TransactionBuilderABI\n */\nexport class TransactionBuilderRemoteABI {\n  // We don't want the builder to depend on the actual AptosClient. There might be circular dependencies.\n  constructor(\n    private readonly aptosClient: AptosClientInterface,\n    private readonly builderConfig: RemoteABIBuilderConfig,\n  ) {}\n\n  // Cache for 10 minutes\n  @MemoizeExpiring(10 * 60 * 1000)\n  async fetchABI(addr: string) {\n    const modules = await this.aptosClient.getAccountModules(addr);\n    const abis = modules\n      .map((module) => module.abi)\n      .flatMap((abi) =>\n        abi!.exposed_functions\n          .filter((ef) => ef.is_entry)\n          .map(\n            (ef) =>\n              ({\n                fullName: `${abi!.address}::${abi!.name}::${ef.name}`,\n                ...ef,\n              } as Gen.MoveFunction & { fullName: string }),\n          ),\n      );\n\n    const abiMap = new Map<string, Gen.MoveFunction & { fullName: string }>();\n    abis.forEach((abi) => {\n      abiMap.set(abi.fullName, abi);\n    });\n\n    return abiMap;\n  }\n\n  /**\n   * Builds a raw transaction. Only support script function a.k.a entry function payloads\n   *\n   * @param func fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coins::transfer\n   * @param ty_tags\n   * @param args\n   * @returns RawTransaction\n   */\n  async build(func: Gen.EntryFunctionId, ty_tags: Gen.MoveType[], args: any[]): Promise<RawTransaction> {\n    /* eslint no-param-reassign: [\"off\"] */\n    const normlize = (s: string) => s.replace(/^0[xX]0*/g, \"0x\");\n    func = normlize(func);\n    const funcNameParts = func.split(\"::\");\n    if (funcNameParts.length !== 3) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        \"'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coins::transfer\",\n      );\n    }\n\n    const [addr, module] = func.split(\"::\");\n\n    // Downloads the JSON abi\n    const abiMap = await this.fetchABI(addr);\n    if (!abiMap.has(func)) {\n      throw new Error(`${func} doesn't exist.`);\n    }\n\n    const funcAbi = abiMap.get(func);\n\n    // Remove all `signer` and `&signer` from argument list because the Move VM injects those arguments. Clients do not\n    // need to care about those args. `signer` and `&signer` are required be in the front of the argument list. But we\n    // just loop through all arguments and filter out `signer` and `&signer`.\n    const abiArgs = funcAbi!.params.filter((param) => param !== \"signer\" && param !== \"&signer\");\n\n    // Convert abi string arguments to TypeArgumentABI\n    const typeArgABIs = abiArgs.map(\n      (abiArg, i) => new ArgumentABI(`var${i}`, new TypeTagParser(abiArg, ty_tags).parseTypeTag()),\n    );\n\n    const entryFunctionABI = new EntryFunctionABI(\n      funcAbi!.name,\n      ModuleId.fromStr(`${addr}::${module}`),\n      \"\", // Doc string\n      funcAbi!.generic_type_params.map((_, i) => new TypeArgumentABI(`${i}`)),\n      typeArgABIs,\n    );\n\n    const { sender, ...rest } = this.builderConfig;\n\n    const senderAddress = sender instanceof AccountAddress ? HexString.fromUint8Array(sender.address) : sender;\n\n    const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasUnitPrice }] = await Promise.all([\n      rest?.sequenceNumber\n        ? Promise.resolve({ sequence_number: rest?.sequenceNumber })\n        : this.aptosClient.getAccount(senderAddress),\n      rest?.chainId ? Promise.resolve(rest?.chainId) : this.aptosClient.getChainId(),\n      rest?.gasUnitPrice ? Promise.resolve({ gas_estimate: rest?.gasUnitPrice }) : this.aptosClient.estimateGasPrice(),\n    ]);\n\n    const builderABI = new TransactionBuilderABI([bcsToBytes(entryFunctionABI)], {\n      sender,\n      sequenceNumber,\n      chainId,\n      gasUnitPrice: BigInt(gasUnitPrice),\n      ...rest,\n    });\n\n    return builderABI.build(func, ty_tags, args);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  clear,\n  DEFAULT_TXN_EXP_SEC_FROM_NOW,\n  DEFAULT_MAX_GAS_AMOUNT,\n  DEFAULT_TXN_TIMEOUT_SEC,\n  fixNodeUrl,\n  HexString,\n  paginateWithCursor,\n  MaybeHexString,\n  Memoize,\n  sleep,\n  APTOS_COIN,\n} from \"../utils\";\nimport { AptosAccount } from \"../account/aptos_account\";\nimport * as Gen from \"../generated/index\";\nimport {\n  TxnBuilderTypes,\n  TransactionBuilderEd25519,\n  TransactionBuilderRemoteABI,\n  RemoteABIBuilderConfig,\n  TransactionBuilderMultiEd25519,\n} from \"../transaction_builder\";\nimport {\n  bcsSerializeBytes,\n  bcsSerializeU8,\n  bcsToBytes,\n  Bytes,\n  Seq,\n  Serializer,\n  serializeVector,\n  Uint64,\n  AnyNumber,\n} from \"../bcs\";\nimport { Ed25519PublicKey, MultiEd25519PublicKey } from \"../aptos_types\";\n\nexport interface OptionalTransactionArgs {\n  maxGasAmount?: Uint64;\n  gasUnitPrice?: Uint64;\n  expireTimestamp?: Uint64;\n}\n\ninterface PaginationArgs {\n  start?: AnyNumber;\n  limit?: number;\n}\n\n/**\n * Provides methods for retrieving data from Aptos node.\n * For more detailed API specification see {@link https://fullnode.devnet.aptoslabs.com/v1/spec}\n */\nexport class AptosClient {\n  client: Gen.AptosGeneratedClient;\n\n  readonly nodeUrl: string;\n\n  /**\n   * Build a client configured to connect to an Aptos node at the given URL.\n   *\n   * Note: If you forget to append `/v1` to the URL, the client constructor\n   * will automatically append it. If you don't want this URL processing to\n   * take place, set doNotFixNodeUrl to true.\n   *\n   * @param nodeUrl URL of the Aptos Node API endpoint.\n   * @param config Additional configuration options for the generated Axios client.\n   */\n  constructor(nodeUrl: string, config?: Partial<Gen.OpenAPIConfig>, doNotFixNodeUrl: boolean = false) {\n    if (!nodeUrl) {\n      throw new Error(\"Node URL cannot be empty.\");\n    }\n    const conf = config === undefined || config === null ? {} : { ...config };\n\n    if (doNotFixNodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = fixNodeUrl(nodeUrl);\n    }\n    conf.BASE = this.nodeUrl;\n\n    // Do not carry cookies when `WITH_CREDENTIALS` is explicitly set to `false`. By default, cookies will be sent\n    if (config?.WITH_CREDENTIALS === false) {\n      conf.WITH_CREDENTIALS = false;\n    } else {\n      conf.WITH_CREDENTIALS = true;\n    }\n    this.client = new Gen.AptosGeneratedClient(conf);\n  }\n\n  /**\n   * Queries an Aptos account by address\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @returns Core account resource, used for identifying account and transaction execution\n   * @example An example of the returned account\n   * ```\n   * {\n   *    sequence_number: \"1\",\n   *    authentication_key: \"0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69\"\n   * }\n   * ```\n   */\n  @parseApiError\n  async getAccount(accountAddress: MaybeHexString): Promise<Gen.AccountData> {\n    return this.client.accounts.getAccount(HexString.ensure(accountAddress).hex());\n  }\n\n  /**\n   * Queries transactions sent by given account\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query Optional pagination object\n   * @param query.start The sequence number of the start transaction of the page. Default is 0.\n   * @param query.limit The max number of transactions should be returned for the page. Default is 25.\n   * @returns An array of on-chain transactions, sent by account\n   */\n  @parseApiError\n  async getAccountTransactions(accountAddress: MaybeHexString, query?: PaginationArgs): Promise<Gen.Transaction[]> {\n    return this.client.transactions.getAccountTransactions(\n      HexString.ensure(accountAddress).hex(),\n      query?.start?.toString(),\n      query?.limit,\n    );\n  }\n\n  /**\n   * Queries modules associated with given account\n   *\n   * Note: In order to get all account modules, this function may call the API\n   * multiple times as it paginates.\n   *\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account modules array for a specific ledger version.\n   * Module is represented by MoveModule interface. It contains module `bytecode` and `abi`,\n   * which is JSON representation of a module\n   */\n  @parseApiError\n  async getAccountModules(\n    accountAddress: MaybeHexString,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveModuleBytecode[]> {\n    // Note: This function does not expose a `limit` parameter because it might\n    // be ambiguous how this is being used. Is it being passed to getAccountModules\n    // to limit the number of items per response, or does it limit the total output\n    // of this function? We avoid this confusion by not exposing the parameter at all.\n    const f = this.client.accounts.getAccountModules.bind({ httpRequest: this.client.request });\n    const out = await paginateWithCursor(f, accountAddress, 1000, query);\n    return out;\n  }\n\n  /**\n   * Queries module associated with given account by module name\n   *\n   * Note: In order to get all account resources, this function may call the API\n   * multiple times as it paginates.\n   *\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param moduleName The name of the module\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Specified module.\n   * Module is represented by MoveModule interface. It contains module `bytecode` and `abi`,\n   * which JSON representation of a module\n   */\n  @parseApiError\n  async getAccountModule(\n    accountAddress: MaybeHexString,\n    moduleName: string,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveModuleBytecode> {\n    return this.client.accounts.getAccountModule(\n      HexString.ensure(accountAddress).hex(),\n      moduleName,\n      query?.ledgerVersion?.toString(),\n    );\n  }\n\n  /**\n   * Queries all resources associated with given account\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account resources for a specific ledger version\n   */\n  @parseApiError\n  async getAccountResources(\n    accountAddress: MaybeHexString,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveResource[]> {\n    const f = this.client.accounts.getAccountResources.bind({ httpRequest: this.client.request });\n    const out = await paginateWithCursor(f, accountAddress, 9999, query);\n    return out;\n  }\n\n  /**\n   * Queries resource associated with given account by resource type\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param resourceType String representation of an on-chain Move struct type\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account resource of specified type and ledger version\n   * @example An example of an account resource\n   * ```\n   * {\n   *    type: \"0x1::aptos_coin::AptosCoin\",\n   *    data: { value: 6 }\n   * }\n   * ```\n   */\n  @parseApiError\n  async getAccountResource(\n    accountAddress: MaybeHexString,\n    resourceType: Gen.MoveStructTag,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveResource> {\n    return this.client.accounts.getAccountResource(\n      HexString.ensure(accountAddress).hex(),\n      resourceType,\n      query?.ledgerVersion?.toString(),\n    );\n  }\n\n  /** Generates a signed transaction that can be submitted to the chain for execution. */\n  static generateBCSTransaction(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array {\n    const txnBuilder = new TransactionBuilderEd25519((signingMessage: TxnBuilderTypes.SigningMessage) => {\n      // @ts-ignore\n      const sigHexStr = accountFrom.signBuffer(signingMessage);\n      return new TxnBuilderTypes.Ed25519Signature(sigHexStr.toUint8Array());\n    }, accountFrom.pubKey().toUint8Array());\n\n    return txnBuilder.sign(rawTxn);\n  }\n\n  /**\n   * Note: Unless you have a specific reason for using this, it'll probably be simpler\n   * to use `simulateTransaction`.\n   *\n   * Generates a BCS transaction that can be submitted to the chain for simulation.\n   *\n   * @param accountFrom The account that will be used to send the transaction\n   * for simulation.\n   * @param rawTxn The raw transaction to be simulated, likely created by calling\n   * the `generateTransaction` function.\n   * @returns The BCS encoded signed transaction, which you should then pass into\n   * the `submitBCSSimulation` function.\n   */\n  static generateBCSSimulation(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const txnBuilder = new TransactionBuilderEd25519((_signingMessage: TxnBuilderTypes.SigningMessage) => {\n      // @ts-ignore\n      const invalidSigBytes = new Uint8Array(64);\n      return new TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n    }, accountFrom.pubKey().toUint8Array());\n\n    return txnBuilder.sign(rawTxn);\n  }\n\n  /** Generates an entry function transaction request that can be submitted to produce a raw transaction that\n   * can be signed, which upon being signed can be submitted to the blockchain\n   * This function fetches the remote ABI and uses it to serialized the data, therefore\n   * users don't need to handle serialization by themselves.\n   * @param sender Hex-encoded 32 byte Aptos account address of transaction sender\n   * @param payload Entry function transaction payload type\n   * @param options Options allow to overwrite default transaction options.\n   * @returns A raw transaction object\n   */\n  async generateTransaction(\n    sender: MaybeHexString,\n    payload: Gen.EntryFunctionPayload,\n    options?: Partial<Gen.SubmitTransactionRequest>,\n  ): Promise<TxnBuilderTypes.RawTransaction> {\n    const config: RemoteABIBuilderConfig = { sender };\n    if (options?.sequence_number) {\n      config.sequenceNumber = options.sequence_number;\n    }\n\n    if (options?.gas_unit_price) {\n      config.gasUnitPrice = options.gas_unit_price;\n    }\n\n    if (options?.max_gas_amount) {\n      config.maxGasAmount = options.max_gas_amount;\n    }\n\n    if (options?.expiration_timestamp_secs) {\n      const timestamp = Number.parseInt(options.expiration_timestamp_secs, 10);\n      config.expSecFromNow = timestamp - Math.floor(Date.now() / 1000);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this, config);\n    return builder.build(payload.function, payload.type_arguments, payload.arguments);\n  }\n\n  /** Converts a transaction request produced by `generateTransaction` into a properly\n   * signed transaction, which can then be submitted to the blockchain\n   * @param accountFrom AptosAccount of transaction sender\n   * @param rawTransaction A raw transaction generated by `generateTransaction` method\n   * @returns A transaction, signed with sender account\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async signTransaction(\n    accountFrom: AptosAccount,\n    rawTransaction: TxnBuilderTypes.RawTransaction,\n  ): Promise<Uint8Array> {\n    return Promise.resolve(AptosClient.generateBCSTransaction(accountFrom, rawTransaction));\n  }\n\n  /**\n   * Event types are globally identifiable by an account `address` and\n   * monotonically increasing `creation_number`, one per event type emitted\n   * to the given account. This API returns events corresponding to that\n   * that event type.\n   * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix,\n   * for which events are queried. This refers to the account that events were emitted\n   * to, not the account hosting the move module that emits that event type.\n   * @param creationNumber Creation number corresponding to the event type.\n   * @returns Array of events assotiated with the given account and creation number.\n   */\n  @parseApiError\n  async getEventsByCreationNumber(\n    address: MaybeHexString,\n    creationNumber: AnyNumber | string,\n    query?: PaginationArgs,\n  ): Promise<Gen.Event[]> {\n    return this.client.events.getEventsByCreationNumber(\n      HexString.ensure(address).hex(),\n      creationNumber.toString(),\n      query?.start?.toString(),\n      query?.limit,\n    );\n  }\n\n  /**\n   * This API uses the given account `address`, `eventHandle`, and `fieldName`\n   * to build a key that can globally identify an event types. It then uses this\n   * key to return events emitted to the given account matching that event type.\n   * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix,\n   * for which events are queried. This refers to the account that events were emitted\n   * to, not the account hosting the move module that emits that event type.\n   * @param eventHandleStruct String representation of an on-chain Move struct type.\n   * (e.g. `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>`)\n   * @param fieldName The field name of the EventHandle in the struct\n   * @param query Optional query object\n   * @param query.start The start sequence number in the EVENT STREAM, defaulting to the latest event.\n   * The events are returned in the reverse order of sequence number\n   * @param query.limit The number of events to be returned. The default is 25.\n   * @returns Array of events\n   */\n  @parseApiError\n  async getEventsByEventHandle(\n    address: MaybeHexString,\n    eventHandleStruct: Gen.MoveStructTag,\n    fieldName: string,\n    query?: PaginationArgs,\n  ): Promise<Gen.Event[]> {\n    return this.client.events.getEventsByEventHandle(\n      HexString.ensure(address).hex(),\n      eventHandleStruct,\n      fieldName,\n      query?.start?.toString(),\n      query?.limit,\n    );\n  }\n\n  /**\n   * Submits a signed transaction to the transaction endpoint.\n   * @param signedTxn A transaction, signed by `signTransaction` method\n   * @returns Transaction that is accepted and submitted to mempool\n   */\n  async submitTransaction(signedTxn: Uint8Array): Promise<Gen.PendingTransaction> {\n    return this.submitSignedBCSTransaction(signedTxn);\n  }\n\n  /**\n   * Generates and submits a transaction to the transaction simulation\n   * endpoint. For this we generate a transaction with a fake signature.\n   *\n   * @param accountOrPubkey The sender or sender's public key. When private key is available, `AptosAccount` instance\n   * can be used to send the transaction for simulation. If private key is not available, sender's public key can be\n   * used to send the transaction for simulation.\n   * @param rawTransaction The raw transaction to be simulated, likely created\n   * by calling the `generateTransaction` function.\n   * @param query.estimateGasUnitPrice If set to true, the gas unit price in the\n   * transaction will be ignored and the estimated value will be used.\n   * @param query.estimateMaxGasAmount If set to true, the max gas value in the\n   * transaction will be ignored and the maximum possible gas will be used.\n   * @param query.estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the\n   * original estimate.\n   * @returns The BCS encoded signed transaction, which you should then provide\n   *\n   */\n  async simulateTransaction(\n    accountOrPubkey: AptosAccount | Ed25519PublicKey | MultiEd25519PublicKey,\n    rawTransaction: TxnBuilderTypes.RawTransaction,\n    query?: {\n      estimateGasUnitPrice?: boolean;\n      estimateMaxGasAmount?: boolean;\n      estimatePrioritizedGasUnitPrice: boolean;\n    },\n  ): Promise<Gen.UserTransaction[]> {\n    let signedTxn: Uint8Array;\n\n    if (accountOrPubkey instanceof AptosAccount) {\n      signedTxn = AptosClient.generateBCSSimulation(accountOrPubkey, rawTransaction);\n    } else if (accountOrPubkey instanceof MultiEd25519PublicKey) {\n      const txnBuilder = new TransactionBuilderMultiEd25519(() => {\n        const { threshold } = accountOrPubkey;\n        const bits: Seq<number> = [];\n        const signatures: TxnBuilderTypes.Ed25519Signature[] = [];\n        for (let i = 0; i < threshold; i += 1) {\n          bits.push(i);\n          signatures.push(new TxnBuilderTypes.Ed25519Signature(new Uint8Array(64)));\n        }\n        const bitmap = TxnBuilderTypes.MultiEd25519Signature.createBitmap(bits);\n        return new TxnBuilderTypes.MultiEd25519Signature(signatures, bitmap);\n      }, accountOrPubkey);\n\n      signedTxn = txnBuilder.sign(rawTransaction);\n    } else {\n      const txnBuilder = new TransactionBuilderEd25519(() => {\n        const invalidSigBytes = new Uint8Array(64);\n        return new TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n      }, accountOrPubkey.toBytes());\n\n      signedTxn = txnBuilder.sign(rawTransaction);\n    }\n    return this.submitBCSSimulation(signedTxn, query);\n  }\n\n  /**\n   * Submits a signed transaction to the endpoint that takes BCS payload\n   *\n   * @param signedTxn A BCS transaction representation\n   * @returns Transaction that is accepted and submitted to mempool\n   */\n  @parseApiError\n  async submitSignedBCSTransaction(signedTxn: Uint8Array): Promise<Gen.PendingTransaction> {\n    // Need to construct a customized post request for transactions in BCS payload\n    return this.client.request.request<Gen.PendingTransaction>({\n      url: \"/transactions\",\n      method: \"POST\",\n      body: signedTxn,\n      mediaType: \"application/x.aptos.signed_transaction+bcs\",\n    });\n  }\n\n  /**\n   * Submits the BCS serialization of a signed transaction to the simulation endpoint.\n   *\n   * @param bcsBody The output of `generateBCSSimulation`.\n   * @param query?.estimateGasUnitPrice If set to true, the gas unit price in the\n   * transaction will be ignored and the estimated value will be used.\n   * @param query?.estimateMaxGasAmount If set to true, the max gas value in the\n   * transaction will be ignored and the maximum possible gas will be used.\n   * @param query?.estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the\n   * original estimate.\n   * @returns Simulation result in the form of UserTransaction.\n   */\n  @parseApiError\n  async submitBCSSimulation(\n    bcsBody: Uint8Array,\n    query?: {\n      estimateGasUnitPrice?: boolean;\n      estimateMaxGasAmount?: boolean;\n      estimatePrioritizedGasUnitPrice?: boolean;\n    },\n  ): Promise<Gen.UserTransaction[]> {\n    // Need to construct a customized post request for transactions in BCS payload.\n    const queryParams = {\n      estimate_gas_unit_price: query?.estimateGasUnitPrice ?? false,\n      estimate_max_gas_amount: query?.estimateMaxGasAmount ?? false,\n      estimate_prioritized_gas_unit_price: query?.estimatePrioritizedGasUnitPrice ?? false,\n    };\n    return this.client.request.request<Gen.UserTransaction[]>({\n      url: \"/transactions/simulate\",\n      query: queryParams,\n      method: \"POST\",\n      body: bcsBody,\n      mediaType: \"application/x.aptos.signed_transaction+bcs\",\n    });\n  }\n\n  /**\n   * Queries on-chain transactions. This function will not return pending\n   * transactions. For that, use `getTransactionsByHash`.\n   *\n   * @param query Optional pagination object\n   * @param query.start The start transaction version of the page. Default is the latest ledger version\n   * @param query.limit The max number of transactions should be returned for the page. Default is 25\n   * @returns Array of on-chain transactions\n   */\n  @parseApiError\n  async getTransactions(query?: PaginationArgs): Promise<Gen.Transaction[]> {\n    return this.client.transactions.getTransactions(query?.start?.toString(), query?.limit);\n  }\n\n  /**\n   * @param txnHash - Transaction hash should be hex-encoded bytes string with 0x prefix.\n   * @returns Transaction from mempool (pending) or on-chain (committed) transaction\n   */\n  @parseApiError\n  async getTransactionByHash(txnHash: string): Promise<Gen.Transaction> {\n    return this.client.transactions.getTransactionByHash(txnHash);\n  }\n\n  /**\n   * @param txnVersion - Transaction version is an uint64 number.\n   * @returns On-chain transaction. Only on-chain transactions have versions, so this\n   * function cannot be used to query pending transactions.\n   */\n  @parseApiError\n  async getTransactionByVersion(txnVersion: AnyNumber): Promise<Gen.Transaction> {\n    return this.client.transactions.getTransactionByVersion(txnVersion.toString());\n  }\n\n  /**\n   * Defines if specified transaction is currently in pending state\n   * @param txnHash A hash of transaction\n   *\n   * To create a transaction hash:\n   *\n   * 1. Create hash message bytes: \"Aptos::Transaction\" bytes + BCS bytes of Transaction.\n   * 2. Apply hash algorithm SHA3-256 to the hash message bytes.\n   * 3. Hex-encode the hash bytes with 0x prefix.\n   *\n   * @returns `true` if transaction is in pending state and `false` otherwise\n   */\n  async transactionPending(txnHash: string): Promise<boolean> {\n    try {\n      const response = await this.client.transactions.getTransactionByHash(txnHash);\n      return response.type === \"pending_transaction\";\n    } catch (e: any) {\n      if (e?.status === 404) {\n        return true;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Wait for a transaction to move past pending state.\n   *\n   * There are 4 possible outcomes:\n   * 1. Transaction is processed and successfully committed to the blockchain.\n   * 2. Transaction is rejected for some reason, and is therefore not committed\n   *    to the blockchain.\n   * 3. Transaction is committed but execution failed, meaning no changes were\n   *    written to the blockchain state.\n   * 4. Transaction is not processed within the specified timeout.\n   *\n   * In case 1, this function resolves with the transaction response returned\n   * by the API.\n   *\n   * In case 2, the function will throw an ApiError, likely with an HTTP status\n   * code indicating some problem with the request (e.g. 400).\n   *\n   * In case 3, if `checkSuccess` is false (the default), this function returns\n   * the transaction response just like in case 1, in which the `success` field\n   * will be false. If `checkSuccess` is true, it will instead throw a\n   * FailedTransactionError.\n   *\n   * In case 4, this function throws a WaitForTransactionError.\n   *\n   * @param txnHash The hash of a transaction previously submitted to the blockchain.\n   * @param extraArgs.timeoutSecs Timeout in seconds. Defaults to 20 seconds.\n   * @param extraArgs.checkSuccess See above. Defaults to false.\n   * @returns See above.\n   *\n   * @example\n   * ```\n   * const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n   * const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTransaction);\n   * const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n   * const transasction = await this.aptosClient.waitForTransactionWithResult(pendingTransaction.hash);\n   * ```\n   */\n  async waitForTransactionWithResult(\n    txnHash: string,\n    extraArgs?: { timeoutSecs?: number; checkSuccess?: boolean },\n  ): Promise<Gen.Transaction> {\n    const timeoutSecs = extraArgs?.timeoutSecs ?? DEFAULT_TXN_TIMEOUT_SEC;\n    const checkSuccess = extraArgs?.checkSuccess ?? false;\n\n    let isPending = true;\n    let count = 0;\n    let lastTxn: Gen.Transaction | undefined;\n    while (isPending) {\n      if (count >= timeoutSecs) {\n        break;\n      }\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        lastTxn = await this.client.transactions.getTransactionByHash(txnHash);\n        isPending = lastTxn.type === \"pending_transaction\";\n        if (!isPending) {\n          break;\n        }\n      } catch (e) {\n        // In short, this means we will retry if it was an ApiError and the code was 404 or 5xx.\n        const isApiError = e instanceof Gen.ApiError;\n        const isRequestError = isApiError && e.status !== 404 && e.status >= 400 && e.status < 500;\n        if (!isApiError || isRequestError) {\n          throw e;\n        }\n      }\n      // eslint-disable-next-line no-await-in-loop\n      await sleep(1000);\n      count += 1;\n    }\n\n    // There is a chance that lastTxn is still undefined. Let's throw some error here\n    if (lastTxn === undefined) {\n      throw new Error(`Waiting for transaction ${txnHash} failed`);\n    }\n\n    if (isPending) {\n      throw new WaitForTransactionError(\n        `Waiting for transaction ${txnHash} timed out after ${timeoutSecs} seconds`,\n        lastTxn,\n      );\n    }\n    if (!checkSuccess) {\n      return lastTxn;\n    }\n    if (!(lastTxn as any)?.success) {\n      throw new FailedTransactionError(\n        `Transaction ${txnHash} committed to the blockchain but execution failed`,\n        lastTxn,\n      );\n    }\n    return lastTxn;\n  }\n\n  /**\n   * This function works the same as `waitForTransactionWithResult` except it\n   * doesn't return the transaction in those cases, it returns nothing. For\n   * more information, see the documentation for `waitForTransactionWithResult`.\n   */\n  async waitForTransaction(\n    txnHash: string,\n    extraArgs?: { timeoutSecs?: number; checkSuccess?: boolean },\n  ): Promise<void> {\n    await this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  /**\n   * Queries the latest ledger information\n   * @returns Latest ledger information\n   * @example Example of returned data\n   * ```\n   * {\n   *   chain_id: 15,\n   *   epoch: 6,\n   *   ledgerVersion: \"2235883\",\n   *   ledger_timestamp:\"1654580922321826\"\n   * }\n   * ```\n   */\n  @parseApiError\n  async getLedgerInfo(): Promise<Gen.IndexResponse> {\n    return this.client.general.getLedgerInfo();\n  }\n\n  /**\n   * @returns Current chain id\n   */\n  @Memoize()\n  async getChainId(): Promise<number> {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  /**\n   * Gets a table item for a table identified by the handle and the key for the item.\n   * Key and value types need to be passed in to help with key serialization and value deserialization.\n   * @param handle A pointer to where that table is stored\n   * @param data Object, that describes table item\n   * @param data.key_type Move type of table key (e.g. `vector<u8>`)\n   * @param data.value_type Move type of table value (e.g. `u64`)\n   * @param data.key Value of table key\n   * @returns Table item value rendered in JSON\n   */\n  @parseApiError\n  async getTableItem(handle: string, data: Gen.TableItemRequest, query?: { ledgerVersion?: AnyNumber }): Promise<any> {\n    const tableItem = await this.client.tables.getTableItem(handle, data, query?.ledgerVersion?.toString());\n    return tableItem;\n  }\n\n  /**\n   * Generates a raw transaction out of a transaction payload\n   * @param accountFrom\n   * @param payload\n   * @param extraArgs\n   * @returns A raw transaction object\n   */\n  async generateRawTransaction(\n    accountFrom: HexString,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<TxnBuilderTypes.RawTransaction> {\n    const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasEstimate }] = await Promise.all([\n      this.getAccount(accountFrom),\n      this.getChainId(),\n      extraArgs?.gasUnitPrice ? Promise.resolve({ gas_estimate: extraArgs.gasUnitPrice }) : this.estimateGasPrice(),\n    ]);\n\n    const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      gasUnitPrice: BigInt(gasEstimate),\n      expireTimestamp: BigInt(Math.floor(Date.now() / 1000) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n      ...extraArgs,\n    };\n\n    return new TxnBuilderTypes.RawTransaction(\n      TxnBuilderTypes.AccountAddress.fromHex(accountFrom),\n      BigInt(sequenceNumber),\n      payload,\n      maxGasAmount,\n      gasUnitPrice,\n      expireTimestamp,\n      new TxnBuilderTypes.ChainId(chainId),\n    );\n  }\n\n  /**\n   * Helper for generating, signing, and submitting a transaction.\n   *\n   * @param sender AptosAccount of transaction sender.\n   * @param payload Transaction payload.\n   * @param extraArgs Extra args for building the transaction payload.\n   * @returns The transaction response from the API.\n   */\n  async generateSignSubmitTransaction(\n    sender: AptosAccount,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // :!:>generateSignSubmitTransactionInner\n    const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTransaction);\n    const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n    // <:!:generateSignSubmitTransactionInner\n  }\n\n  /**\n   * Publishes a move package. `packageMetadata` and `modules` can be generated with command\n   * `aptos move compile --save-metadata [ --included-artifacts=<...> ]`.\n   * @param sender\n   * @param packageMetadata package metadata bytes\n   * @param modules bytecodes of modules\n   * @param extraArgs\n   * @returns Transaction hash\n   */\n  async publishPackage(\n    sender: AptosAccount,\n    packageMetadata: Bytes,\n    modules: Seq<TxnBuilderTypes.Module>,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const codeSerializer = new Serializer();\n    serializeVector(modules, codeSerializer);\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        \"0x1::code\",\n        \"publish_package_txn\",\n        [],\n        [bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()],\n      ),\n    );\n\n    return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  /**\n   * Helper for generating, submitting, and waiting for a transaction, and then\n   * checking whether it was committed successfully. Under the hood this is just\n   * `generateSignSubmitTransaction` and then `waitForTransactionWithResult`, see\n   * those for information about the return / error semantics of this function.\n   */\n  async generateSignSubmitWaitForTransaction(\n    sender: AptosAccount,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs & {\n      checkSuccess?: boolean;\n      timeoutSecs?: number;\n    },\n  ): Promise<Gen.Transaction> {\n    const txnHash = await this.generateSignSubmitTransaction(sender, payload, extraArgs);\n    return this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  @parseApiError\n  @Memoize({\n    ttlMs: 5 * 60 * 1000, // cache result for 5min\n    tags: [\"gas_estimates\"],\n  })\n  async estimateGasPrice(): Promise<Gen.GasEstimation> {\n    return this.client.transactions.estimateGasPrice();\n  }\n\n  @parseApiError\n  async estimateMaxGasAmount(forAccount: MaybeHexString): Promise<Uint64> {\n    // Only Aptos utility coin is accepted as gas\n    const typeTag = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n\n    const [{ gas_estimate: gasUnitPrice }, resources] = await Promise.all([\n      this.estimateGasPrice(),\n      this.getAccountResources(forAccount),\n    ]);\n\n    const accountResource = resources.find((r) => r.type === typeTag);\n    const balance = BigInt((accountResource!.data as any).coin.value);\n    return balance / BigInt(gasUnitPrice);\n  }\n\n  /**\n   * Rotate an account's auth key. After rotation, only the new private key can be used to sign txns for\n   * the account.\n   * WARNING: You must create a new instance of AptosAccount after using this function.\n   * @param forAccount Account of which the auth key will be rotated\n   * @param toPrivateKeyBytes New private key\n   * @param extraArgs Extra args for building the transaction payload.\n   * @returns PendingTransaction\n   */\n  async rotateAuthKeyEd25519(\n    forAccount: AptosAccount,\n    toPrivateKeyBytes: Uint8Array,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<Gen.PendingTransaction> {\n    const { sequence_number: sequenceNumber, authentication_key: authKey } = await this.getAccount(\n      forAccount.address(),\n    );\n\n    const helperAccount = new AptosAccount(toPrivateKeyBytes);\n\n    const challenge = new TxnBuilderTypes.RotationProofChallenge(\n      TxnBuilderTypes.AccountAddress.CORE_CODE_ADDRESS,\n      \"account\",\n      \"RotationProofChallenge\",\n      BigInt(sequenceNumber),\n      TxnBuilderTypes.AccountAddress.fromHex(forAccount.address()),\n      new TxnBuilderTypes.AccountAddress(new HexString(authKey).toUint8Array()),\n      helperAccount.pubKey().toUint8Array(),\n    );\n\n    const challengeHex = HexString.fromUint8Array(bcsToBytes(challenge));\n\n    const proofSignedByCurrentPrivateKey = forAccount.signHexString(challengeHex);\n\n    const proofSignedByNewPrivateKey = helperAccount.signHexString(challengeHex);\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        \"0x1::account\",\n        \"rotate_authentication_key\",\n        [],\n        [\n          bcsSerializeU8(0), // ed25519 scheme\n          bcsSerializeBytes(forAccount.pubKey().toUint8Array()),\n          bcsSerializeU8(0), // ed25519 scheme\n          bcsSerializeBytes(helperAccount.pubKey().toUint8Array()),\n          bcsSerializeBytes(proofSignedByCurrentPrivateKey.toUint8Array()),\n          bcsSerializeBytes(proofSignedByNewPrivateKey.toUint8Array()),\n        ],\n      ),\n    );\n\n    const rawTransaction = await this.generateRawTransaction(forAccount.address(), payload, extraArgs);\n    const bcsTxn = AptosClient.generateBCSTransaction(forAccount, rawTransaction);\n    return this.submitSignedBCSTransaction(bcsTxn);\n  }\n\n  /**\n   * Lookup the original address by the current derived address\n   * @param addressOrAuthKey\n   * @returns original address\n   */\n  async lookupOriginalAddress(addressOrAuthKey: MaybeHexString): Promise<HexString> {\n    const resource = await this.getAccountResource(\"0x1\", \"0x1::account::OriginatingAddress\");\n\n    const {\n      address_map: { handle },\n    } = resource.data as any;\n\n    const origAddress = await this.getTableItem(handle, {\n      key_type: \"address\",\n      value_type: \"address\",\n      key: HexString.ensure(addressOrAuthKey).hex(),\n    });\n\n    return new HexString(origAddress);\n  }\n\n  /**\n   * Get block by height\n   *\n   * @param blockHeight Block height to lookup.  Starts at 0\n   * @param withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block\n   */\n  @parseApiError\n  async getBlockByHeight(blockHeight: number, withTransactions?: boolean): Promise<Gen.Block> {\n    return this.client.blocks.getBlockByHeight(blockHeight, withTransactions);\n  }\n\n  /**\n   * Get block by block transaction version\n   *\n   * @param version Ledger version to lookup block information for\n   * @param withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block\n   */\n  @parseApiError\n  async getBlockByVersion(version: number, withTransactions?: boolean): Promise<Gen.Block> {\n    return this.client.blocks.getBlockByVersion(version, withTransactions);\n  }\n\n  /**\n   * Call for a move view function\n   *\n   * @param payload Transaction payload\n   * @param version (optional) Ledger version to lookup block information for\n   *\n   * @returns MoveValue[]\n   */\n  @parseApiError\n  async view(payload: Gen.ViewRequest, ledger_version?: string): Promise<Gen.MoveValue[]> {\n    return this.client.view.view(payload, ledger_version);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  clearCache(tags: string[]) {\n    clear(tags);\n  }\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public readonly status: number,\n    public readonly message: string,\n    public readonly errorCode?: string,\n    public readonly vmErrorCode?: string,\n  ) {\n    super(message);\n  }\n}\n\n/**\n * This error is used by `waitForTransactionWithResult` when waiting for a\n * transaction times out.\n */\nexport class WaitForTransactionError extends Error {\n  public readonly lastSubmittedTransaction: Gen.Transaction | undefined;\n\n  constructor(message: string, lastSubmittedTransaction: Gen.Transaction | undefined) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n}\n\n/**\n * This error is used by `waitForTransactionWithResult` if `checkSuccess` is true.\n * See that function for more information.\n */\nexport class FailedTransactionError extends Error {\n  public readonly transaction: Gen.Transaction;\n\n  constructor(message: string, transaction: Gen.Transaction) {\n    super(message);\n    this.transaction = transaction;\n  }\n}\n\n/**\n * Creates a decorator to parse Gen.ApiError and return a wrapped error that is more developer friendly\n */\nfunction parseApiError(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n  const childFunction = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = async function wrapper(...args: any[]) {\n    try {\n      // We need to explicitly await here so that the function is called and\n      // potentially throws an error. If we just return without awaiting, the\n      // promise is returned directly and the catch block cannot trigger.\n      const res = await childFunction.apply(this, [...args]);\n      return res;\n    } catch (e) {\n      if (e instanceof Gen.ApiError) {\n        throw new ApiError(\n          e.status,\n          JSON.stringify({ message: e.message, ...e.body }),\n          e.body?.error_code,\n          e.body?.vm_error_code,\n        );\n      }\n      throw e;\n    }\n  };\n  return descriptor;\n}\n","import { AptosClient } from \"./aptos_client\";\nimport { IndexerClient } from \"./indexer\";\n\nimport * as Gen from \"../generated/index\";\nimport { CustomEndpoints, Network, NetworkToIndexerAPI, NetworkToNodeAPI } from \"../utils\";\n\ntype NetworkWithCustom = Network | \"CUSTOM\";\n/**\n * Builds a Provider class with an aptos client configured to connect to an Aptos node\n * and indexer client configured to connect to Aptos Indexer.\n *\n * It creates AptosClient and IndexerClient instances based on the network or custom endpoints provided.\n *\n * This class holds both AptosClient and IndexerClient classes's methods and properties so we\n * can instantiate the Provider class and use it to query full node and/or Indexer.\n *\n * @example An example of how to use this class\n * ```\n * const provider = new Provider(Network.DEVNET)\n * const account = await provider.getAccount(\"0x123\");\n * const accountNFTs = await provider.getAccountNFTs(\"0x123\");\n * ```\n *\n * @param network enum of type Network - MAINNET | TESTNET | DEVENET or custom endpoints of type CustomEndpoints\n * @param config AptosClient config arg - additional configuration options for the generated Axios client.\n */\nexport class Provider {\n  aptosClient: AptosClient;\n\n  indexerClient: IndexerClient;\n\n  network: NetworkWithCustom;\n\n  constructor(\n    network: Network | CustomEndpoints,\n    config?: Partial<Gen.OpenAPIConfig>,\n    doNotFixNodeUrl: boolean = false,\n  ) {\n    let fullNodeUrl = null;\n    let indexerUrl = null;\n\n    if (typeof network === \"object\" && isCustomEndpoints(network)) {\n      fullNodeUrl = network.fullnodeUrl;\n      indexerUrl = network.indexerUrl;\n      this.network = \"CUSTOM\";\n    } else {\n      fullNodeUrl = NetworkToNodeAPI[network];\n      indexerUrl = NetworkToIndexerAPI[network];\n      this.network = network;\n    }\n\n    if (!fullNodeUrl || !indexerUrl) {\n      throw new Error(\"network is not provided\");\n    }\n\n    this.aptosClient = new AptosClient(fullNodeUrl, config, doNotFixNodeUrl);\n    this.indexerClient = new IndexerClient(indexerUrl);\n  }\n}\n\nexport interface Provider extends AptosClient, IndexerClient {}\n\n/**\nIn TypeScript, we can’t inherit or extend from more than one class,\nMixins helps us to get around that by creating a partial classes \nthat we can combine to form a single class that contains all the methods and properties from the partial classes.\n{@link https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern}\n\nHere, we combine AptosClient and IndexerClient classes into one Provider class that holds all \nmethods and properties from both classes.\n*/\nfunction applyMixin(targetClass: any, baseClass: any, baseClassProp: string) {\n  Object.getOwnPropertyNames(baseClass.prototype).forEach((propertyName) => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n    if (!propertyDescriptor) return;\n    // eslint-disable-next-line func-names\n    propertyDescriptor.value = function (...args: any) {\n      return (this as any)[baseClassProp][propertyName](...args);\n    };\n    Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n  });\n}\n\napplyMixin(Provider, AptosClient, \"aptosClient\");\napplyMixin(Provider, IndexerClient, \"indexerClient\");\n\n// use exhaustive type predicates\nfunction isCustomEndpoints(network: CustomEndpoints): network is CustomEndpoints {\n  return (\n    network.fullnodeUrl !== undefined &&\n    typeof network.fullnodeUrl === \"string\" &&\n    network.indexerUrl !== undefined &&\n    typeof network.indexerUrl === \"string\"\n  );\n}\n","import { Bytes, Deserializer, Serializer } from \"../bcs\";\nimport { serializeArg } from \"../transaction_builder/builder_utils\";\nimport {\n  stringStructTag,\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagParser,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU64,\n  TypeTagU8,\n} from \"../aptos_types\";\nimport { HexString } from \"./hex_string\";\n\nexport class PropertyValue {\n  type: string;\n\n  value: any;\n\n  constructor(type: string, value: string) {\n    this.type = type;\n    this.value = value;\n  }\n}\n\nexport class PropertyMap {\n  data: { [key: string]: PropertyValue };\n\n  constructor() {\n    this.data = {};\n  }\n\n  setProperty(key: string, value: PropertyValue) {\n    this.data[key] = value;\n  }\n}\n\nexport function getPropertyType(typ: string): TypeTag {\n  let typeTag: TypeTag;\n  if (typ === \"string\" || typ === \"String\") {\n    typeTag = new TypeTagStruct(stringStructTag);\n  } else {\n    typeTag = new TypeTagParser(typ).parseTypeTag();\n  }\n  return typeTag;\n}\n\nexport function getPropertyValueRaw(values: Array<string>, types: Array<string>): Array<Bytes> {\n  if (values.length !== types.length) {\n    throw new Error(\"Length of property values and types not match\");\n  }\n\n  const results = new Array<Bytes>();\n  types.forEach((typ, index) => {\n    try {\n      const typeTag = getPropertyType(typ);\n      const serializer = new Serializer();\n      serializeArg(values[index], typeTag, serializer);\n      results.push(serializer.getBytes());\n    } catch (error) {\n      // if not support type, just use the raw string bytes\n      results.push(new TextEncoder().encode(values[index]));\n    }\n  });\n  return results;\n}\n\nexport function getSinglePropertyValueRaw(value: string, type: string): Uint8Array {\n  if (!value || !type) {\n    throw new Error(\"value or type can not be empty\");\n  }\n\n  try {\n    const typeTag = getPropertyType(type);\n    const serializer = new Serializer();\n    serializeArg(value, typeTag, serializer);\n    return serializer.getBytes();\n  } catch (error) {\n    // if not support type, just use the raw string bytes\n    return new TextEncoder().encode(value);\n  }\n}\n\nexport function deserializePropertyMap(rawPropertyMap: any): PropertyMap {\n  const entries = rawPropertyMap.map.data;\n  const pm = new PropertyMap();\n  entries.forEach((prop: any) => {\n    const { key } = prop;\n    const val: string = prop.value.value;\n    const typ: string = prop.value.type;\n    const typeTag = getPropertyType(typ);\n    const newValue = deserializeValueBasedOnTypeTag(typeTag, val);\n    const pv = new PropertyValue(typ, newValue);\n    pm.setProperty(key, pv);\n  });\n  return pm;\n}\n\nexport function deserializeValueBasedOnTypeTag(tag: TypeTag, val: string): string {\n  const de = new Deserializer(new HexString(val).toUint8Array());\n  let res: string = \"\";\n  if (tag instanceof TypeTagU8) {\n    res = de.deserializeU8().toString();\n  } else if (tag instanceof TypeTagU64) {\n    res = de.deserializeU64().toString();\n  } else if (tag instanceof TypeTagU128) {\n    res = de.deserializeU128().toString();\n  } else if (tag instanceof TypeTagBool) {\n    res = de.deserializeBool() ? \"true\" : \"false\";\n  } else if (tag instanceof TypeTagAddress) {\n    res = HexString.fromUint8Array(de.deserializeFixedBytes(32)).hex();\n  } else if (tag instanceof TypeTagStruct && (tag as TypeTagStruct).isStringTypeTag()) {\n    res = de.deserializeStr();\n  } else {\n    res = val;\n  }\n  return res;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { deserializePropertyMap, PropertyMap, PropertyValue } from \"../utils/property_map_serde\";\n\nexport { PropertyMap, PropertyValue };\nexport class TokenData {\n  /** Unique name within this creator's account for this Token's collection */\n  collection: string;\n\n  /** Description of Token */\n  description: string;\n\n  /** Name of Token */\n  name: string;\n\n  /** Optional maximum number of this Token */\n  maximum?: number;\n\n  /** Total number of this type of Token */\n  supply: number;\n\n  /** URL for additional information / media */\n  uri: string;\n\n  /** default properties of token data */\n  default_properties: PropertyMap;\n\n  /** mutability config of tokendata fields */\n  mutability_config: boolean[];\n\n  constructor(\n    collection: string,\n    description: string,\n    name: string,\n    maximum: number,\n    supply: number,\n    uri: string,\n    default_properties: any,\n    mutability_config: boolean[],\n  ) {\n    this.collection = collection;\n    this.description = description;\n    this.name = name;\n    this.maximum = maximum;\n    this.supply = supply;\n    this.uri = uri;\n    this.default_properties = deserializePropertyMap(default_properties);\n    this.mutability_config = mutability_config;\n  }\n}\n\nexport interface TokenDataId {\n  /** Token creator address */\n  creator: string;\n\n  /** Unique name within this creator's account for this Token's collection */\n  collection: string;\n\n  /** Name of Token */\n  name: string;\n}\n\nexport interface TokenId {\n  token_data_id: TokenDataId;\n\n  /** version number of the property map */\n  property_version: string;\n}\n\n/** server will return string for u64 */\ntype U64 = string;\n\nexport class Token {\n  id: TokenId;\n\n  /** server will return string for u64 */\n  amount: U64;\n\n  /** the property map of the token */\n  token_properties: PropertyMap;\n\n  constructor(id: TokenId, amount: U64, token_properties: any) {\n    this.id = id;\n    this.amount = amount;\n    this.token_properties = deserializePropertyMap(token_properties);\n  }\n}\n"],"names":["pathRegex","replaceDerive","val","replace","HMAC_KEY","HARDENED_OFFSET","getMasterKeyFromSeed","seed","h","hmac","create","sha512","I","update","hexToBytes","digest","IL","slice","IR","key","chainCode","CKDPriv","index","buffer","ArrayBuffer","DataView","setUint32","indexBytes","Uint8Array","zero","data","isValidPath","path","test","split","map","some","Number","isNaN","derivePath","offset","Error","segments","el","parseInt","reduce","parentKeys","segment","sleep","timeMs","Promise","resolve2","setTimeout","DEFAULT_VERSION_PATH_BASE","fixNodeUrl","nodeUrl","out","endsWith","substring","length","DEFAULT_MAX_GAS_AMOUNT","DEFAULT_TXN_EXP_SEC_FROM_NOW","DEFAULT_TXN_TIMEOUT_SEC","APTOS_COIN","Memoize","args","hashFunction","ttlMs","tags","target","propertyKey","descriptor","value","getNewFunction","get","MemoizeExpiring","clearCacheTagsMap","Map","clear","cleared","Set","tag","maps","mp","has","add","size","originalMethod","propMapName","Symbol","returnedValue","that","this","hasOwnProperty","Object","defineProperty","configurable","enumerable","writable","myMap","Array","isArray","push","set","hashKey","a","toString","join","apply","timestampKey","isExpired","timestamp","Date","now","HexString","fromBuffer","fromUint8Array","arr","bytesToHex","ensure","hexString","constructor","startsWith","hex","noPrefix","toShortString","trimmed","toUint8Array","from","hexToBytes2","paginateWithCursor","apiFunction","accountAddress","limitPerRequest","query","_a","cursor","response","ledgerVersion","__headers","NetworkToIndexerAPI","mainnet","testnet","devnet","NetworkToNodeAPI","aptos_types_exports","__export","AccountAddress","AccountAuthenticator","AccountAuthenticatorEd25519","AccountAuthenticatorMultiEd25519","ArgumentABI","AuthenticationKey","ChainId","ChangeSet","Ed25519PublicKey","Ed25519Signature","EntryFunction","EntryFunctionABI","Identifier","Module","ModuleId","MultiAgentRawTransaction","MultiEd25519PublicKey","MultiEd25519Signature","MultiSig","MultiSigTransactionPayload","RawTransaction","RawTransactionWithData","RotationProofChallenge","Script","ScriptABI","SignedTransaction","StructTag","Transaction","TransactionArgument","TransactionArgumentAddress","TransactionArgumentBool","TransactionArgumentU128","TransactionArgumentU16","TransactionArgumentU256","TransactionArgumentU32","TransactionArgumentU64","TransactionArgumentU8","TransactionArgumentU8Vector","TransactionAuthenticator","TransactionAuthenticatorEd25519","TransactionAuthenticatorMultiAgent","TransactionAuthenticatorMultiEd25519","TransactionPayload","TransactionPayloadEntryFunction","TransactionPayloadMultisig","TransactionPayloadScript","TransactionScriptABI","TypeArgumentABI","TypeTag","TypeTagAddress","TypeTagBool","TypeTagParser","TypeTagParserError","TypeTagSigner","TypeTagStruct","TypeTagU128","TypeTagU16","TypeTagU256","TypeTagU32","TypeTagU64","TypeTagU8","TypeTagVector","UserTransaction","WriteSet","stringStructTag","bcs_exports","Deserializer","Serializer","bcsSerializeBool","bcsSerializeBytes","bcsSerializeFixedBytes","bcsSerializeStr","bcsSerializeU128","bcsSerializeU16","bcsSerializeU32","bcsSerializeU8","bcsSerializeUint64","bcsToBytes","deserializeVector","serializeVector","serializeVectorWithFunc","MAX_U8_NUMBER","MAX_U16_NUMBER","MAX_U32_NUMBER","MAX_U64_BIG_INT","BigInt","MAX_U128_BIG_INT","MAX_U256_BIG_INT","ensureBufferWillHandleSize","bytes","byteLength","newBuffer","serialize","values","serializeWithFunction","fn","bytesLength","dv","serializeStr","textEncoder","TextEncoder","serializeBytes","encode","serializeU32AsUleb128","serializeFixedBytes","serializeBool","byteValue","serializeU8","serializeU16","prototype","setUint16","serializeU32","serializeU64","low","high","serializeU128","serializeU256","valueArray","getBytes","checkNumberRange","minValue","maxValue","message","childFunction","valueBigInt","__decorateClass","read","deserializeStr","deserializeBytes","textDecoder","TextDecoder","decode","len","deserializeUleb128AsU32","deserializeFixedBytes","deserializeBool","bool","deserializeU8","getUint8","deserializeU16","getUint16","deserializeU32","getUint32","deserializeU64","deserializeU128","deserializeU256","shift","byte","serializer","forEach","item","func","f","call","deserializer","cls","list","i","deserialize","_AccountAddress","address","LENGTH","fromHex","addr","addressBytes","res","isValid","toHexString","CORE_CODE_ADDRESS","_Ed25519PublicKey","toBytes","_Ed25519Signature","MAX_SIGNATURES_SUPPORTED","public_keys","threshold","k","keys","begin","subarray","_MultiEd25519Signature","signatures","bitmap","BITMAP_LEN","createBitmap","bits","firstBitInByte","dupCheckSet","bit","byteOffset","Math","floor","sigs","load","public_key","signature","super","sender","secondary_signer_addresses","secondary_signers","_deserializer","isStringTypeTag","module_name","name","type_args","fromString","structTag","typeTagStruct","parseTypeTag","moduleName","typeArgs","bail","isWhiteSpace","c","match","isValidAlphabetic","isGeneric","nextToken","tagStr","pos","char","tokenize","tokens","token","typeTags","consume","targetToken","parseCommaList","endToken","allowTraillingComma","tokenTy","tokenVal","moduleTokenTy","module","nameTokenTy","splice","tyTags","idx","sequence_number","payload","max_gas_amount","gas_unit_price","expiration_timestamp_secs","chain_id","code","ty_args","function_name","natural","fromStr","natual","transaction_payload","multisig_address","payloadPresent","moduleId","parts","raw_txn","authenticator","rawTxn","secondarySignerAddresses","getHashSalt","hash","sha3Hash","type_tag","typeTag","doc","tyArgs","_AuthenticationKey","fromMultiEd25519PublicKey","publicKey","pubKeyBytes","MULTI_ED25519_SCHEME","sha3Hash2","fromEd25519PublicKey","ED25519_SCHEME","derivedAddress","DERIVE_RESOURCE_ACCOUNT_SCHEME","structName","sequenceNumber","originator","currentAuthKey","newPublicKey","_AptosAccount","fromAptosAccountObject","obj","privateKeyHex","fromDerivePath","mnemonics","normalizeMnemonics","trim","part","toLowerCase","bytesToHex2","bip39","privateKeyBytes","signingKey","nacl2","keyPair","fromSeed","authKey","pubKey","getResourceAccountAddress","sourceAddress","source","sha3Hash3","signBuffer","detached","secretKey","signHexString","toSign","verifySignature","rawMessage","rawSignature","verify","toPrivateKeyObject","publicKeyHex","AptosAccount","TokenDataFieldsFragmentDoc","CollectionDataFieldsFragmentDoc","GetAccountCoinsData","GetAccountCurrentTokens","GetAccountTokensCount","GetAccountTransactionsCount","GetAccountTransactionsData","GetCurrentDelegatorBalancesCount","GetDelegatedStakingActivities","GetIndexerLedgerInfo","GetTokenActivities","GetTokenActivitiesCount","GetTokenData","GetTokenOwnersData","GetTopUserTransactions","GetUserTransactions","IndexerClient","endpoint","validateAddress","queryIndexer","graphqlQuery","axios","errors","JSON","stringify","getIndexerLedgerInfo","getAccountNFTs","ownerAddress","options","variables","limit","getTokenActivities","idHash","getAccountCoinsData","owner_address","getAccountTokensCount","getAccountTransactionsCount","getAccountTransactionsData","getDelegatedStakingActivities","delegatorAddress","poolAddress","delegator","pool","getTokenActivitiesCount","tokenId","token_id","getTokenData","getTokenOwnersData","propertyVersion","property_version","getTopUserTransactions","getUserTransactions","startVersion","start_version","getCurrentDelegatorBalancesCount","generated_exports","$AccountData","$AccountSignature","$AccountSignature_Ed25519Signature","$AccountSignature_MultiEd25519Signature","$Address","$AptosError","$AptosErrorCode","$Block","$BlockMetadataTransaction","$DecodedTableData","$DeleteModule","$DeleteResource","$DeleteTableItem","$DeletedTableData","$DirectWriteSet","$Ed25519Signature","$EncodeSubmissionRequest","$EntryFunctionId","$EntryFunctionPayload","$Event","$EventGuid","$GasEstimation","$GenesisPayload","$GenesisPayload_WriteSetPayload","$GenesisTransaction","$HashValue","$HealthCheckSuccess","$HexEncodedBytes","$IdentifierWrapper","$IndexResponse","$ModuleBundlePayload","$MoveAbility","$MoveFunction","$MoveFunctionGenericTypeParam","$MoveFunctionVisibility","$MoveModule","$MoveModuleBytecode","$MoveModuleId","$MoveResource","$MoveScriptBytecode","$MoveStruct","$MoveStructField","$MoveStructGenericTypeParam","$MoveStructTag","$MoveStructValue","$MoveType","$MoveValue","$MultiAgentSignature","$MultiEd25519Signature","$MultisigPayload","$MultisigTransactionPayload","$PendingTransaction","$RawTableItemRequest","$RoleType","$ScriptPayload","$ScriptWriteSet","$StateCheckpointTransaction","$StateKeyWrapper","$SubmitTransactionRequest","$TableItemRequest","$Transaction","$TransactionPayload","$TransactionPayload_EntryFunctionPayload","$TransactionPayload_ModuleBundlePayload","$TransactionPayload_MultisigPayload","$TransactionPayload_ScriptPayload","$TransactionSignature","$TransactionSignature_Ed25519Signature","$TransactionSignature_MultiAgentSignature","$TransactionSignature_MultiEd25519Signature","$Transaction_BlockMetadataTransaction","$Transaction_GenesisTransaction","$Transaction_PendingTransaction","$Transaction_StateCheckpointTransaction","$Transaction_UserTransaction","$TransactionsBatchSingleSubmissionFailure","$TransactionsBatchSubmissionResult","$U128","$U256","$U64","$UserTransaction","$VersionedEvent","$ViewRequest","$WriteModule","$WriteResource","$WriteSet","$WriteSetChange","$WriteSetChange_DeleteModule","$WriteSetChange_DeleteResource","$WriteSetChange_DeleteTableItem","$WriteSetChange_WriteModule","$WriteSetChange_WriteResource","$WriteSetChange_WriteTableItem","$WriteSetPayload","$WriteSet_DirectWriteSet","$WriteSet_ScriptWriteSet","$WriteTableItem","AccountsService","ApiError","AptosErrorCode","AptosGeneratedClient","BaseHttpRequest","BlocksService","CancelError","CancelablePromise","EventsService","GeneralService","MoveFunctionVisibility","OpenAPI","RoleType","TablesService","TransactionsService","ViewService","config","request2","url","status","statusText","body","request","isCancelled","executor","_isResolved","_isRejected","_isCancelled","_cancelHandlers","_promise","reject","_resolve","_reject","onResolve","onReject","reason","onCancel","cancelHandler","then","onFulfilled","onRejected","catch","finally","onFinally","cancel","error","console","warn","toStringTag","CookieJar","jar2","jar","setCookie","cookieStr","origin","cookie","parse","filter","getCookies","expires","str","nameLow","charAt","sameSite","secure","axios2","use","headers","URL","cookies","isDefined","isString","isStringWithValue","isBlob","type","stream","arrayBuffer","isFormData","FormData","isSuccess","base64","btoa","getQueryString","params","qs","append","encodeURIComponent","String","process","v","entries","getUrl","encoder","ENCODE_PATH","encodeURI","VERSION","group","BASE","getFormData","formData","_","resolve","async","resolver","getHeaders","TOKEN","username","USERNAME","password","PASSWORD","additionalHeaders","HEADERS","formHeaders","Accept","headers2","credentials","mediaType","getRequestBody","sendRequest","requestConfig","method","withCredentials","WITH_CREDENTIALS","cancelToken","isBCS","includes","responseType","axiosError","getResponseHeader","responseHeader","content","getResponseBody","catchErrorCodes","result","ok","responseBody","AxiosHttpRequest","httpRequest","getAccount","getAccountResources","start","getAccountModules","getAccountResource","resourceType","getAccountModule","getBlockByHeight","blockHeight","withTransactions","getBlockByVersion","version","getEventsByCreationNumber","creationNumber","getEventsByEventHandle","eventHandle","fieldName","spec","healthy","durationSecs","getLedgerInfo","getTableItem","tableHandle","requestBody","getRawTableItem","getTransactions","submitTransaction","getTransactionByHash","txnHash","getTransactionByVersion","txnVersion","getAccountTransactions","submitBatchTransactions","simulateTransaction","estimateMaxGasAmount","estimateGasUnitPrice","estimatePrioritizedGasUnitPrice","encodeSubmission","estimateGasPrice","view","HttpRequest","_b","_c","_d","CREDENTIALS","accounts","blocks","events","general","tables","transactions","AptosErrorCode2","MoveFunctionVisibility2","RoleType2","description","properties","isRequired","authentication_key","contains","format","error_code","vm_error_code","block_height","block_hash","block_timestamp","first_version","last_version","state_change_hash","event_root_hash","state_checkpoint_hash","gas_used","success","vm_status","accumulator_root_hash","changes","id","epoch","round","previous_block_votes_bitvec","proposer","failed_proposer_indices","key_type","value_type","state_key_hash","resource","handle","function","type_arguments","arguments","guid","creation_number","account_address","deprioritized_gas_estimate","gas_estimate","prioritized_gas_estimate","ledger_version","oldest_ledger_version","ledger_timestamp","node_role","oldest_block_height","git_hash","modules","visibility","is_entry","is_view","generic_type_params","return","constraints","friends","exposed_functions","structs","bytecode","abi","is_native","abilities","fields","pattern","execute_as","script","transaction_index","transaction_failures","write_set","assertType","types","ensureBoolean","ensureNumber","ensureBigInt","serializeArg","argVal","argType","arg","argToTransactionArgument","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","TransactionBuilder","signingFunction","rawTxnBuilder","build","ty_tags","getSigningMessage","sha3Hash4","prefix","mergedArray","TransactionBuilderEd25519","rawToSigned","signingMessage","sign","TransactionBuilderMultiEd25519","TransactionBuilderABI","abis","builderConfig","abiMap","scriptABI","funcABI","maxGasAmount","expSecFromNow","toBCSArgs","abiArgs","toTransactionArguments","setSequenceNumber","seqNumber","buildTransactionPayload","ty_arg","bcsArgs","scriptArgs","gasUnitPrice","chainId","senderAccount","expTimestampSec","TransactionBuilderRemoteABI","aptosClient","fetchABI","flatMap","ef","fullName","normlize","s","funcNameParts","funcAbi","param","typeArgABIs","abiArg","entryFunctionABI","rest","senderAddress","all","getChainId","builderABI","_AptosClient","doNotFixNodeUrl","conf","client","bind","generateBCSTransaction","accountFrom","txnBuilder","sigHexStr","generateBCSSimulation","_signingMessage","invalidSigBytes","generateTransaction","builder","signTransaction","rawTransaction","eventHandleStruct","signedTxn","submitSignedBCSTransaction","accountOrPubkey","submitBCSSimulation","bcsBody","queryParams","estimate_gas_unit_price","estimate_max_gas_amount","estimate_prioritized_gas_unit_price","transactionPending","e","waitForTransactionWithResult","extraArgs","timeoutSecs","checkSuccess","lastTxn","isPending","count","isApiError","isRequestError","WaitForTransactionError","FailedTransactionError","waitForTransaction","tableItem","generateRawTransaction","gasEstimate","expireTimestamp","generateSignSubmitTransaction","bcsTxn","pendingTransaction","publishPackage","packageMetadata","codeSerializer","generateSignSubmitWaitForTransaction","forAccount","resources","accountResource","find","r","balance","coin","rotateAuthKeyEd25519","toPrivateKeyBytes","helperAccount","challenge","challengeHex","proofSignedByCurrentPrivateKey","proofSignedByNewPrivateKey","lookupOriginalAddress","addressOrAuthKey","address_map","origAddress","clearCache","AptosClient","parseApiError","ApiError2","errorCode","vmErrorCode","lastSubmittedTransaction","transaction","Provider","network","fullNodeUrl","indexerUrl","isCustomEndpoints","fullnodeUrl","indexerClient","applyMixin","targetClass","baseClass","baseClassProp","getOwnPropertyNames","propertyName","propertyDescriptor","getOwnPropertyDescriptor","PropertyValue","PropertyMap","setProperty","getPropertyType","typ","deserializePropertyMap","rawPropertyMap","pm","prop","newValue","deserializeValueBasedOnTypeTag","pv","de","token_types_exports","Token","TokenData","collection","maximum","supply","uri","default_properties","mutability_config","amount","token_properties"],"sourceRoot":""}
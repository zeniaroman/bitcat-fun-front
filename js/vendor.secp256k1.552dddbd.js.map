{"version":3,"file":"js/vendor.secp256k1.552dddbd.js","mappings":"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","sources":["webpack://app/./node_modules/secp256k1/elliptic.js","webpack://app/./node_modules/secp256k1/lib/elliptic.js","webpack://app/./node_modules/secp256k1/lib/index.js"],"sourcesContent":["module.exports = require('./lib')(require('./lib/elliptic'))\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n"],"names":["module","exports","require","EC","ec","ecparams","curve","BN","n","constructor","loadCompressedPublicKey","first","xbuf","x","cmp","p","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","x3","redISub","isZero","keyPair","pub","loadUncompressedPublicKey","ybuf","loadPublicKey","pubkey","length","subarray","savePublicKey","output","point","encode","i","contextRandomize","privateKeyVerify","seckey","bn","privateKeyNegate","negate","sub","umod","toArrayLike","Uint8Array","set","privateKeyTweakAdd","tweak","iadd","isub","tweaked","privateKeyTweakMul","imul","publicKeyVerify","pair","publicKeyCreate","keyFromPrivate","getPublic","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","pairs","Array","add","isInfinity","publicKeyTweakAdd","g","mul","publicKeyTweakMul","signatureNormalize","sig","r","s","nh","signatureExport","obj","sigR","sigS","lenR","posR","lenS","posS","outputlen","signatureImport","slice","Error","ecdsaSign","message","data","noncefn","_noncefn","counter","nonce","isValid","d","sign","canonical","k","pers","err","signature","recid","recoveryParam","ecdsaVerify","msg32","sigObj","sigr","sigs","verify","ecdsaRecover","recoverPubKey","ecdh","hashfn","scalar","undefined","sha256","hash","update","digest","getX","toArray","getY","errors","IMPOSSIBLE_CASE","TWEAK_ADD","TWEAK_MUL","CONTEXT_RANDOMIZE_UNKNOW","SECKEY_INVALID","PUBKEY_PARSE","PUBKEY_SERIALIZE","PUBKEY_COMBINE","SIG_PARSE","SIGN","RECOVER","ECDH","assert","cond","msg","isUint8Array","name","value","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","len","Object","prototype","toString","call","secp256k1","seed","compressed","options"],"sourceRoot":""}
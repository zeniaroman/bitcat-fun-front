{"version":3,"file":"js/9741.c2bcf030.js","mappings":"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","sources":["webpack://app/./node_modules/vue-loader/dist/exportHelper.js","webpack://app/./src/components/ai/AiAgentCard.vue","webpack://app/./src/components/ai/AiAgentCard.vue?5b63","webpack://app/./src/pages/AiAgentFormPage.vue","webpack://app/./src/pages/AiAgentFormPage.vue?042c"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n","<template>\n  <div class=\"agent-card\" :class=\"{ 'disabled': isDisabled }\">\n    <div class=\"card-inner\">\n      <div class=\"card-front\">\n        <div class=\"avatar-container\">\n          <div class=\"avatar-glow\"></div>\n          <img :src=\"prepareAvatarUrl(avatar)\" :alt=\"name\" class=\"avatar\">\n          <div class=\"level-badge\"><i class=\"fas fa-chart-line\"></i> {{ used }}</div>\n        </div>\n        <div class=\"agent-info\">\n          <h3 class=\"name\">{{ name }}</h3>\n          <div class=\"tag\">{{ agentTag }}</div>\n          <p class=\"description\">{{ description }}</p>\n          <div class=\"creator\">Created by <span>{{ userTag }}</span></div>\n        </div>\n        <div class=\"card-actions\">\n          <button @click=\"openAgent(agentTag)\" class=\"card-btn\" :disabled=\"isDisabled\">\n            <span class=\"btn-text\">Profile</span>\n          </button>\n          <button \n            class=\"card-btn primary\" \n            @click=\"useAgent\"\n            :disabled=\"isDisabled\"\n          >\n            <i class=\"fas fa-comments\"></i>\n            <span class=\"btn-text\">Chat</span>\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-effects\">\n      <div class=\"glow-effect\"></div>\n      <div class=\"particles\"></div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps, defineEmits, ref } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\n\nconst router = useRouter()\n\nconst store = useStore()\nconst isUsed = ref(false)\n\nconst props = defineProps({\n  avatar: {\n    type: [String, Number],\n    required: true\n  },\n  name: {\n    type: String,\n    required: true\n  },\n  agentTag: {\n    type: String,\n    required: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  userTag: {\n    type: String,\n    required: true\n  },\n  used: {\n    type: String,\n    required: false,\n    default: '0'\n  },\n  \n  isDisabled: {\n    type: Boolean,\n    default: false\n  }\n})\n\ndefineEmits(['more-info', 'use-agent'])\n\nconst openAgent = (agentTag) => {\n  router.push(`/ai-agents/${agentTag}`)\n}\n\nconst useAgent = () => {\n  isUsed.value = true\n  \n  // Update agent info in store\n  store.commit('UPDATE_AGENT_INFO', {\n    name: props.name,\n    agentTag: props.agentTag,\n    avatar: props.avatar\n  })\n  \n  // Сохраняем выбранного агента в localStorage\n  localStorage.setItem('selectedAgent', JSON.stringify({\n    name: props.name,\n    agentTag: props.agentTag,\n    // description: props.description,\n    avatar: props.avatar\n  }))\n  \n  // Получаем историю чата для этого агента\n  let chatHistory = JSON.parse(localStorage.getItem('chatHistory') || '{}')\n  \n  // Если нет истории для этого агента, создаем первое сообщение с описанием\n  if (!chatHistory[props.agentTag]) {\n    chatHistory[props.agentTag] = [{\n      type: 'agent',\n      content: props.description,\n      timestamp: new Date().toISOString()\n    }]\n    localStorage.setItem('chatHistory', JSON.stringify(chatHistory))\n  }\n  \n  // Открываем чат с агентом\n  store.commit('SET_CURRENT_AGENT', {\n    name: props.name,\n    agentTag: props.agentTag,\n    // description: props.description,\n    avatar: props.avatar\n  })\n  \n  // Открываем окно чата\n  store.commit('TOGGLE_AGENTS_LIST', false)\n  store.commit('TOGGLE_CHAT', true)\n}\n\nconst prepareAvatarUrl = (avatarNum) => {\n  return `https://bitcat.fun/data/ai-agents/bitcat-ai-agent-avatar-${avatarNum}.png`\n}\n</script>\n\n<style scoped>\n.agent-card {\n  position: relative;\n  width: 300px;\n  height: 420px;\n  perspective: 1000px;\n  margin: 20px;\n  transition: transform 0.3s ease;\n}\n\n.card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transform-style: preserve-3d;\n  transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: 20px;\n  background: linear-gradient(145deg, #ffffff, #f0f0f0);\n  box-shadow: \n    0 10px 20px rgba(0, 0, 0, 0.1),\n    0 6px 6px rgba(0, 0, 0, 0.1),\n    inset 0 -5px 15px rgba(255, 255, 255, 0.6);\n}\n\n.agent-card:hover {\n  transform: translateY(-5px);\n}\n\n.agent-card:hover .card-inner {\n  transform: translateZ(10px);\n}\n\n.card-front {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow: hidden;\n}\n\n.avatar-container {\n  position: relative;\n  width: 150px;\n  height: 150px;\n  margin-bottom: 20px;\n}\n\n.avatar {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  object-fit: cover;\n  z-index: 2;\n  position: relative;\n  border: 4px solid #fff;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease;\n}\n\n.avatar-glow {\n  position: absolute;\n  top: -10px;\n  left: -10px;\n  right: -10px;\n  bottom: -10px;\n  background: radial-gradient(circle at 50% 50%, \n    rgba(76, 175, 80, 0.3),\n    rgba(76, 175, 80, 0) 70%);\n  border-radius: 50%;\n  z-index: 1;\n  animation: pulse 2s infinite;\n}\n\n.level-badge {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  background: #e38f00;\n  color: white;\n  padding: 5px 10px;\n  border-radius: 12px;\n  font-size: 0.8em;\n  font-weight: bold;\n  z-index: 3;\n  transform: translateY(50%);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n}\n\n.agent-info {\n  text-align: center;\n  width: 100%;\n}\n\n.name {\n  margin: 0;\n  font-size: 1.5em;\n  color: #333;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tag {\n  color: #666;\n  font-size: 0.9em;\n  margin: 5px 0;\n  background: #f0f0f0;\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.description {\n  font-size: 0.9em;\n  color: #555;\n  margin: 10px 0;\n  line-height: 1.4;\n  max-height: 80px;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n}\n\n.creator {\n  font-size: 0.8em;\n  color: #888;\n  margin: 10px 0;\n}\n\n.creator span {\n  color: #e38f00;\n  font-weight: 500;\n}\n\n.card-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: auto;\n  width: 100%;\n}\n\n.card-btn {\n  flex: 1;\n  background: #e38f00;\n  border: none;\n  padding: 8px 15px;\n  border-radius: 12px;\n  color: white;\n  font-size: 0.875rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n  font-weight: 600;\n  cursor: pointer;\n  text-decoration: none;\n}\n\n.card-btn.primary {\n  background: linear-gradient(135deg, #ff9800, #ff5722);\n}\n\n.card-btn.primary:hover {\n  box-shadow: 0 4px 15px rgba(255, 152, 0, 0.3);\n  background: linear-gradient(15deg, #ff9800, #ff5722);\n}\n\n.card-btn:hover {\n  background: #ff9800;\n}\n\n.btn-text {\n  font-weight: 600;\n}\n\n.btn-icon {\n  font-size: 1rem;\n  transition: transform 0.3s ease;\n}\n\n.card-btn:hover .btn-icon {\n  transform: translateX(3px);\n}\n\n.card-effects {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n}\n\n.glow-effect {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: radial-gradient(circle at var(--x, 50%) var(--y, 50%), \n    rgba(76, 175, 80, 0.1),\n    rgba(76, 175, 80, 0) 70%);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.agent-card:hover .glow-effect {\n  opacity: 1;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    opacity: 0.5;\n  }\n  50% {\n    transform: scale(1.05);\n    opacity: 0.3;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 0.5;\n  }\n}\n\n@media (max-width: 480px) {\n  .agent-card {\n    width: 280px;\n    height: 400px;\n  }\n\n  .avatar-container {\n    width: 120px;\n    height: 120px;\n  }\n\n  .name {\n    font-size: 1.3em;\n  }\n}\n</style>\n","import script from \"./AiAgentCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AiAgentCard.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AiAgentCard.vue?vue&type=style&index=0&id=da232676&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-da232676\"]])\n\nexport default __exports__","<template>\n  <div class=\"page-container\">\n    <div v-if=\"!isUpdateMode\" class=\"page-header\">\n      <h1>🤖 AI Agents Launcher</h1>\n      <p class=\"subtitle\">Create your own AI Agent for the BITCAT Universe or for your own Telegram group</p>\n    </div>\n    <div v-else class=\"page-header\">\n      <h1>🤖 Update AI Agent</h1>\n      <p class=\"subtitle\">Upgrade your AI agent and make it better</p>\n    </div>\n    <!-- Agent Carousel -->\n    <div class=\"agent-carousel\" v-if=\"!isUpdateMode\">\n      <span class=\"carousel-title\">Sample AI Agents</span>\n      <transition name=\"fade\" mode=\"out-in\">\n        <div class=\"carousel-slide\" :key=\"currentSlide\">\n          <AiAgentCard v-bind=\"sampleAgents[currentSlide]\" @more-info=\"handleMoreInfo(sampleAgents[currentSlide])\" />\n        </div>\n      </transition>\n      <div class=\"carousel-indicators\">\n        <button \n          v-for=\"(_, index) in sampleAgents\" \n          :key=\"index\"\n          class=\"indicator\"\n          :class=\"{ active: currentSlide === index }\"\n          @click=\"setSlide(index)\"\n        ></button>\n      </div>\n    </div>\n    \n    <div class=\"create-agent-page\">\n\n      <div class=\"create-form\">\n        <!-- Basic Information -->\n        <div class=\"form-section\">\n          <h2>Basic Information</h2>\n          <h2 class=\"warning-message\" v-if=\"!store.getters.isAuthenticated\">Your need to be logged in to create an AI Agent. <router-link to=\"/my\" class=\"more-info\">Login →</router-link></h2>\n\n          <div class=\"avatar-preview\" @click=\"showAvatarPopup = true\">\n            <img :src=\"prepareAvatarUrl(selectedAvatar)\" alt=\"Agent Avatar\">\n            <div class=\"avatar-overlay\">Change Avatar</div>\n          </div>\n\n          <div class=\"form-group\">\n            <label>Agent Name<span class=\"char-counter\" :class=\"{ 'near-limit': agentData.name.length > 40 }\">({{ agentData.name.length }}/50)</span></label>\n            <input \n              v-model=\"agentData.name\" \n              type=\"text\" \n              placeholder=\"Enter agent name\"\n              @input=\"validateName\"\n              maxlength=\"50\"\n            >\n            <span class=\"error-message\" v-if=\"errors.name\">{{ errors.name }}</span>\n          </div>\n\n          <div class=\"form-group\">\n            <label>Agent Tag<span class=\"char-counter\" :class=\"{ 'near-limit': agentData.tag.length > 25 }\">({{ agentData.tag.length }}/30)</span></label>\n            <input \n              v-model=\"agentData.tag\" \n              type=\"text\" \n              placeholder=\"e.g., awesome_agent (сannot be changed)\"\n              @input=\"validateTag\"\n              :disabled=\"isUpdateMode\"\n              maxlength=\"30\"\n            >\n            <span class=\"hint\">Only lowercase letters, numbers and underscores. Must end with 'agent'.</span>\n            <span class=\"error-message\" v-if=\"errors.tag\">{{ errors.tag }}</span>\n          </div>\n\n          <div class=\"form-group\">\n            <label>Description<span class=\"char-counter\" :class=\"{ 'near-limit': agentData.description.length > 90 }\">({{ agentData.description.length }}/100)</span></label>\n            <textarea \n              v-model=\"agentData.description\" \n              placeholder=\"Describe your agent's purpose and capabilities. This will be the first message in a new chat with an agent.\"\n              @input=\"validateDescription($event)\"\n              rows=\"3\"\n            ></textarea>\n          </div>\n\n          <div class=\"form-group form-group_last\">\n            <!-- More connection options -->\n            <div class=\"connection-options\">\n              <button \n                class=\"toggle-options\" \n                @click=\"showConnectionOptions = !showConnectionOptions\"\n              >\n                {{ showConnectionOptions ? 'Hide Options' : 'Show API Options' }}\n              </button>\n              \n              <div class=\"options-content\" v-if=\"showConnectionOptions\">\n                <div class=\"form-group\">\n                  <label>Your Telegram bot API Key</label>\n                  <input \n                    v-model=\"agentData.apiKey\" \n                    type=\"text\" \n                    placeholder=\"API Key is optional (soon)\"\n                    :disabled=\"true\"\n                  >\n                  <span class=\"hint hint-last\">If you'd like to connect your AI Agent with your Telegram bot. With zero code\n                    <span class=\"error-message\" v-if=\"errors.apiKey\">. {{ errors.apiKey }}</span></span>\n                  \n                  <input \n                    v-model=\"agentData.botUsername\" \n                    type=\"text\" \n                    placeholder=\"Bot username without @\"\n                    :disabled=\"true\"\n                  >\n                  <span class=\"hint\">Required if you provide an API key\n                    <span class=\"error-message\" v-if=\"errors.botUsername\">. {{ errors.botUsername }}</span></span>\n                </div>\n                \n                <!-- <p class=\"options-description\">\n                  <strong>Important</strong><br>\n                  If you don't want to create a separate Telegram bot and provide an API key, you can specify groups (up to 5) where you plan to use your agent. In this case, the API key will be ignored.\n                </p>\n                <p class=\"options-description\">\n                  After creation, you can add @BitcatAiBot as an administrator to your group, and it will respond to messages according to your prompt.\n                </p>\n                \n                <div class=\"form-group form-group_last\">\n                  <label>Telegram Groups</label>\n                  <input \n                    v-model=\"agentData.groups\"\n                    type=\"text\"\n                    placeholder=\"Enter group names separated by commas (e.g., group1, group2)\"\n                    @input=\"validateGroups\"\n                    :disabled=\"true\"\n                  >\n                  <span class=\"hint\">Up to 5 groups, separated by commas. Without @</span>\n                  <span class=\"error-message\" v-if=\"errors.groups\">{{ errors.groups }}</span>\n                </div> -->\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Agent Prompt Template -->\n        <div class=\"form-section\">\n          <h2>Agent Prompt</h2>\n          <div class=\"form-group form-group_last prompt-template\">\n            <div class=\"prompt-editor\">\n              <p class=\"prompt-line\">\n                You are a<small> (required)</small> <textarea class=\"prompt-input\" v-model=\"promptData.role\" @input=\"checkLength($event, 'role', 100)\" placeholder=\"e.g., crypto trading expert, NFT curator, blockchain analyst\"></textarea>\n                <span class=\"char-counter\" :class=\"{ 'near-limit': promptData.role.length > 80 }\">({{ promptData.role.length }}/100)</span>\n              </p>\n              <span class=\"error-message\" v-if=\"errors.role\">{{ errors.role }}</span>\n              \n              <p class=\"prompt-line\">\n                Your communication style is <textarea class=\"prompt-input\" v-model=\"promptData.style\" @input=\"checkLength($event, 'style', 50)\" placeholder=\"e.g., professional and friendly, casual but informative\"></textarea>\n                <span class=\"char-counter\" :class=\"{ 'near-limit': promptData.style.length > 40 }\">({{ promptData.style.length }}/50)</span>\n              </p>\n              \n              <div class=\"prompt-tasks\">\n                <p class=\"prompt-line\">\n                  Your main task\n                  <textarea class=\"prompt-input\" v-model=\"promptData.task1\" @input=\"checkLength($event, 'task1', 400)\" placeholder=\"Enter primary task. Write what task the agent should perform\"></textarea>\n                  <span class=\"char-counter\" :class=\"{ 'near-limit': promptData.task1.length > 320 }\">({{ promptData.task1.length }}/400)</span>\n                </p>\n              </div>\n\n              <p class=\"prompt-line\">\n                Your expertise areas include <textarea class=\"prompt-input\" v-model=\"promptData.expertise\" @input=\"checkLength($event, 'expertise', 100)\" placeholder=\"e.g., DeFi, NFTs, blockchain gaming\"></textarea>\n                <span class=\"char-counter\" :class=\"{ 'near-limit': promptData.expertise.length > 80 }\">({{ promptData.expertise.length }}/100)</span>\n              </p>\n              \n              <p class=\"prompt-line\">\n                Additional context <textarea class=\"prompt-input\" v-model=\"promptData.context\" @input=\"checkLength($event, 'context', 300)\" placeholder=\"Any other relevant information about your agent\"></textarea>\n                <span class=\"char-counter\" :class=\"{ 'near-limit': promptData.context.length > 240 }\">({{ promptData.context.length }}/300)</span>\n              </p>\n            </div>\n\n            <div class=\"prompt-preview\">\n              <h3>Prompt Preview <button class=\"toggle-preview\" @click=\"showPreview = !showPreview\">{{ showPreview ? 'Hide' : 'Show' }}</button></h3>\n              <div class=\"preview-content\" v-if=\"showPreview\">{{ generatedPrompt }}</div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Advanced Settings -->\n        <div class=\"form-section\">\n          <h2>Advanced Settings</h2>\n          <div class=\"form-group\">\n            <label>Response Length</label>\n            <div class=\"slider-container\">\n              <input \n                type=\"range\" \n                v-model=\"agentData.settings.responseLength\" \n                min=\"25\" \n                max=\"250\" \n                step=\"25\"\n              >\n              <span>{{ agentData.settings.responseLength }} tokens</span>\n            </div>\n            <span class=\"setting-hint\">Controls how long the agent's responses will be. Lower values (25-100) for concise answers, higher values (150-250) for more detailed explanations.</span>\n          </div>\n\n          <div class=\"form-group form-group_last\">\n            <label>Temperature</label>\n            <div class=\"slider-container\">\n              <input \n                type=\"range\" \n                v-model=\"agentData.settings.temperature\" \n                min=\"0.1\" \n                max=\"1.5\" \n                step=\"0.1\"\n              >\n              <span>{{ agentData.settings.temperature }}</span>\n            </div>\n            <span class=\"setting-hint\">Controls the creativity of responses. Lower values (0.1-0.3) for more focused and deterministic responses, higher values (0.7-1.5) for more creative and varied outputs. Recommended values are between 0.5 and 1.0.</span>\n          </div>\n        </div>\n\n        <!-- Credits policy -->\n        <div class=\"form-section credits-policy\">\n          <h2>Credits Policy</h2>\n          <div class=\"policy-content\">\n            <div class=\"policy-preview\" :class=\"{ expanded: showFullPolicy }\">\n              <p><strong>🎁 Currently FREE for Everyone!</strong> During our promotional period, all agent interactions are completely free. To create an agent and make it available, you simply need to be a holder of 100,000 BITCAT tokens for each new agent.</p>\n              \n              <div class=\"policy-details\" v-if=\"showFullPolicy\" :class=\"{ visible: showFullPolicy }\">\n                <h3>How Credits Work:</h3>\n                <ul>\n                  <li>\n                    <strong>Free Within BITCAT:</strong> Using your agent inside the BITCAT Universe is free. Your agent will be publicly available to everyone thanks to the Agent Tag(your_tag_agent) both on the site(AI agents list) and in the telegram(@BitcatAiBot your_tag_agent Hello) group\n                  </li>\n                  <li>\n                    <strong>External Usage:</strong> Connecting your agent to external platforms (Telegram groups, Twitter*) requires credits. You can buy credits for BITCAT tokens.\n                    <ul>\n                      <li>Each interaction outside BITCAT Universe consumes credits</li>\n                      <li>Credits must be available in your account before external usage</li>\n                      <li>*Twitter integration coming soon</li>\n                    </ul>\n                  </li>\n                  <li>\n                    <strong>Future Plans:</strong> Credits will become a paid feature after the promotional period\n                  </li>\n                </ul>\n              </div>\n            </div>\n            \n            <button class=\"toggle-policy\" @click=\"showFullPolicy = !showFullPolicy\">\n              {{ showFullPolicy ? 'Show Less' : 'Show More' }}\n            </button>\n          </div>\n        </div>\n\n        <div class=\"form-actions\">\n          <strong v-if=\"!isUpdateMode\">Free for now. Just need to be holder of <s>100,000</s> <u style=\"color: #ff0000\">50,000</u> BITCAT</strong>\n          <button v-if=\"store.getters.isAuthenticated\"\n            class=\"create-button\" \n            @click=\"handleSubmit\"\n            :disabled=\"!isFormValid || isCreating\"\n          >\n            {{ isUpdateMode ? 'Update Agent' : 'Create Agent' }}\n          </button>\n          <router-link v-else to=\"/my\" class=\"create-button\">\n            Login first\n          </router-link>\n          <span class=\"error-message\" v-if=\"errors.general\">{{ errors.general }}</span>\n        </div>\n      </div>\n\n      <!-- Avatar Selection Popup -->\n      <div class=\"popup\" v-if=\"showAvatarPopup\">\n        <div class=\"popup-content\">\n          <h3>AI Agent Avatars for Universe</h3>\n          <div class=\"avatar-grid\">\n            <div \n              v-for=\"avatar in 26\" \n              :key=\"avatar\"\n              class=\"avatar-option\"\n              :class=\"{ selected: selectedAvatar == avatar }\"\n              @click=\"selectAvatar(avatar)\"\n            >\n              <img :src=\"prepareAvatarUrl(avatar)\" :alt=\"`avatar #${avatar}`\">\n            </div>\n          </div>\n          <button class=\"close-button\" @click=\"showAvatarPopup = false\">Close</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted, onUnmounted, watch } from 'vue'\nimport { useRouter } from 'vue-router'\nimport axios from 'axios'\nimport store from '@/vuex'\nimport AiAgentCard from '@/components/ai/AiAgentCard.vue'\n\nconst router = useRouter()\n\n// State\nconst showAvatarPopup = ref(false)\nconst selectedAvatar = ref(Math.floor(Math.random() * 26) + 1)\nconst newKnowledgeArea = ref('')\nconst isCreating = ref(false)\nconst errors = reactive({\n  name: '',\n  tag: '',\n  apiKey: '',\n  botUsername: '',\n  groups: '',\n  role: '',\n  general: ''\n})\n\n// Add to your reactive data\nconst showFullPolicy = ref(false)\nconst showConnectionOptions = ref(false)\nconst showPreview = ref(false)\n\n// Add to script section\nconst promptData = reactive({\n  role: '',\n  style: '',\n  task1: '',\n  task2: '',\n  task3: '',\n  expertise: '',\n  context: ''\n})\n\nconst updatePrompt = (field) => {\n  const input = event.target\n  promptData[field] = input.textContent.trim()\n  \n  // Reset placeholder if empty\n  if (!promptData[field]) {\n    input.textContent = ''\n  }\n}\n\nconst validateDescription = (event) => {\n  const input = event.target\n  const text = input.value\n    .replace(/\\s+/g, ' ')      // Replace multiple spaces with single space\n    .replace(/\\n+/g, ' ')      // Replace line breaks with space\n\n  if (text.length > 100) {\n    input.value = text.substring(0, 100)\n  }\n  agentData.description = text\n    .replace(/\\s+/g, ' ')\n    .replace(/\\n+/g, ' ')\n}\n\nconst checkLength = (event, field, maxLength) => {\n  const input = event.target\n  const text = input.value\n    .replace(/\\s+/g, ' ')      // Replace multiple spaces with single space\n    .replace(/\\n+/g, ' ')      // Replace line breaks with space\n    .trim()\n  if (text.length > maxLength) {\n    input.value = text.substring(0, maxLength)\n  }\n  promptData[field] = input.value\n    .replace(/\\s+/g, ' ')\n    .replace(/\\n+/g, ' ')\n}\n\nconst generatedPrompt = computed(() => {\n  let prompt = `You are a ${promptData.role || '[role]'}.`\n  \n  if (promptData.style) {\n    prompt += `\\n\\nYour communication style: ${promptData.style}. `\n  }\n  \n  if (promptData.task1) {\n    prompt += '\\n\\nYour main task:\\n'\n    prompt += `- ${promptData.task1}`\n  }\n  \n  // prompt += '\\nYou are part of the BITCAT Universe, a Community Takeover project on the Solana blockchain. '\n  \n  if (promptData.expertise) {\n    prompt += `\\n\\nYour expertise areas include: ${promptData.expertise}. `\n  }\n  \n  if (promptData.context) {\n    prompt += `\\n\\nAdditional context: ${promptData.context}`\n  }\n  \n  // prompt += '\\n\\nFormat: text/plain. Language: respond in the language of the query. Output: Always provide your response in plain text, without any formatting, markdown symbols, or line breaks (\\\\n). Respond directly and concisely with plain text output. Do not use symbols like **, or additional line breaks in your answers.'\n  \n  return prompt\n})\n\n// Sample agents data\nconst sampleAgents = [\n  {\n    avatar: 3,\n    name: \"BitTrader Pro\",\n    agentTag: \"bittrader_pro_agent\",\n    description: \"Expert crypto trading assistant with real-time market analysis and portfolio management.\",\n    userTag: \"bitcat\",\n    isDisabled: true,\n    used: 571\n  },\n  {\n    avatar: 7,\n    name: \"NFT Curator\",\n    agentTag: \"nft_curator_agent\",\n    description: \"Your personal guide in the NFT world. Discovers rare gems and analyzes market trends.\",\n    userTag: \"bitcat\",\n    isDisabled: true,\n    used: 154\n  },\n  {\n    avatar: 12,\n    name: \"DeFi Wizard\",\n    agentTag: \"defi_wizard_agent\",\n    description: \"Smart DeFi strategist helping you navigate yield farming and liquidity pools.\",\n    userTag: \"bitcat\",\n    isDisabled: true,\n    used: 416\n  },\n  {\n    avatar: 15,\n    name: \"Chain Guardian\",\n    agentTag: \"chain_guardian_agent\",\n    description: \"Blockchain security expert monitoring smart contracts and transactions.\",\n    userTag: \"bitcat\",\n    isDisabled: true,\n    used: 261\n  },\n  {\n    avatar: 19,\n    name: \"MetaVerse Guide\",\n    agentTag: \"meta_guide_agent\",\n    description: \"Your companion in exploring and building in the metaverse.\",\n    userTag: \"bitcat\",\n    isDisabled: true,\n    used: 75\n  },\n  {\n    avatar: 23,\n    name: \"Web3 Sage\",\n    agentTag: \"web3_sage_agent\",\n    description: \"Decentralized web expert helping with dApps and web3 development.\",\n    userTag: \"bitcat\",\n    isDisabled: true,\n    used: 184\n  }\n]\n\n// Carousel logic\nconst currentSlide = ref(0)\nlet carouselInterval\n\nconst setSlide = (index) => {\n  currentSlide.value = index\n}\n\nconst nextSlide = () => {\n  currentSlide.value = (currentSlide.value + 1) % sampleAgents.length\n}\n\nconst handleMoreInfo = (agent) => {\n  console.log('More info for:', agent.agentTag)\n}\n\nonUnmounted(() => {\n  if(!isUpdateMode.value) {\n    clearInterval(carouselInterval)\n  }\n})\n\n// Form data\nconst agentData = reactive({\n  name: '',\n  tag: '',\n  description: '',\n  avatar: '',\n  role: 'assistant',\n  traits: {\n    formal: false,\n    friendly: true,\n    professional: false,\n    casual: false\n  },\n  knowledgeAreas: [],\n  settings: {\n    responseLength: 150,\n    temperature: 0.7\n  },\n  apiKey: '',\n  botUsername: '',\n  groups: ''\n})\n\n// Validation\nconst validateName = () => {\n  if (agentData.name.length < 3) {\n    errors.name = 'Name must be at least 3 characters long'\n  } else if (agentData.name.length > 50) {\n    errors.name = 'Name must be less than 50 characters'\n  } else {\n    errors.name = ''\n  }\n}\n\nconst validateTag = () => {\n  const tagRegex = /^[a-z0-9_]+$/\n  if (!tagRegex.test(agentData.tag)) {\n    errors.tag = 'Tag can only contain lowercase letters, numbers and underscores'\n  } else {\n    errors.tag = ''\n  }\n}\n\nconst validateGroups = () => {\n  const groups = agentData.groups.split(',')\n  if (groups.length > 5) {\n    errors.groups = 'You can specify up to 5 groups'\n  } else {\n    errors.groups = ''\n  }\n}\n\nconst validateForm = () => {\n  let isValid = true\n  errors.general = ''\n\n  // Reset all errors\n  Object.keys(errors).forEach(key => errors[key] = '')\n\n  // Name validation\n  if (!agentData.name.trim()) {\n    errors.name = 'Name is required'\n    isValid = false\n  } else if (agentData.name.length < 3) {\n    errors.name = 'Name must be at least 3 characters long'\n    isValid = false\n  }\n\n  // Tag validation\n  if (!agentData.tag.trim()) {\n    errors.tag = 'Tag is required'\n    isValid = false\n  } else if (!/^[a-z0-9_]+agent$/.test(agentData.tag)) {\n    errors.tag = 'Tag must contain only lowercase letters, numbers, underscores and end with \"agent\"'\n    isValid = false\n  }\n\n  // API Key or Groups validation\n  if (agentData.apiKey && !/^[0-9]+:[A-Za-z0-9_-]+$/.test(agentData.apiKey)) {\n    errors.apiKey = 'Invalid API Key format'\n    isValid = false\n  }\n\n  if (agentData.botUsername && !/^[a-zA-Z0-9_]+$/.test(agentData.botUsername)) {\n    errors.botUsername = 'Invalid bot username format'\n    isValid = false\n  }\n\n  if (agentData.groups) {\n    const groupsList = agentData.groups.split(',').map(g => g.trim())\n    if (groupsList.length > 5) {\n      errors.groups = 'Maximum 5 groups allowed'\n      isValid = false\n    }\n  }\n\n  // Only role is required in prompt\n  if (!promptData.role.trim()) {\n    errors.role = 'Role is required'\n    isValid = false\n  }\n\n  return isValid\n}\n\n// Computed\nconst isFormValid = computed(() => {\n  return agentData.name.length >= 3 &&\n    agentData.tag.length > 0 &&\n    agentData.description.length > 0 &&\n    selectedAvatar.value &&\n    !errors.name &&\n    !errors.tag &&\n    !errors.groups\n})\n\nconst prepareAvatarUrl = (avatarNum) => {\n  return `https://bitcat.fun/data/ai-agents/bitcat-ai-agent-avatar-${avatarNum}.png`\n}\n\n// Methods\nconst selectAvatar = (avatarNum) => {\n  selectedAvatar.value = avatarNum\n  agentData.avatar = avatarNum\n  showAvatarPopup.value = false\n}\n\nconst addKnowledgeArea = () => {\n  if (newKnowledgeArea.value.trim() && !agentData.knowledgeAreas.includes(newKnowledgeArea.value)) {\n    agentData.knowledgeAreas.push(newKnowledgeArea.value.trim())\n    newKnowledgeArea.value = ''\n  }\n}\n\nconst removeKnowledgeArea = (index) => {\n  agentData.knowledgeAreas.splice(index, 1)\n}\n\nconst handleSubmit = async () => {\n  if (!validateForm()) {\n    errors.general = 'Please fix the errors before submitting'\n    return\n  }\n\n  isCreating.value = true\n\n  try {\n    // Prepare agent data\n    const agentPayload = {\n      name: agentData.name.trim(),\n      tag: agentData.tag.trim(),\n      description: agentData.description ? agentData.description.trim() : null,\n      avatar: selectedAvatar.value,\n      apiKey: agentData.apiKey ? agentData.apiKey.trim() : null,\n      botUsername: agentData.botUsername ? agentData.botUsername.trim() : null,\n      groups: agentData.groups ? agentData.groups.trim() : '',\n      prompt: {\n        role: promptData.role.trim(),\n        style: promptData.style.trim(),\n        task1: promptData.task1.trim(),\n        expertise: promptData.expertise.trim(),\n        context: promptData.context.trim()\n      },\n      settings: {\n        temperature: parseFloat(agentData.settings.temperature),\n        responseLength: parseInt(agentData.settings.responseLength)\n      }\n    }\n\n    let response = null\n    if (isUpdateMode.value) {\n      response = await axios.post('/ai/agent-update', agentPayload)\n    } else {\n      response = await axios.post('/ai/agent', agentPayload)\n    }\n    \n    console.log('Response:', response.data)\n\n    if (response.data.success) {\n      console.log('Agent created successfully')\n      // TODO: Show success notification\n      router.push('/ai-agents/' + agentData.tag)\n    } else {\n      throw new Error(response.data.error || `Failed to ${isUpdateMode.value ? 'update' : 'create'} agent`)\n    }\n\n  } catch (error) {\n    console.error('Error creating agent:', error)\n    errors.general = error.response?.data?.error || error.message || 'Failed to create agent. Please try again.'\n  } finally {\n    isCreating.value = false\n  }\n}\n\nconst isUpdateMode = computed(() => router.currentRoute.value.name === 'UpdateAgent')\n\nwatch(() => router.currentRoute.value.name, async (newRoute) => {\n  if (newRoute === 'UpdateAgent') {\n    await fetchAgent()\n  }\n})\n\nconst fetchAgent = async () => {\n  try {\n    const response = await axios.get('/ai/agent-for-update', {\n      params: { agentTag: router.currentRoute.value.params.agentTag }\n    })\n    const agent = response.data\n    const prompt = JSON.parse(agent.prompt)\n    \n    // Fill form with agent data\n    agentData.name = agent.name\n    agentData.tag = agent.agentTag\n    agentData.description = agent.description\n    selectedAvatar.value = agent.avatar\n    agentData.apiKey = agent.tgApi\n    agentData.botUsername = agent.botUsername\n    promptData.role = prompt.role\n    promptData.style = prompt.style\n    promptData.task1 = prompt.task1\n    promptData.expertise = prompt.expertise\n    promptData.context = prompt.context\n    agentData.settings.temperature = agent.temperature\n    agentData.settings.responseLength = agent.tokens\n  } catch (error) {\n    console.error('Error loading agent:', error)\n  }\n}\n\nonMounted(async () => {\n  if (isUpdateMode.value) {\n    await fetchAgent()\n  } else {\n    carouselInterval = setInterval(nextSlide, 5000)\n  }\n})\n</script>\n\n<style scoped>\n.page-container {\n  padding: 10px 0;\n  /* max-width: 1200px; */\n  margin: 0 auto;\n  background: transparent;\n  background: linear-gradient(to bottom, #e38f00 0%, #f8f9fa 400px);\n}\n\n.agent-carousel {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  margin-bottom: 40px;\n  border-radius: 20px;\n  padding: 20px 0;\n}\n\n.carousel-title {\n  font-size: 1.1rem;\n  margin-top: 20px;\n  color: #555;\n}\n\n.carousel-slide {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 20px 20px;\n}\n\n.carousel-indicators {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.indicator {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: #ddd;\n  border: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.indicator.active {\n  background: #e38f00;\n  transform: scale(1.2);\n}\n\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.5s;\n}\n\n.fade-enter, .fade-leave-to {\n  opacity: 0;\n}\n\n.create-agent-page {\n  max-width: 800px;\n  margin: 20px auto 40px;\n  padding: 2rem;\n  border-radius: 15px;\n}\n\n.page-header {\n  text-align: center;\n  margin-top: 20px;\n  margin-bottom: 0;\n  color: #fff;\n}\n\n.subtitle {\n  max-width: 400px;\n  color: #fff;\n  margin: 0.5rem auto 0;\n}\n\n.form-section {\n  background: #fff;\n  border-radius: 12px;\n  padding: 1.5rem;\n  margin-bottom: 1.5rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.form-section h2 {\n  margin-top: 0;\n  margin-bottom: 1.5rem;\n  color: #333;\n  font-size: 1.25rem;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n.form-group_last {\n  margin-bottom: 0;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 0.5rem;\n  color: #444;\n  font-weight: 500;\n}\n\ninput[type=\"text\"],\ntextarea,\nselect {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #ddd;\n  border-radius: 6px;\n  font-size: 1rem;\n  font-family: 'Sour Gummy', sans-serif;\n}\ntextarea {\n  font-family: 'Sour Gummy', sans-serif;\n}\n\n.hint {\n  display: block;\n  font-size: 0.875rem;\n  color: #666;\n  margin-top: 0.25rem;\n}\n.hint-last {\n  margin-bottom: 1rem;\n}\n\n.error-message {\n  color: #dc3545;\n  font-size: 0.875rem;\n  margin-top: 0.25rem;\n}\n\nh2.warning-message {\n  color: #e38f00;\n}\nh2.warning-message a {\n  color: #e38f00;\n}\n\n.avatar-preview {\n  width: 120px;\n  height: 120px;\n  border-radius: 60px;\n  position: relative;\n  cursor: pointer;\n  overflow: hidden;\n  margin-bottom: 20px;\n}\n\n.avatar-preview img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.avatar-overlay {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 0.5rem;\n  text-align: center;\n  font-size: 0.875rem;\n}\n\n.style-options {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1rem;\n}\n\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.tag-input .tags {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-top: 0.5rem;\n}\n\n.tag {\n  background: #f0f0f0;\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.remove-tag {\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  padding: 0 0.25rem;\n}\n\n.capabilities-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 1rem;\n}\n\n.capability-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.slider-container {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.slider-container input[type=\"range\"] {\n  flex: 1;\n}\n\n.form-actions {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n  text-align: center;\n  margin-top: 2rem;\n}\n\n.prompt-template {\n  background: #fff;\n}\n\n.prompt-editor {\n  margin-bottom: 20px;\n  font-size: 15px;\n  line-height: 1.6;\n}\n\n.prompt-line {\n  margin: 12px 0;\n}\n\n.prompt-input {\n  display: inline-block;\n  width: 100%;\n  min-width: 200px;\n  min-height: 55px;\n  margin-bottom: -10px;\n  background: #fff;\n  padding: 4px 8px;\n  border-radius: 4px;\n  border: 1px solid #e9ecef;\n  /* color: #e38f00; */\n  cursor: text;\n  transition: all 0.3s ease;\n  font-family: 'Sour Gummy', sans-serif;\n}\n\n.prompt-input:empty:before {\n  content: attr(data-placeholder);\n  color: #adb5bd;\n  font-style: italic;\n}\n\n.prompt-input:focus {\n  outline: none;\n  border-color: #e38f00;\n  background: #fff;\n  box-shadow: 0 0 0 2px rgba(227, 143, 0, 0.1);\n}\n\n.prompt-preview {\n  background: #f8f9fa;\n  border-radius: 8px;\n  padding: 20px;\n  margin-top: 20px;\n}\n\n.prompt-preview h3 {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #495057;\n  font-size: 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.toggle-preview {\n  background: none;\n  border: none;\n  color: #e38f00;\n  cursor: pointer;\n  font-size: 14px;\n  padding: 0;\n}\n\n.preview-content {\n  white-space: pre-wrap;\n  font-family: monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  color: #495057;\n}\n\n.create-button {\n  background: linear-gradient(135deg, #ff9800 0%, #d74d24 100%);\n  color: white;\n  border: none;\n  padding: 1rem 2rem;\n  border-radius: 8px;\n  font-size: 1.125rem;\n  cursor: pointer;\n  transition: opacity 0.2s;\n  text-decoration: none;\n}\n\n.create-button:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n/* Popup styles */\n.popup {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  padding: 20px;\n}\n\n.popup-content {\n  background: #ffffff;\n  border-radius: 16px;\n  padding: 24px;\n  width: 90%;\n  max-width: 600px;\n  max-height: 80vh;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.popup-content h3 {\n  margin: 0 0 20px 0;\n  color: #333;\n  font-size: 24px;\n  text-align: center;\n  font-weight: 600;\n}\n\n.avatar-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n  gap: 16px;\n  padding: 16px;\n  overflow-y: auto;\n  max-height: calc(80vh - 140px);\n  margin: -16px;\n  scrollbar-width: thin;\n  scrollbar-color: #ddd #fff;\n}\n\n.avatar-grid::-webkit-scrollbar {\n  width: 8px;\n}\n\n.avatar-grid::-webkit-scrollbar-track {\n  background: #fff;\n  border-radius: 4px;\n}\n\n.avatar-grid::-webkit-scrollbar-thumb {\n  background: #ddd;\n  border-radius: 4px;\n}\n\n.avatar-grid::-webkit-scrollbar-thumb:hover {\n  background: #ccc;\n}\n\n.avatar-option {\n  aspect-ratio: 1;\n  border-radius: 12px;\n  overflow: hidden;\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n  position: relative;\n  background: #f5f5f5;\n}\n\n.avatar-option img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.avatar-option:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.avatar-option.selected {\n  box-shadow: 0 0 0 3px #e38f00;\n}\n\n.avatar-option.selected img {\n  transform: scale(1.05);\n}\n\n.close-button {\n  margin-top: 24px;\n  padding: 12px 24px;\n  background: #e38f00;\n  border: none;\n  border-radius: 8px;\n  color: white;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background 0.2s;\n  width: 100%;\n}\n\n.close-button:hover {\n  background: #d38601;\n}\n\n.char-counter {\n  font-size: 0.875rem;\n  color: #666;\n  margin-left: 0.5rem;\n}\n\n.char-counter.near-limit {\n  color: #dc3545;\n}\n\n.setting-hint {\n  font-size: 0.875rem;\n  color: #666;\n  margin-top: 0.25rem;\n}\n\n.credits-policy {\n  margin-top: 2rem;\n}\n\n.policy-content {\n  background: #fff;\n  border-radius: 12px;\n  position: relative;\n}\n\n.policy-preview {\n  overflow: hidden;\n  transition: max-height 0.3s ease;\n  max-height: 80px;\n}\n\n.policy-preview.expanded {\n  max-height: 500px;\n}\n\n.policy-details {\n  opacity: 0;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  visibility: hidden;\n}\n\n.policy-details.visible {\n  opacity: 1;\n  transform: translateY(0);\n  visibility: visible;\n}\n\n.policy-details h3 {\n  margin: 1rem 0;\n  color: #333;\n}\n\n.policy-details ul {\n  padding-left: 1.5rem;\n  margin: 0.5rem 0;\n}\n\n.policy-details ul ul {\n  margin: 0.25rem 0;\n}\n\n.policy-details li {\n  margin: 0.5rem 0;\n  color: #666;\n}\n\n.toggle-policy {\n  background: none;\n  border: none;\n  color: #e38f00;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 8px 0 0;\n  margin-top: 10px;\n  transition: color 0.3s ease;\n}\n\n.toggle-policy:hover {\n  color: #d38601;\n}\n\n.connection-options {\n  margin-top: 1rem;\n}\n\n.toggle-options {\n  background: none;\n  border: none;\n  color: #e38f00;\n  cursor: pointer;\n  font-weight: 500;\n  padding: 8px 0;\n  margin-top: 10px;\n  transition: color 0.3s ease;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.toggle-options:hover {\n  color: #d38601;\n}\n\n.toggle-icon {\n  font-size: 1.25rem;\n}\n\n.options-content {\n  margin-top: 1rem;\n  padding: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  background: #f8f9fa;\n}\n\n.options-description {\n  font-size: 0.875rem;\n  color: #666;\n  margin-bottom: 1rem;\n}\n\n@media (max-width: 480px) {\n  .popup {\n    padding: 12px;\n  }\n\n  .popup-content {\n    padding: 16px;\n    width: 100%;\n  }\n\n  .avatar-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 12px;\n    padding: 12px;\n    margin: -12px;\n  }\n\n  .popup-content h3 {\n    font-size: 20px;\n    margin-bottom: 16px;\n  }\n\n  .close-button {\n    margin-top: 16px;\n    padding: 10px 20px;\n  }\n}\n\n@media (max-width: 600px) {\n  .create-agent-page {\n    padding: 1rem;\n  }\n\n  .style-options,\n  .capabilities-grid {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@media (max-width: 768px) {\n  .carousel-slide {\n    padding: 10px;\n  }\n}\n</style>\n","import script from \"./AiAgentFormPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AiAgentFormPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AiAgentFormPage.vue?vue&type=style&index=0&id=a31305dc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-a31305dc\"]])\n\nexport default __exports__"],"names":["exports","sfc","props","target","__vccOpts","key","val","router","useRouter","store","useStore","isUsed","ref","__props","openAgent","agentTag","push","useAgent","value","commit","name","avatar","localStorage","setItem","JSON","stringify","chatHistory","parse","getItem","type","content","description","timestamp","Date","toISOString","prepareAvatarUrl","avatarNum","__exports__","showAvatarPopup","selectedAvatar","Math","floor","random","isCreating","errors","reactive","tag","apiKey","botUsername","groups","role","general","showFullPolicy","showConnectionOptions","showPreview","promptData","style","task1","task2","task3","expertise","context","validateDescription","event","input","text","replace","length","substring","agentData","checkLength","field","maxLength","trim","generatedPrompt","computed","prompt","sampleAgents","userTag","isDisabled","used","currentSlide","carouselInterval","setSlide","index","nextSlide","handleMoreInfo","agent","console","log","onUnmounted","isUpdateMode","clearInterval","traits","formal","friendly","professional","casual","knowledgeAreas","settings","responseLength","temperature","validateName","validateTag","tagRegex","test","validateForm","isValid","Object","keys","forEach","groupsList","split","map","g","isFormValid","selectAvatar","handleSubmit","async","agentPayload","parseFloat","parseInt","response","axios","post","data","success","Error","error","message","currentRoute","watch","newRoute","fetchAgent","get","params","tgApi","tokens","onMounted","setInterval"],"sourceRoot":""}
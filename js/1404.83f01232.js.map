{"version":3,"file":"js/1404.83f01232.js","mappings":"2MAaOA,eAAeC,GAAuB,YAC3CC,EAAW,OACXC,EAASC,CAAAA,SAAAA,aAAAA,SAAAA,KAAYC,wBAA0B,+FAA8F,aAC7IC,GAAe,EAAK,YACpBC,EAAc,KAAK,aACnBC,EAAe,IAAM,WACrBC,EAAa,cAEb,IAEE,MAAMC,EAAa,IAAIC,EAAAA,WAAWR,IAG5B,UAAES,EAAS,qBAAEC,SAA+BH,EAAWI,mBAAmB,aAIhF,IAAIC,EAsBJ,GAzBAC,EAAQC,IAAI,iBAAkB,CAAEL,YAAWC,yBAKzCE,EADyB,kBAAhBb,EACJgB,EAAAA,YAAYC,KAAKC,EAAOD,KAAKjB,EAAa,WAE1CA,EAIPa,EAAGM,gBAAkBT,EACrBG,EAAGF,qBAAuBA,EAGtBP,GACFS,EAAGO,aAAaC,QACdC,EAAAA,qBAAqBC,oBAAoB,CAAEC,MAAOlB,IAClDgB,EAAAA,qBAAqBG,oBAAoB,CACvCC,cAAerB,MAMhBsB,OAAOC,OACV,MAAM,IAAIC,MAAM,4BAIlBf,EAAQC,IAAI,0BACZ,MAAMe,QAA0BH,OAAOC,OAAOG,gBAAgBlB,GAG9DC,EAAQC,IAAI,0BACZ,MAAMiB,QAAkBxB,EAAWyB,mBAAmBH,EAAkBI,aACxEpB,EAAQC,IAAI,mCAAoCiB,GAGhDlB,EAAQC,IAAI,+BACZ,MAAMoB,QAAqB3B,EAAW4B,mBAAmB,CACvDJ,YACAtB,YACAC,wBACCJ,GAKH,OAHAO,EAAQC,IAAI,4BAA6BoB,GAGlC,CACLE,SAAUF,EAAaG,MAAMC,IAC7BP,YACAF,kBAAmBZ,EAAOD,KAAKa,EAAkBI,aAAaM,SAAS,UACvEL,eACAM,MAAON,EAAaG,MAAMC,IAE9B,CAAE,MAAOE,GAEP,OADA3B,EAAQ2B,MAAM,qBAAsBA,GAC7B,CACLJ,SAAS,EACTI,MAAOA,EAAMC,SAAW,gBAE5B,CACF,C","sources":["webpack://app/./src/utils/transactionUtils.js"],"sourcesContent":["import { Connection, Transaction, ComputeBudgetProgram } from '@solana/web3.js';\n\n/**\n * Подписывает, отправляет и ожидает подтверждения транзакции Solana\n * @param {Object} options - Параметры транзакции\n * @param {Transaction|string} options.transaction - Транзакция или сериализованная транзакция в base64\n * @param {string} options.rpcUrl - URL RPC-узла Solana (опционально)\n * @param {boolean} options.withPriority - Добавить инструкции для увеличения приоритета (опционально)\n * @param {number} options.priorityFee - Размер приоритетной комиссии в microLamports (по умолчанию 25000)\n * @param {number} options.computeUnits - Лимит вычислительных единиц (по умолчанию 200000)\n * @param {string} options.commitment - Уровень подтверждения (по умолчанию 'confirmed')\n * @returns {Promise<Object>} - Результат транзакции с подписью и подтверждением\n */\nexport async function signAndSendTransaction({\n  transaction,\n  rpcUrl = process.env.VUE_APP_SOLANA_RPC_URL || 'https://sleek-icy-frog.solana-mainnet.quiknode.pro/9d4845e2d4c60caf45dc4f10d0bdcfdbcd6a321c/',\n  withPriority = false,\n  priorityFee = 25000,\n  computeUnits = 200000,\n  commitment = 'confirmed'\n}) {\n  try {\n    // Создаем подключение к Solana\n    const connection = new Connection(rpcUrl);\n    \n    // Получаем последний blockhash\n    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('finalized');\n    console.log('Got blockhash:', { blockhash, lastValidBlockHeight });\n    \n    // Десериализуем транзакцию, если она передана в виде строки\n    let tx;\n    if (typeof transaction === 'string') {\n      tx = Transaction.from(Buffer.from(transaction, 'base64'));\n    } else {\n      tx = transaction;\n    }\n    \n    // Обновляем транзакцию с актуальным blockhash\n    tx.recentBlockhash = blockhash;\n    tx.lastValidBlockHeight = lastValidBlockHeight;\n    \n    // Добавляем инструкции для увеличения приоритета, если требуется\n    if (withPriority) {\n      tx.instructions.unshift(\n        ComputeBudgetProgram.setComputeUnitLimit({ units: computeUnits }),\n        ComputeBudgetProgram.setComputeUnitPrice({\n          microLamports: priorityFee,\n        })\n      );\n    }\n    \n    // Проверяем доступность Phantom\n    if (!window.solana) {\n      throw new Error('Phantom wallet not found');\n    }\n    \n    // Подписываем транзакцию через Phantom\n    console.log('Signing transaction...');\n    const signedTransaction = await window.solana.signTransaction(tx);\n    \n    // Отправляем подписанную транзакцию\n    console.log('Sending transaction...');\n    const signature = await connection.sendRawTransaction(signedTransaction.serialize());\n    console.log('Transaction sent with signature:', signature);\n    \n    // Ждем подтверждения транзакции\n    console.log('Waiting for confirmation...');\n    const confirmation = await connection.confirmTransaction({\n      signature,\n      blockhash,\n      lastValidBlockHeight\n    }, commitment);\n    \n    console.log('Transaction confirmation:', confirmation);\n    \n    // Возвращаем результат\n    return {\n      success: !confirmation.value.err,\n      signature,\n      signedTransaction: Buffer.from(signedTransaction.serialize()).toString('base64'),\n      confirmation,\n      error: confirmation.value.err\n    };\n  } catch (error) {\n    console.error('Transaction error:', error);\n    return {\n      success: false,\n      error: error.message || 'Unknown error'\n    };\n  }\n}\n"],"names":["async","signAndSendTransaction","transaction","rpcUrl","process","VUE_APP_SOLANA_RPC_URL","withPriority","priorityFee","computeUnits","commitment","connection","Connection","blockhash","lastValidBlockHeight","getLatestBlockhash","tx","console","log","Transaction","from","Buffer","recentBlockhash","instructions","unshift","ComputeBudgetProgram","setComputeUnitLimit","units","setComputeUnitPrice","microLamports","window","solana","Error","signedTransaction","signTransaction","signature","sendRawTransaction","serialize","confirmation","confirmTransaction","success","value","err","toString","error","message"],"sourceRoot":""}
{"version":3,"file":"js/5179.44ae525d.js","mappings":"+VAiCMA,EAAa,EACbC,EAAa,EACbC,EAAkB,IAClBC,EAAe,G,0CANrB,MAAMC,GAAgBC,EAAAA,EAAAA,IAAI,IAC1B,IAAIC,EAAgB,KAOpB,MAAMC,EAAoBA,KACxB,MAAMC,EAAS,GACf,IAAIC,EAAW,EACf,MAAMC,EAAc,GAEpB,MAAOD,EAAWC,EAAa,CAC7B,MAAMC,EAAW,CACfC,EAAGJ,EAASK,KAAKC,UAAY,IAAM,EAAIN,GACvCO,EAAGP,EAASK,KAAKC,UAAY,IAAM,EAAIN,GACvCQ,SAA0B,GAAhBH,KAAKC,SAAgB,IAI3BG,EAAcb,EAAcc,MAAMC,OAAMC,GAC5CC,EAAYV,EAAUS,IAAQjB,IAGhC,GAAIc,GAAeR,IAAaC,EAAc,EAC5C,OAAOC,EAGTF,GACF,CAGA,MAAO,CACLG,EAAGJ,EAASK,KAAKC,UAAY,IAAM,EAAIN,GACvCO,EAAGP,EAASK,KAAKC,UAAY,IAAM,EAAIN,GACvCQ,SAA0B,GAAhBH,KAAKC,SAAgB,GAChC,EAGGO,EAAcA,CAACC,EAAMC,KACzB,MAAMC,EAAKF,EAAKV,EAAIW,EAAKX,EACnBa,EAAKH,EAAKP,EAAIQ,EAAKR,EACzB,OAAOF,KAAKa,KAAKF,EAAKA,EAAKC,EAAKA,EAAG,EAG/BE,EAAWA,KACf,GAAIvB,EAAcc,MAAMU,QAAU3B,EAAY,OAAO,EAErD,MAAM4B,EAAazB,EAAcc,MAAMY,KAAIV,GAAOA,EAAIW,KAChDC,EAAkBC,MAAMC,KAAK,CAACN,OAAQ,IAAI,CAACO,EAAGC,IAAMA,EAAI,IAC3DC,QAAOC,IAAQT,EAAWU,SAASD,KAEtC,GAA+B,IAA3BN,EAAgBJ,OAAc,OAAO,EAEzC,MAAMY,EAAcR,EAAgBnB,KAAK4B,MAAM5B,KAAKC,SAAWkB,EAAgBJ,SAC/E,IAAIjB,EAAWJ,IAOf,OALAH,EAAcc,MAAMwB,KAAK,CACvBX,GAAIS,KACD7B,KAGE,CAAG,EAGNgC,EAAcA,MACdvC,EAAcc,MAAMU,QAAU5B,KAClCI,EAAcc,MAAM0B,SACb,GAGHC,EAAgBA,KACpB,MAAMC,EAAe1C,EAAcc,MAAMU,OAErCkB,EAAe9C,EAEjB2B,KACSmB,EAAe7C,GAOpBY,KAAKC,SAAW,IACda,MANNgB,GAWF,E,OAGFI,EAAAA,EAAAA,KAAU,KAER,IAAK,IAAIX,EAAI,EAAGA,EAAIpC,EAAYoC,IAC9BT,IAEFrB,EAAgB0C,YAAYH,EAAe3C,EAAgB,KAG7D+C,EAAAA,EAAAA,KAAgB,KACV3C,GACF4C,cAAc5C,EAChB,I,gkBCjIF,MAAM6C,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://app/./src/components/pages/home/CommunitySection.vue","webpack://app/./src/components/pages/home/CommunitySection.vue?3da1"],"sourcesContent":["<template>\n  <section class=\"community-section\">\n    <div class=\"meme-wall\">\n      <TransitionGroup name=\"fade\">\n        <div v-for=\"image in visibleImages\" :key=\"image.id\" \n             class=\"meme-container\"\n             :style=\"{ \n               left: `${image.x}%`, \n               top: `${image.y}%`\n             }\">\n          <div class=\"meme-wrapper\">\n            <img :src=\"`https://bitcat.fun/data/meme${image.id}.webp`\" \n                 :alt=\"`meme${image.id}`\" \n                 class=\"meme-img\">\n          </div>\n        </div>\n      </TransitionGroup>\n      <div class=\"meme-overlay\"></div>\n    </div>\n\n    <h2>Join Us</h2>\n    \n    <SocialLinksSection :isAccent=\"false\" />\n  </section>\n</template>\n\n<script setup>\nimport { ref, onMounted, onBeforeUnmount } from 'vue'\nimport SocialLinksSection from '@/components/pages/home/SocialLinksSection.vue'\n\nconst visibleImages = ref([])\nlet imageInterval = null\n\nconst MIN_IMAGES = 3\nconst MAX_IMAGES = 4\nconst CHANGE_INTERVAL = 2000\nconst MIN_DISTANCE = 30 // минимальное расстояние между картинками в процентах\n\nconst getRandomPosition = () => {\n  const margin = 25 // Отступ от края в процентах\n  let attempts = 0\n  const maxAttempts = 10\n  \n  while (attempts < maxAttempts) {\n    const position = {\n      x: margin + Math.random() * (100 - 2 * margin),\n      y: margin + Math.random() * (100 - 2 * margin),\n      rotation: Math.random() * 20 - 10\n    }\n    \n    // Проверяем расстояние до всех существующих картинок\n    const isFarEnough = visibleImages.value.every(img => \n      getDistance(position, img) >= MIN_DISTANCE\n    )\n    \n    if (isFarEnough || attempts === maxAttempts - 1) {\n      return position\n    }\n    \n    attempts++\n  }\n  \n  // Если не удалось найти подходящую позицию\n  return {\n    x: margin + Math.random() * (100 - 2 * margin),\n    y: margin + Math.random() * (100 - 2 * margin),\n    rotation: Math.random() * 20 - 10\n  }\n}\n\nconst getDistance = (pos1, pos2) => {\n  const dx = pos1.x - pos2.x\n  const dy = pos1.y - pos2.y\n  return Math.sqrt(dx * dx + dy * dy)\n}\n\nconst addImage = () => {\n  if (visibleImages.value.length >= MAX_IMAGES) return false\n  \n  const usedImages = visibleImages.value.map(img => img.id)\n  const availableImages = Array.from({length: 9}, (_, i) => i + 1)\n    .filter(num => !usedImages.includes(num))\n  \n  if (availableImages.length === 0) return false\n  \n  const randomImage = availableImages[Math.floor(Math.random() * availableImages.length)]\n  let position = getRandomPosition()\n  \n  visibleImages.value.push({\n    id: randomImage,\n    ...position\n  })\n  \n  return true\n}\n\nconst removeImage = () => {\n  if (visibleImages.value.length <= MIN_IMAGES) return false\n  visibleImages.value.shift()\n  return true\n}\n\nconst shuffleImages = () => {\n  const currentCount = visibleImages.value.length\n  \n  if (currentCount < MIN_IMAGES) {\n    // Если картинок меньше минимума, добавляем\n    addImage()\n  } else if (currentCount > MAX_IMAGES) {\n    // Если картинок больше максимума, удаляем\n    removeImage()\n  } else {\n    // Если количество в допустимом диапазоне\n    // С вероятностью 50% либо добавляем новую и удаляем старую,\n    // либо оставляем как есть\n    if (Math.random() > 0.5) {\n      if (addImage()) {\n        // Если добавили новую, удаляем старую\n        removeImage()\n      }\n    }\n  }\n}\n\nonMounted(() => {\n  // При старте добавляем минимальное количество картинок\n  for (let i = 0; i < MIN_IMAGES; i++) {\n    addImage()\n  }\n  imageInterval = setInterval(shuffleImages, CHANGE_INTERVAL)\n})\n\nonBeforeUnmount(() => {\n  if (imageInterval) {\n    clearInterval(imageInterval)\n  }\n})\n</script>\n\n<style scoped>\n.community-section {\n  padding: 80px 5% 40px;\n  text-align: center;\n  position: relative;\n  overflow: hidden;\n  background: #fff;\n}\n\n.meme-wall {\n  top: 40px;\n  left: 40px;\n  right: 40px;\n  bottom: 40px;\n  z-index: 0;\n  pointer-events: none;\n}\n\n.meme-container {\n  position: absolute;\n  width: 250px;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n}\n\n.meme-wrapper {\n  padding: 10px;\n}\n\n.meme-img {\n  width: 100%;\n  height: auto;\n  object-fit: contain;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1), inset 0 0 15px rgba(255, 107, 44, 0.3);\n}\n\n.meme-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.4);\n  pointer-events: none;\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.5s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n  transform: translate(-50%, -50%) scale(0.8) rotate(10deg);\n}\n\nh2 {\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n  background: linear-gradient(135deg, #FF6B2C, #FF8F50);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  position: relative;\n  display: inline-block;\n}\n\n.social-links {\n  display: flex;\n  justify-content: center;\n  gap: 30px;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.social-link {\n  font-size: 2rem;\n  color: #666;\n  transition: color 0.3s, transform 0.3s;\n}\n\n.social-link:hover {\n  color: #ff9800;\n  transform: translateY(-5px);\n}\n\n@media (max-width: 768px) {\n  .meme-wall {\n    top: 20px;\n    left: 20px;\n    right: 20px;\n    bottom: 20px;\n  }\n\n  .meme-container {\n    width: 200px;\n  }\n\n  h2 {\n    font-size: 2rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .meme-wall {\n    top: 10px;\n    left: 10px;\n    right: 10px;\n    bottom: 10px;\n  }\n\n  .meme-container {\n    width: 160px;\n  }\n\n  h2 {\n    font-size: 1.8rem;\n    margin-bottom: 1.5rem;\n  }\n}\n\n@media (max-width: 360px) {\n  h2 {\n    font-size: 1.6rem;\n    margin-bottom: 1.2rem;\n  }\n}\n</style>\n","import script from \"./CommunitySection.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CommunitySection.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CommunitySection.vue?vue&type=style&index=0&id=7e70bb3e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7e70bb3e\"]])\n\nexport default __exports__"],"names":["MIN_IMAGES","MAX_IMAGES","CHANGE_INTERVAL","MIN_DISTANCE","visibleImages","ref","imageInterval","getRandomPosition","margin","attempts","maxAttempts","position","x","Math","random","y","rotation","isFarEnough","value","every","img","getDistance","pos1","pos2","dx","dy","sqrt","addImage","length","usedImages","map","id","availableImages","Array","from","_","i","filter","num","includes","randomImage","floor","push","removeImage","shift","shuffleImages","currentCount","onMounted","setInterval","onBeforeUnmount","clearInterval","__exports__"],"sourceRoot":""}
{"version":3,"file":"js/3464.d5a01c5a.js","mappings":"+ZAoDMA,EAAsB,+CAEtBC,EAAiB,8CACjBC,EAAQ,GACRC,EAAgB,GAChBC,EAAW,8F,qCAGjB,MAAMC,GAAoBC,EAAAA,EAAAA,KAAI,GACxBC,GAAcD,EAAAA,EAAAA,IAAI,IAClBE,GAAQF,EAAAA,EAAAA,IAAI,KAGVG,OAAQC,EAAa,UAAEC,EAAS,gBAAEC,EAAe,oBAAEC,EAAmB,YAAEC,EAAW,UAAEC,EAAS,gBAAEC,IAAoBC,EAAAA,EAAAA,MAEtHR,EAASS,EAAAA,EAAMC,QAAQC,cAGvBC,EAAa,IAAIC,EAAAA,WAAWlB,GAG5BmB,GAAWjB,EAAAA,EAAAA,IAAI,MAWrBkB,eAAeC,IACb,GAAKV,EAAUW,MAKf,IACErB,EAAkBqB,OAAQ,EAC1BlB,EAAMkB,MAAQ,GAGdC,EAAQC,IAAI,wBAAyBnB,GAErCc,EAASG,MAAQG,EAAAA,EAASC,KAAKT,GAC5BU,KAAIC,EAAAA,EAAAA,MAGP,MAAMC,EAAqBV,EAASG,MAAMQ,eAGpCA,QAAqBD,EAAmBE,cAAc,CAC1DC,QAAS,IAAIC,EAAAA,UAAUrC,KAGzB2B,EAAQC,IAAI,uBAAwBM,GAEpCP,EAAQC,IAAI,YAAa3B,GAGzB0B,EAAQC,IAAI,oDASZ,MAAMU,EAAU,IAAIC,KACpBD,EAAQE,SAASF,EAAQG,WAAatC,GAGtC,IAEEwB,EAAQC,IAAI,qCAGZ,MAAM,UAAEc,EAAS,qBAAEC,SAA+BtB,EAAWuB,mBAAmB,aAGhFjB,EAAQC,IAAI,sCAGZD,EAAQC,IAAI,8CAEZD,EAAQC,IAAI,kBAAmBnB,GAC/BkB,EAAQC,IAAI,cAAejB,EAAUe,OAAOmB,YAG5C,MAAMC,EAAiB,CACrBnC,UAAWA,EAAUe,MACrBd,gBAAiBY,UACfG,EAAQC,IAAI,6CACCmB,OAAOC,OAAOpC,gBAAgBqC,IAE7CpC,oBAAqBW,UACnBG,EAAQC,IAAI,uDACCmB,OAAOC,OAAOnC,oBAAoBqC,IAEjDpC,YAAaU,UACXG,EAAQC,IAAI,mCACZ,MAAMuB,GAAa,IAAIC,aAAcC,OAAOC,GAC5C,aAAaP,OAAOC,OAAOlC,YAAYqC,EAAW,GAKtDxB,EAAQC,IAAI,2CACZ,MAAM2B,EAAK1B,EAAAA,EAASC,KAAKT,GACtBU,KAAIyB,EAAAA,EAAAA,GAAsBV,IAC1Bf,KAAIC,EAAAA,EAAAA,MAKDyB,EAAkB,IAAIpB,EAAAA,UAAU5B,GACtCkB,EAAQC,IAAI,qBAAsB6B,EAAgBZ,YAElD,MAAMa,QAAsBrC,EAAWsC,8BAA8BF,EAAiB,CAAEG,KAAM,IAAIvB,EAAAA,UAAUpC,KAC5G0B,EAAQC,IAAI,kBAAmB8B,GAG/B,MAAMG,QAAYC,EAAAA,EAAAA,IAChB,IAAIzB,EAAAA,UAAUpC,GACdwD,GAEF9B,EAAQC,IAAI,kCAAmCiC,EAAIhB,YAGnD,IACElB,EAAQC,IAAI,kCAGZ,MAAMmC,QAAoB1C,EAAW2C,eAAeH,GAEpD,GAAoB,OAAhBE,EACFpC,EAAQC,IAAI,mEAEP,CACLD,EAAQC,IAAI,oCAEZ,MAAMqC,QAAmB5C,EAAW6C,uBAAuBL,GAC3DlC,EAAQC,IAAI,eAAgBqC,EAAWvC,MAAMyC,UAExCF,EAAWvC,MAAMyC,UACpBxC,EAAQyC,KAAK,qBAEjB,CACF,CAAE,MAAO5D,GACPmB,EAAQnB,MAAM,sBAAuBA,GAErCmB,EAAQC,IAAI,iCACd,CAGAD,EAAQC,IAAI,oCACZ,MAAMK,EAAqBsB,EAAGrB,eAG9BP,EAAQC,IAAI,qBAAsBM,GAElC,MAAM,SAAEmC,SAAmBpC,EAAmBqC,KAAK,CACjDpC,eACAqC,YAAa,IAAIlC,EAAAA,UAAUpC,GAC3BC,OAAOsE,EAAAA,EAAAA,IAAI,KAaPC,EAAYJ,EAASI,UAE3B9C,EAAQC,IAAI,oCAAqC6C,GACjDlE,EAAYmB,MAAQ+C,EAGpB9C,EAAQC,IAAI,uCACZ,MAAM8C,QAAqBrD,EAAWsD,mBAAmB,CACvDF,YACA/B,YACAC,wBACC,aAEHhB,EAAQC,IAAI,2BAA4B8C,SAGlCE,EAAoBH,EAC5B,CAAE,MAAOI,GAIP,OAHAlD,EAAQnB,MAAM,kCAAmCqE,GACjDrE,EAAMkB,MAAQ,kBAAkBmD,EAAaC,eAC7CzE,EAAkBqB,OAAQ,EAE5B,CAIF,CAAE,MAAOqD,GACPpD,EAAQnB,MAAM,0BAA2BuE,GACzCvE,EAAMkB,MAAQ,UAAUqD,EAAID,SAC9B,CAAE,QACAzE,EAAkBqB,OAAQ,CAC5B,MAhLElB,EAAMkB,MAAQ,kCAiLlB,CAGAF,eAAeoD,EAAoBI,GACjC,IACE,MAAMX,QAAiBY,MAAM,2BAA4B,CACvDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,YAAatF,EACbuF,aAActF,EACduF,aAAcvF,EACdoC,QAAS,IAAIC,KAAKA,KAAKmD,MAAwB,GAAhBvF,EAAqB,GAAK,KAAMwF,cAC/DC,aAAcjF,EAAUe,MAAMmB,WAC9BmC,2BAIEa,QAAaxB,EAASyB,OAE5B,IAAKD,EAAKE,QACR,MAAM,IAAIC,MAAMH,EAAKf,SAAW,mCAGlCnD,EAAQC,IAAI,0BAA2BiE,EACzC,CAAE,MAAOd,GACPpD,EAAQnB,MAAM,iCAAkCuE,GAChDvE,EAAMkB,MAAQ,0BAA0BqD,EAAID,SAC9C,CACF,C,OA3NAmB,EAAAA,EAAAA,KAAU,KACJlF,EAAUW,QAEZH,EAASG,MAAQG,EAAAA,EAASC,KAAKT,GAC5BU,KAAIC,EAAAA,EAAAA,MACT,I,kqCC1EF,MAAMkE,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://app/./src/pages/NftMartPage.vue","webpack://app/./src/pages/NftMartPage.vue?6e67"],"sourcesContent":["<template>\n  <div class=\"nft-mart-container\">\n    <h1>NFT Mart Test Page</h1>\n    <div class=\"auction-house-info\">\n      <h2>Auction House Info</h2>\n      <p><strong>Address:</strong> {{ auctionHouseAddress }}</p>\n    </div>\n    \n    <div class=\"nft-info\">\n      <h2>NFT Info</h2>\n      <p><strong>Mint Address:</strong> {{ nftMintAddress }}</p>\n      <p><strong>Price:</strong> {{ price }} SOL</p>\n      <p><strong>Duration:</strong> 24 hours</p>\n    </div>\n\n    <div class=\"actions\">\n      <button \n        class=\"create-listing-btn\" \n        @click=\"createListing\" \n        :disabled=\"isCreatingListing\"\n      >\n        {{ isCreatingListing ? 'Creating Listing...' : 'Create Listing' }}\n      </button>\n      \n      <div v-if=\"txSignature\" class=\"tx-info\">\n        <p><strong>Transaction Signature:</strong></p>\n        <a :href=\"`https://solscan.io/tx/${txSignature}`\" target=\"_blank\">{{ txSignature }}</a>\n      </div>\n      \n      <div v-if=\"error\" class=\"error\">\n        <p>{{ error }}</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useWallet } from 'solana-wallets-vue';\nimport { Connection, PublicKey, Transaction, SystemProgram, Keypair } from '@solana/web3.js';\nimport { getAssociatedTokenAddress } from '@solana/spl-token';\nimport { \n  Metaplex, \n  walletAdapterIdentity, \n  toMetaplexFile,\n  toBigNumber,\n  auctionHouseModule,\n  sol\n} from '@metaplex-foundation/js';\nimport store from '@/vuex'\n\n// Constants\nconst auctionHouseAddress = 'G26L5YGdj9PaYuePz2jj7Qez2S3PJ39xGEKbAnoYHfVE';\n// Use your NFT mint address\nconst nftMintAddress = 'bcexaZs8HW4TabokwHVJ2Wnpb7yBw5iJ4JHiHfWJCi4';\nconst price = 0.1; // SOL\nconst durationHours = 24;\nconst endpoint = 'https://sleek-icy-frog.solana-mainnet.quiknode.pro/9d4845e2d4c60caf45dc4f10d0bdcfdbcd6a321c';\n\n// State\nconst isCreatingListing = ref(false);\nconst txSignature = ref('');\nconst error = ref('');\n\n// Get wallet\nconst { wallet: walletAdapter, publicKey, signTransaction, signAllTransactions, signMessage, connected, sendTransaction } = useWallet();\n\nconst wallet = store.getters.walletAddress\n\n// Create connection\nconst connection = new Connection(endpoint);\n\n// Create Metaplex instance\nconst metaplex = ref(null);\n\nonMounted(() => {\n  if (connected.value) {\n    // Используем реальный wallet с модулем Auction House\n    metaplex.value = Metaplex.make(connection)\n      .use(auctionHouseModule());\n  }\n});\n\n// Create listing function\nasync function createListing() {\n  if (!connected.value) {\n    error.value = 'Please connect your wallet first';\n    return;\n  }\n  \n  try {\n    isCreatingListing.value = true;\n    error.value = '';\n    \n    // Update Metaplex with current wallet\n    console.log('Using wallet address:', wallet);\n    // Используем реальный wallet с модулем Auction House\n    metaplex.value = Metaplex.make(connection)\n      .use(auctionHouseModule());\n    \n    // Create Auction House client\n    const auctionHouseClient = metaplex.value.auctionHouse();\n    \n    // Find the Auction House\n    const auctionHouse = await auctionHouseClient.findByAddress({\n      address: new PublicKey(auctionHouseAddress),\n    });\n    \n    console.log('Found Auction House:', auctionHouse);\n\n    console.log('for nft: ', nftMintAddress)\n    \n    // For testing purposes, we'll skip the NFT check and directly create the listing\n    console.log('Skipping NFT metadata check for testing purposes');\n    \n    // In a real implementation, you would verify the NFT exists with:\n    // const nft = await metaplex.value.nfts().findByMint({\n    //   mintAddress: new PublicKey(nftMintAddress),\n    // });\n    // console.log('Found NFT:', nft);\n    \n    // Calculate listing end time (24 hours from now)\n    const endTime = new Date();\n    endTime.setHours(endTime.getHours() + durationHours);\n    \n    // Создаем листинг\n    try {\n      // Создаем листинг напрямую через Metaplex\n      console.log('Создаем листинг через Metaplex...');\n      \n      // Получаем блокхэш для транзакции\n      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('finalized');\n      \n      // Создаем транзакцию и инструкции для листинга\n      console.log('Создаем транзакцию для листинга...');\n      \n      // Используем просто auctionHouse.list с wallet\n      console.log('Создаем листинг через auctionHouse.list...');\n\n      console.log('Wallet address:', wallet);\n      console.log('Public key:', publicKey.value?.toString());\n      \n      // Создаем правильный адаптер для Phantom\n      const phantomAdapter = {\n        publicKey: publicKey.value,\n        signTransaction: async (tx) => {\n          console.log('Signing transaction with Phantom...');\n          return await window.solana.signTransaction(tx);\n        },\n        signAllTransactions: async (txs) => {\n          console.log('Signing multiple transactions with Phantom...');\n          return await window.solana.signAllTransactions(txs);\n        },\n        signMessage: async (msg) => {\n          console.log('Signing message with Phantom...');\n          const encodedMsg = new TextEncoder().encode(msg);\n          return await window.solana.signMessage(encodedMsg);\n        }\n      };\n      \n      // Создаем новый Metaplex с нашим адаптером\n      console.log('Создаем Metaplex с адаптером Phantom...');\n      const mx = Metaplex.make(connection)\n        .use(walletAdapterIdentity(phantomAdapter))\n        .use(auctionHouseModule());\n\n\n      \n      // Получаем адрес кошелька как PublicKey\n      const walletPublicKey = new PublicKey(wallet);\n      console.log('Wallet public key:', walletPublicKey.toString());\n\n      const tokenAccounts = await connection.getParsedTokenAccountsByOwner(walletPublicKey, { mint: new PublicKey(nftMintAddress) });\n      console.log('Token accounts:', tokenAccounts);\n      \n      // Получаем Associated Token Account для NFT\n      const ata = await getAssociatedTokenAddress(\n        new PublicKey(nftMintAddress), // mint\n        walletPublicKey // owner\n      );\n      console.log('Associated Token Account (ATA):', ata.toString());\n\n      // Сначала проверяем, существует ли счет ATA\n      try {\n        console.log('Проверяем существование ATA...');\n        \n        // Проверяем существование счета\n        const accountInfo = await connection.getAccountInfo(ata);\n        \n        if (accountInfo === null) {\n          console.log('ATA не существует. Пробуем продолжить без проверки баланса.');\n          // Можно продолжить без проверки баланса, так как Metaplex/AuctionHouse должен проверить владение\n        } else {\n          console.log('ATA существует, проверяем баланс');\n          // Если счет существует, проверяем баланс\n          const ataBalance = await connection.getTokenAccountBalance(ata);\n          console.log('ATA balance:', ataBalance.value.uiAmount);\n\n          if (!ataBalance.value.uiAmount) {\n            console.warn('Баланс ATA равен 0');\n          }\n        }\n      } catch (error) {\n        console.error('Error checking ATA:', error);\n        // Продолжаем без ошибки, чтобы посмотреть, что будет дальше\n        console.log('Продолжаем без проверки ATA...');\n      }\n      \n      // Получаем Auction House клиент\n      console.log('Получаем Auction House клиент...');\n      const auctionHouseClient = mx.auctionHouse();\n      \n      // Создаем листинг с помощью high-level API\n      console.log('Создаем листинг...', auctionHouse);\n      // Добавляем все необходимые опции, чтобы избежать предупреждения\n      const { response } = await auctionHouseClient.list({\n        auctionHouse,\n        mintAccount: new PublicKey(nftMintAddress),\n        price: sol(1), // Цена в lamports\n        // tokenAccount: null,\n        // tokens: 1,\n        // authority: new PublicKey(wallet),\n        // seller: publicKey.value, // Явно указываем продавца\n        // confirmOptions: {\n        //   skipPreflight: false, // Обязательно проводим предварительную проверку\n        //   commitment: 'finalized', // Максимальный уровень подтверждения\n        //   maxRetries: 3, // Количество попыток\n        // },\n      });\n      \n      // Получаем подпись транзакции\n      const signature = response.signature;\n      \n      console.log('Транзакция отправлена с подписью:', signature);\n      txSignature.value = signature;\n      \n      // Ждем подтверждения транзакции\n      console.log('Ожидаем подтверждения транзакции...');\n      const confirmation = await connection.confirmTransaction({\n        signature,\n        blockhash,\n        lastValidBlockHeight,\n      }, 'finalized'); // Используем максимальный уровень подтверждения\n      \n      console.log('Транзакция подтверждена:', confirmation);\n      \n      // Создаем запись в базе данных\n      await createListingRecord(signature);\n    } catch (listingError) {\n      console.error('Error in auction house listing:', listingError);\n      error.value = `Listing error: ${listingError.message}`;\n      isCreatingListing.value = false;\n      return;\n    }\n    \n    // Moved into try/catch block above\n    \n  } catch (err) {\n    console.error('Error creating listing:', err);\n    error.value = `Error: ${err.message}`;\n  } finally {\n    isCreatingListing.value = false;\n  }\n}\n\n// Create a record in our database\nasync function createListingRecord(transactionSignature) {\n  try {\n    const response = await fetch('/api/nft-market/listings', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        mintAddress: nftMintAddress,\n        initialPrice: price,\n        instantPrice: price,\n        endTime: new Date(Date.now() + durationHours * 60 * 60 * 1000).toISOString(),\n        sellerWallet: publicKey.value.toString(),\n        transactionSignature\n      }),\n    });\n    \n    const data = await response.json();\n    \n    if (!data.success) {\n      throw new Error(data.message || 'Failed to create listing record');\n    }\n    \n    console.log('Listing record created:', data);\n  } catch (err) {\n    console.error('Error creating listing record:', err);\n    error.value = `Error creating record: ${err.message}`;\n  }\n}\n</script>\n\n<style scoped>\n.nft-mart-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n  color: #FF6B2C;\n}\n\nh2 {\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.auction-house-info,\n.nft-info {\n  background: #f8f8f8;\n  padding: 1.5rem;\n  border-radius: 8px;\n  margin-bottom: 2rem;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.actions {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.create-listing-btn {\n  background: #FF6B2C;\n  color: white;\n  border: none;\n  padding: 1rem 2rem;\n  font-size: 1.2rem;\n  font-weight: 600;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.create-listing-btn:hover:not(:disabled) {\n  background: #e55a1c;\n  transform: translateY(-2px);\n}\n\n.create-listing-btn:disabled {\n  background: #ccc;\n  cursor: not-allowed;\n}\n\n.tx-info {\n  background: #e8f5e9;\n  padding: 1rem;\n  border-radius: 8px;\n  word-break: break-all;\n}\n\n.tx-info a {\n  color: #FF6B2C;\n  text-decoration: none;\n}\n\n.error {\n  background: #ffebee;\n  color: #c62828;\n  padding: 1rem;\n  border-radius: 8px;\n}\n</style>\n","import script from \"./NftMartPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NftMartPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./NftMartPage.vue?vue&type=style&index=0&id=6e884fe8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6e884fe8\"]])\n\nexport default __exports__"],"names":["auctionHouseAddress","nftMintAddress","price","durationHours","endpoint","isCreatingListing","ref","txSignature","error","wallet","walletAdapter","publicKey","signTransaction","signAllTransactions","signMessage","connected","sendTransaction","useWallet","store","getters","walletAddress","connection","Connection","metaplex","async","createListing","value","console","log","Metaplex","make","use","auctionHouseModule","auctionHouseClient","auctionHouse","findByAddress","address","PublicKey","endTime","Date","setHours","getHours","blockhash","lastValidBlockHeight","getLatestBlockhash","toString","phantomAdapter","window","solana","tx","txs","encodedMsg","TextEncoder","encode","msg","mx","walletAdapterIdentity","walletPublicKey","tokenAccounts","getParsedTokenAccountsByOwner","mint","ata","getAssociatedTokenAddress","accountInfo","getAccountInfo","ataBalance","getTokenAccountBalance","uiAmount","warn","response","list","mintAccount","sol","signature","confirmation","confirmTransaction","createListingRecord","listingError","message","err","transactionSignature","fetch","method","headers","body","JSON","stringify","mintAddress","initialPrice","instantPrice","now","toISOString","sellerWallet","data","json","success","Error","onMounted","__exports__"],"sourceRoot":""}
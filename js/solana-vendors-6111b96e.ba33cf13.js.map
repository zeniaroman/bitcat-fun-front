{"version":3,"file":"js/solana-vendors-6111b96e.ba33cf13.js","mappings":"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","sources":["webpack://app/../src/utils/ed25519.ts","webpack://app/../src/utils/to-buffer.ts","webpack://app/../src/utils/borsh-schema.ts","webpack://app/../src/publickey.ts","webpack://app/../src/account.ts","webpack://app/../src/bpf-loader-deprecated.ts","webpack://app/../src/transaction/constants.ts","webpack://app/../src/transaction/expiry-custom-errors.ts","webpack://app/../src/message/account-keys.ts","webpack://app/../src/layout.ts","webpack://app/../src/utils/shortvec-encoding.ts","webpack://app/../src/utils/assert.ts","webpack://app/../src/message/compiled-keys.ts","webpack://app/../src/utils/guarded-array-utils.ts","webpack://app/../src/message/legacy.ts","webpack://app/../src/message/v0.ts","webpack://app/../src/message/versioned.ts","webpack://app/../src/transaction/legacy.ts","webpack://app/../src/transaction/message.ts","webpack://app/../src/transaction/versioned.ts","webpack://app/../src/timing.ts","webpack://app/../src/sysvar.ts","webpack://app/../src/errors.ts","webpack://app/../src/utils/send-and-confirm-transaction.ts","webpack://app/../src/utils/sleep.ts","webpack://app/../src/instruction.ts","webpack://app/../src/fee-calculator.ts","webpack://app/../src/nonce-account.ts","webpack://app/../src/utils/bigint.ts","webpack://app/../src/programs/system.ts","webpack://app/../src/loader.ts","webpack://app/../src/bpf-loader.ts","webpack://app/../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","webpack://app/../src/epoch-schedule.ts","webpack://app/../src/__forks__/browser/fetch-impl.ts","webpack://app/../src/rpc-websocket.ts","webpack://app/../src/account-data.ts","webpack://app/../src/programs/address-lookup-table/state.ts","webpack://app/../src/utils/makeWebsocketUrl.ts","webpack://app/../src/connection.ts","webpack://app/../src/keypair.ts","webpack://app/../src/programs/address-lookup-table/index.ts","webpack://app/../src/programs/compute-budget.ts","webpack://app/../src/programs/ed25519.ts","webpack://app/../src/utils/secp256k1.ts","webpack://app/../src/programs/secp256k1.ts","webpack://app/../src/programs/stake.ts","webpack://app/../src/programs/vote.ts","webpack://app/../src/validator-info.ts","webpack://app/../src/vote-account.ts","webpack://app/../src/utils/cluster.ts","webpack://app/../src/utils/send-and-confirm-raw-transaction.ts","webpack://app/../src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  programId?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const {\n      context,\n      value: {blockhash},\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature(): number {\n        throw new Error(\n          'The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' +\n            'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' +\n            'for a given message.',\n        );\n      },\n      toJSON() {\n        return {};\n      },\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator,\n      },\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                console.error(\n                  `Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``,\n                  {\n                    args,\n                    error: e,\n                  },\n                );\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","this","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","super","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","undefined","_bn","uniquePublicKeyCounter","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","_PublicKey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","rustString","rsl","_decode","bind","_encode","rslShim","offset","str","chars","span","authorized","lockup","voteInit","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","a","transactionLogs","transactionError","cachedLogs","getLogs","Promise","resolve","reject","getTransaction","then","tx","logMessages","catch","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","blob","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify$1","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","fetchImpl","globalThis","fetch","RpcWebSocketClient","CommonClient","generate_request_id","webSocketFactory","url","rpc","WebSocket","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","notify","decodeData","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","memcmp","encoding","createRpcResult","result","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","res","too_many_requests_retries","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","lamportsPerSignature","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitmentOrConfig","wsEndpoint","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify","unsafeRes","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getLatestBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_Lockup","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","iconUrl","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assert$1","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sourceRoot":""}
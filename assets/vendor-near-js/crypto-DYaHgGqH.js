import{r as g}from"../vendor-borsh-uT6VLZDJ.js";import{r as m}from"../vendor-tweetnacl-DH0kfJ7g.js";import{r as j}from"./types-BW5UzBhQ.js";var p={},b={},P;function K(){return P||(P=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.KeyType=void 0,function(t){t[t.ED25519=0]="ED25519"}(e.KeyType||(e.KeyType={}))}(b)),b}var l={},_={},h;function D(){if(h)return _;h=1,Object.defineProperty(_,"__esModule",{value:!0}),_.KeyPairBase=void 0;class e{}return _.KeyPairBase=e,_}var o={},c={},v;function q(){if(v)return c;v=1;var e=c&&c.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(c,"__esModule",{value:!0}),c.PublicKey=void 0;const t=j(),a=g(),d=e(m()),n=K();function u(r){switch(r){case n.KeyType.ED25519:return"ed25519";default:throw new Error(`Unknown key type ${r}`)}}function f(r){switch(r.toLowerCase()){case"ed25519":return n.KeyType.ED25519;default:throw new Error(`Unknown key type ${r}`)}}class s extends t.Assignable{static from(i){return typeof i=="string"?s.fromString(i):i}static fromString(i){const y=i.split(":");if(y.length===1)return new s({keyType:n.KeyType.ED25519,data:(0,a.baseDecode)(y[0])});if(y.length===2)return new s({keyType:f(y[0]),data:(0,a.baseDecode)(y[1])});throw new Error("Invalid encoded key format, must be <curve>:<encoded key>")}toString(){return`${u(this.keyType)}:${(0,a.baseEncode)(this.data)}`}verify(i,y){switch(this.keyType){case n.KeyType.ED25519:return d.default.sign.detached.verify(i,y,this.data);default:throw new Error(`Unknown key type ${this.keyType}`)}}}return c.PublicKey=s,c}var k;function T(){if(k)return o;k=1;var e=o&&o.__importDefault||function(s){return s&&s.__esModule?s:{default:s}};Object.defineProperty(o,"__esModule",{value:!0}),o.KeyPairEd25519=void 0;const t=g(),a=e(m()),d=K(),n=D(),u=q();class f extends n.KeyPairBase{constructor(r){super();const i=a.default.sign.keyPair.fromSecretKey((0,t.baseDecode)(r));this.publicKey=new u.PublicKey({keyType:d.KeyType.ED25519,data:i.publicKey}),this.secretKey=r}static fromRandom(){const r=a.default.sign.keyPair();return new f((0,t.baseEncode)(r.secretKey))}sign(r){return{signature:a.default.sign.detached(r,(0,t.baseDecode)(this.secretKey)),publicKey:this.publicKey}}verify(r,i){return this.publicKey.verify(r,i)}toString(){return`ed25519:${this.secretKey}`}getPublicKey(){return this.publicKey}}return o.KeyPairEd25519=f,o}var w;function O(){if(w)return l;w=1,Object.defineProperty(l,"__esModule",{value:!0}),l.KeyPair=void 0;const e=D(),t=T();class a extends e.KeyPairBase{static fromRandom(n){switch(n.toUpperCase()){case"ED25519":return t.KeyPairEd25519.fromRandom();default:throw new Error(`Unknown curve ${n}`)}}static fromString(n){const u=n.split(":");if(u.length===1)return new t.KeyPairEd25519(u[0]);if(u.length===2)switch(u[0].toUpperCase()){case"ED25519":return new t.KeyPairEd25519(u[1]);default:throw new Error(`Unknown curve: ${u[0]}`)}else throw new Error("Invalid encoded key format, must be <curve>:<encoded key>")}}return l.KeyPair=a,l}var E;function $(){return E||(E=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.PublicKey=e.KeyPairEd25519=e.KeyPair=e.KeyType=void 0;var t=K();Object.defineProperty(e,"KeyType",{enumerable:!0,get:function(){return t.KeyType}});var a=O();Object.defineProperty(e,"KeyPair",{enumerable:!0,get:function(){return a.KeyPair}});var d=T();Object.defineProperty(e,"KeyPairEd25519",{enumerable:!0,get:function(){return d.KeyPairEd25519}});var n=q();Object.defineProperty(e,"PublicKey",{enumerable:!0,get:function(){return n.PublicKey}})}(p)),p}var S=$();export{S as l,$ as r};
